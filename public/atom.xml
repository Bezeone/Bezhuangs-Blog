<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bezhuang&#39;s Blog</title>
  
  <subtitle>庄之皓的博客网站</subtitle>
  <link href="http://blog.zhuangzhihao.top/atom.xml" rel="self"/>
  
  <link href="http://blog.zhuangzhihao.top/"/>
  <updated>2023-05-17T02:52:04.235Z</updated>
  <id>http://blog.zhuangzhihao.top/</id>
  
  <author>
    <name>Bezhuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx 反向代理</title>
    <link href="http://blog.zhuangzhihao.top/Nginx/"/>
    <id>http://blog.zhuangzhihao.top/Nginx/</id>
    <published>2023-05-13T16:00:00.000Z</published>
    <updated>2023-05-17T02:52:04.235Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。为了方便学习和测试，我使用的是 Ubuntu + <a href="https://blog.csdn.net/hwx865/article/details/90287715">MySQL</a> + <a href="https://blog.csdn.net/qq_40492048/article/details/114389875">OpenJDK</a> 华为云环境，以下为我总结的一些操作步骤和流程，仅供测试参考。</p></blockquote><span id="more"></span><h3 id="一、Nginx-安装与启动"><a href="#一、Nginx-安装与启动" class="headerlink" title="一、Nginx 安装与启动"></a>一、Nginx 安装与启动</h3><p>关闭防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>安装命令和常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"></span><br><span class="line">#启动，能访问80端口</span><br><span class="line">nginx </span><br><span class="line">curl 127.0.0.1:80</span><br><span class="line"></span><br><span class="line">#立即停止</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">#执行完当前请求再停止</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line">#重新加载配置文件，相当于restart</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">#将日志写入一个新的文件</span><br><span class="line">nginx -s reopen</span><br><span class="line"></span><br><span class="line">#测试配置文件</span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">#查看日志中的错误</span><br><span class="line">cd /var/log/nginx</span><br><span class="line">tail -f error.log</span><br></pre></td></tr></table></figure><p>使用 <code>systemctl</code>启动、停止、重新加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line">#产看日志</span><br><span class="line">journalctl -xe</span><br><span class="line"></span><br><span class="line">systemctl stop nginx</span><br><span class="line"></span><br><span class="line">systemctl reload nginx</span><br><span class="line"></span><br><span class="line">#配置开机启动</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><h3 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h3><p>配置文件位于 <code>/etc/nginx/nginx.conf</code>，下列命令会引用<code>/etc/nginx/conf.d</code>目录下所有的 <code>.conf</code>文件，这样可以保持主配置文件的简洁，同时配个多个<code>.conf</code>文件方便区分，增加可读性。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><p>默认配置文件： <code>/etc/nginx/conf.d/default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment">#监听端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html; <span class="comment">#根目录</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm; <span class="comment">#首页</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件结构：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  server&#123;<span class="comment">#虚拟主机 </span></span><br><span class="line">    <span class="section">location</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span> <span class="number">80</span>；</span><br><span class="line">      server_name localhost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> &#123;    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  server&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加静态网站： <code>/etc/nginx/conf.d/8000.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8000</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/AdminLTE-<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">index</span> index.html index2.html index3.html;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚拟主机 <code>server</code> 通过 <code>listen</code> 和 <code>server_name</code> 进行区分，如果有多个<code>server</code> 配置，<code>listen + server_name</code> 不能重复。</p><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><p>监听可以配置成 <code>IP</code> 或<code>端口</code>或 <code>IP+端口</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen 127.0.0.1:8000; </span><br><span class="line">listen 127.0.0.1;（ 端口不写,默认80 ） </span><br><span class="line">listen 8000; </span><br><span class="line">listen *:8000; </span><br><span class="line">listen localhost:8000;</span><br></pre></td></tr></table></figure><h4 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h4><p><code>server_name</code> 主要用于区分，可以随便起。也可以使用变量 <code>$hostname</code> 配置成主机名。或者配置成域名：<code>example.org</code> <code>www.example.org</code> <code>*.example.org</code></p><p>如果多个 server 的端口重复，那么根据<code>域名</code>或者<code>主机名</code>去匹配 <code>server_name</code> 进行选择。</p><h3 id="三、HTTP-反向代理"><a href="#三、HTTP-反向代理" class="headerlink" title="三、HTTP 反向代理"></a>三、HTTP 反向代理</h3><p>在客户端代理转发请求称为正向代理，例如 VPN。在服务器端代理转发请求称为反向代理，例如 nginx。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1659084328663-32955bb1-82f0-40f3-b94a-f233b4a5793f.png" style="zoom: 50%;"></p><p>启动 Springboot 后台服务，端口为 8088；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ruoyi-admin.jar</span><br></pre></td></tr></table></figure><p>添加 Nginx 配置文件 <code>8001.conf</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">server_name</span> ruoyi.localhost;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="proxy-pass-配置说明"><a href="#proxy-pass-配置说明" class="headerlink" title="proxy_pass 配置说明"></a><code>proxy_pass</code> 配置说明</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /some/path/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>proxy-pass</code> 的地址只配置到端口，不包含 <code>/</code> 或其他路径，那么 location 将被追加到转发地址中。如上所示，访问 <code>http://localhost/some/path/page.html</code> 将被代理到 <code>http://localhost:8080/some/path/page.html</code> </li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /some/path/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080/zh-cn/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>proxy-pass</code>的地址包括<code>/</code>或其他路径，那么/some/path将会被替换，如上所示，访问 <code>http://localhost/some/path/page.html</code> 将被代理到 <code>http://localhost:8080/zh-cn/page.html</code>。‎</li></ul><h4 id="设置代理请求-headers"><a href="#设置代理请求-headers" class="headerlink" title="设置代理请求 headers"></a>设置代理请求 headers</h4><p>‎用户可以重新定义或追加header信息传递给后端<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_request_headers">‎</a>‎服务器。可以包含文本、变量及其组合。默认情况下，仅重定义两个字段：‎</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$proxy_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection close;</span><br></pre></td></tr></table></figure><p>由于使用反向代理之后，后端服务无法获取用户的真实IP，所以，一般反向代理都会设置以下header信息。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /some/path/ &#123;</span><br><span class="line">    <span class="comment">#nginx的主机地址</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用变量的值：</p><ul><li><code>$host</code>：nginx主机IP，例如192.168.56.105</li><li><code>$http_host</code>：nginx主机IP和端口，192.168.56.105:8001</li><li><code>$proxy_host</code>：localhost:8088，proxy_pass里配置的主机名和端口</li><li><code>$remote_addr</code>:用户的真实IP，即客户端IP。</li></ul><h4 id="非-HTTP-代理"><a href="#非-HTTP-代理" class="headerlink" title="非 HTTP 代理"></a>非 HTTP 代理</h4><p>如果要将请求传递到非 HTTP 代理服务器，可以使用下列指令：</p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass">fastcgi_pass</a> 将请求转发到FastCGI服务器（多用于PHP）</li><li><a href="https://nginx.org/en/docs/http/ngx_http_scgi_module.html#scgi_pass">scgi_pass</a> 将请求转发到SCGI server服务器（多用于PHP）</li><li><a href="https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass">uwsgi_pass</a> 将请求转发到uwsgi服务器（多用于python）</li><li><a href="https://nginx.org/en/docs/http/ngx_http_memcached_module.html#memcached_pass">memcached_pass</a> 将请求转发到memcached服务器</li></ul><h3 id="四、动静分离和负载均衡"><a href="#四、动静分离和负载均衡" class="headerlink" title="四、动静分离和负载均衡"></a>四、动静分离和负载均衡</h3><p>其他内容，可以继续学习：<a href="https://www.yuque.com/wukong-zorrm/cql6cz/rvmsl7">nginx 一小时入门教程文字版</a> 或 <a href="https://www.bilibili.com/video/BV1rG4y1e7BQ">nginx 一小时入门教程视频版</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Nginx 是一款轻量级的 Web 服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。为了方便学习和测试，我使用的是 Ubuntu + &lt;a href=&quot;https://blog.csdn.net/hwx865/article/details/90287715&quot;&gt;MySQL&lt;/a&gt; + &lt;a href=&quot;https://blog.csdn.net/qq_40492048/article/details/114389875&quot;&gt;OpenJDK&lt;/a&gt; 华为云环境，以下为我总结的一些操作步骤和流程，仅供测试参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="网络与信息安全" scheme="http://blog.zhuangzhihao.top/categories/%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Colab Tutorial and PyTorch Tutorial</title>
    <link href="http://blog.zhuangzhihao.top/Colab&amp;PyTorch-Tutorial/"/>
    <id>http://blog.zhuangzhihao.top/Colab&amp;PyTorch-Tutorial/</id>
    <published>2023-04-30T16:00:00.000Z</published>
    <updated>2023-06-03T13:24:42.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>吴恩达说：AI 是最新的电力，大约在一百年前，我们社会的电气化改变了每个主要行业，从交通运输行业到制造业、医疗保健、通讯等方面，如今我们见到了 AI 明显的令人惊讶的能量，带来了同样巨大的转变。而在 AI 的各个分支中，发展的最为迅速的就是深度学习。去年初时，我尝试学习过<a href="/动手学深度学习/">动手学深度学习</a>课程，但是没坚持下来。这次选择李宏毅 2023 年春季最新的机器学习课程，这门课专注于深度学习领域，和最新技术的应用。以下为我在学习第二讲：Colab Tutorial and PyTorch Tutorial 时所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、Colab-Tutorial"><a href="#一、Colab-Tutorial" class="headerlink" title="一、Colab Tutorial"></a>一、Colab Tutorial</h3><h4 id="什么是-Colab？"><a href="#什么是-Colab？" class="headerlink" title="什么是 Colab？"></a>什么是 Colab？</h4><p>Colab，即“Colaboratory”，允许您在浏览器中编写和执行 Python，零配置，免费使用 GPU，轻松分享。无论您是学生、数据科学家还是 AI 研究人员，Colab 都可以让您的工作更轻松。 您可以在代码块中键入 Python 代码，或使用前导感叹号 <code>!</code> 将代码块更改为 bash 环境以执行 Linux 代码（<code>!ls</code>）。</p><p>使用感叹号 <code>!</code> 启动一个新的 shell，执行操作，然后终止该 shell，而百分比 <code>%</code> 影响与笔记本相关的进程，它被称为魔术命令。对于 <code>cd</code>（更改目录）命令，使用 <code>%cd</code> 而不是 <code>!</code> ，其他魔术命令列在<a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html">这里</a>。</p><p>要使用 Google 提供的免费 GPU，请单击 “Runtime” -&gt; “Change Runtime Type”。“Hardward Accelerator” 下有三个选项，选择“GPU”。</p><p>导入 PyTorch 并检查分配的 GPU，如果拿到 K80 可能会跑非常久：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available() <span class="comment"># is GPU available</span></span><br><span class="line"><span class="comment"># Outputs True if running with GPU</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check allocated GPU type</span></span><br><span class="line">!nvidia-smi</span><br></pre></td></tr></table></figure><h4 id="Colab-文件操作"><a href="#Colab-文件操作" class="headerlink" title="Colab 文件操作"></a>Colab 文件操作</h4><p>通过 Google Drive 下载文件：存储在 Google Drive 中的一个文件有以下分享链接，可以使用 <code>--fuzzy</code> 命令通过知道链接的 Colab 下载文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download the file with the following link, and rename it to pikachu.png</span></span><br><span class="line">!gdown --fuzzy https://drive.google.com/file/d/14FK5G6DOh7EdLyoj4D5teRSzriTOUPD7/view?usp=sharing --output pikachu.png</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List all the files under the working directory</span></span><br><span class="line">!ls</span><br></pre></td></tr></table></figure><p>挂载 Google Drive：如果你不想每次开始新的会话都下载数据，或者你希望一些文件永久保存，你可以将自己的 Google Drive 挂载到Colab，直接下载/保存数据到你的 Google Drive。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">&#x27;/content/drive&#x27;</span>)</span><br><span class="line"><span class="comment"># your google drive will be mounted at /content/drive</span></span><br></pre></td></tr></table></figure><p>挂载驱动器后，Google Drive 的内容将被挂载到名为 MyDrive 的目录中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%cd /content/drive/MyDrive </span><br><span class="line"><span class="comment">#change directory to google drive</span></span><br><span class="line">!mkdir ML2023 <span class="comment">#make a directory named ML2023</span></span><br><span class="line">%cd ./ML2023</span><br><span class="line"><span class="comment">#change directory to ML2023</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pwd <span class="comment">#output the current directory</span></span><br></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><p>由于 Colab 会侦测使用者是否在电脑前面使用，因此一定时间没有动作会自动断线。开启 F12 控制台，贴上 Javascript：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ClickConnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Working...&quot;</span>);  <span class="comment">// debug 用</span></span><br><span class="line">    <span class="comment">// 去選擇按鈕</span></span><br><span class="line">    <span class="keyword">var</span> connectbutton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(</span><br><span class="line">        <span class="string">&quot;colab-toolbar-button&quot;</span> +</span><br><span class="line">        <span class="string">&quot;#connect-icon.big-icon.icon-okay&quot;</span>);</span><br><span class="line">    <span class="comment">// 點個兩下</span></span><br><span class="line">    connectbutton.<span class="title function_">click</span>(); connectbutton.<span class="title function_">click</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定固定每 10 分鐘點一下</span></span><br><span class="line"><span class="keyword">const</span> stopit = <span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="title class_">ClickConnect</span>, <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這行沒有沒關係，只是避免停不下來</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stopping</span> = stopper =&gt; <span class="built_in">clearInterval</span>(stopper);</span><br></pre></td></tr></table></figure><p>有用的 Linux 命令（在 Colab 中）：</p><ul><li><code>ls</code> : 列出当前目录下的所有文件，</li><li><code>ls -l</code>: 列出当前目录下所有文件的详细信息，</li><li><code>pwd</code>: 输出工作目录，</li><li><code>mkdir &lt;dirname&gt;</code> : 创建一个目录 <code>&lt;dirname&gt;</code>，</li><li><code>cd &lt;dirname&gt;</code>: 移动到目录 <code>&lt;dirname&gt;</code>，</li><li><code>gdown</code>：从谷歌驱动器下载文件，</li><li><code>wget</code> : 从网上下载文件，</li><li><code>python &lt;python_file&gt;</code>：执行一个 Python 文件。</li></ul><h3 id="二、PyTorch-Tutorial"><a href="#二、PyTorch-Tutorial" class="headerlink" title="二、PyTorch Tutorial"></a>二、PyTorch Tutorial</h3><h4 id="视频讲解"><a href="#视频讲解" class="headerlink" title="视频讲解"></a>视频讲解</h4><ul><li><a href="https://www.youtube.com/watch?v=6dEp6oRN2NE">https://www.youtube.com/watch?v=6dEp6oRN2NE</a></li><li><a href="https://speech.ee.ntu.edu.tw/~hylee/ml/ml2023-course-data/Pytorch_Tutorial_1_rev_1.pdf">https://speech.ee.ntu.edu.tw/~hylee/ml/ml2023-course-data/Pytorch_Tutorial_1_rev_1.pdf</a></li></ul><h4 id="什么是-PyTorch？"><a href="#什么是-PyTorch？" class="headerlink" title="什么是 PyTorch？"></a>什么是 PyTorch？</h4><p>PyTorch 是 Python 中的机器学习框架。两个主要特点：N-dimensional Tensor computation (like NumPy) on GPUs &amp; Automatic differentiation for training deep neural networks（自动计算微分）。</p><p>训练神经网络需要：定义神经网络（Define Neural Network）、损失函数（Loss Function）、优化算法（Optimization Algorithm）。</p><p>在 Pytorch 中训练和测试神经网络需要：加载数据（Load Data）、训练（Training）、验证（Validation）、测试（Testing）。</p><h4 id="Dataset-amp-Dataloader"><a href="#Dataset-amp-Dataloader" class="headerlink" title="Dataset &amp; Dataloader"></a>Dataset &amp; Dataloader</h4><p>Dataset：存储数据样本和期望值。</p><p>Dataloader：批量分组数据，启用多处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read data &amp; preprocess</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span> (self, file): </span><br><span class="line">self.data = ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns one sample at a time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>): </span><br><span class="line"><span class="keyword">return</span> self.data[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Returns the size of the dataset</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line"></span><br><span class="line">dataset = MyDataset(file)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">5</span>, shuffle=<span class="literal">False</span>) <span class="comment"># Training: True Testing: False</span></span><br></pre></td></tr></table></figure><h4 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h4><p>高维矩阵（数组）：<code>dim in PyTorch == axis in NumPy</code>。</p><p>Creating Tensors：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directly from data (list or numpy.ndarray)</span></span><br><span class="line">x = torch.tensor([[<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">x = torch.from_numpy(np.array([[<span class="number">1</span>, -<span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensor of constant zeros &amp; ones</span></span><br><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">x = torch.ones([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>Tensors – <a href="https://pytorch.org/docs/stable/tensors.html">Common Operations</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Common arithmetic functions are supported, such as</span></span><br><span class="line">z = x + y</span><br><span class="line">z = x - y</span><br><span class="line">y = x.<span class="built_in">sum</span>()  <span class="comment"># Summation</span></span><br><span class="line">y = x.mean() <span class="comment"># Mean</span></span><br><span class="line">y = x.<span class="built_in">pow</span>(<span class="number">2</span>) <span class="comment"># Power</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Transpose: transpose two specified dimensions</span></span><br><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape  <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line">x = x.transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">x.shape  <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Squeeze: remove the specified dimension with length = 1</span></span><br><span class="line">x = torch.zeros([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape  <span class="comment"># torch.Size([1, 2, 3])</span></span><br><span class="line">x = x.squeeze(<span class="number">0</span>) <span class="comment"># (dim = 0)</span></span><br><span class="line">x.shape  <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unsqueeze: expand a new dimension</span></span><br><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">x.shape  <span class="comment"># torch.Size([2, 3])</span></span><br><span class="line">x = x.unsqueeze(<span class="number">1</span>)  <span class="comment"># (dim = 1)</span></span><br><span class="line">x.shape  <span class="comment"># torch.Size([2, 1, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cat: concatenate multiple tensors</span></span><br><span class="line">x = torch.zeros([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">y = torch.zeros([<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">z = torch.zeros([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">w = torch.cat([x, y, z], dim=<span class="number">1</span>)</span><br><span class="line">w.shape  <span class="comment"># torch.Size([2, 6, 3])</span></span><br></pre></td></tr></table></figure><p>Tensors – <a href="https://pytorch.org/docs/stable/tensors.html">Data Type</a>：对模型和数据使用不同的数据类型会导致错误。</p><p>Tensors - Devices：Tensors &amp; modules 默认使用 CPU 计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use .to() to move tensors to appropriate devices.</span></span><br><span class="line">x = x.to(‘cpu’)</span><br><span class="line">x = x.to(‘cuda’)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if your computer has NVIDIA GPU</span></span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><h4 id="Gradient-Calculation"><a href="#Gradient-Calculation" class="headerlink" title="Gradient Calculation"></a>Gradient Calculation</h4><p><img src="https://blog.zhuangzhihao.top/img/Pytorch01.png" alt></p><h4 id="Training-amp-Testing-Neural-Networks"><a href="#Training-amp-Testing-Neural-Networks" class="headerlink" title="Training &amp; Testing Neural Networks"></a>Training &amp; Testing Neural Networks</h4><p>torch.nn – Network Layers：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linear Layer (Fully-connected Layer)</span></span><br><span class="line">layer = torch.nn.Linear(<span class="number">32</span>, <span class="number">64</span>)</span><br><span class="line">layer.weight.shape  <span class="comment"># torch.Size([64, 32])</span></span><br><span class="line">layer.bias.shape  <span class="comment"># torch.Size([64])</span></span><br></pre></td></tr></table></figure><h4 id="Build-your-own-neural-network"><a href="#Build-your-own-neural-network" class="headerlink" title="Build your own neural network"></a>Build your own neural network</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module): </span><br><span class="line">    <span class="comment"># Initialize your model &amp; define layers</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).init () </span><br><span class="line">            self.net = nn.Sequential(</span><br><span class="line">                nn.Linear(<span class="number">10</span>, <span class="number">32</span>), </span><br><span class="line">                nn.Sigmoid(), </span><br><span class="line">                nn.Linear(<span class="number">32</span>, <span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Compute output of your NN</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>): </span><br><span class="line">    <span class="keyword">return</span> self.net(x)</span><br></pre></td></tr></table></figure><h4 id="Loss-Functions"><a href="#Loss-Functions" class="headerlink" title="Loss Functions"></a>Loss Functions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mean Squared Error (for regression tasks)</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"><span class="comment"># Cross Entropy (for classification tasks)</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">loss = criterion(model_output, expected_value)</span><br></pre></td></tr></table></figure><h4 id="torch-optim"><a href="#torch-optim" class="headerlink" title="torch.optim"></a>torch.optim</h4><p>基于梯度的优化算法，调整网络参数以减少错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr, momentum = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>对于每批数据：</p><ol><li>调用 <code>optimizer.zero_grad()</code> 重置模型参数的梯度。</li><li>调用 <code>loss.backward()</code> 反向传播预测损失的梯度。</li><li>调用 <code>optimizer.step()</code> 调整模型参数。</li></ol><h4 id="Neural-Network-Training-Setup"><a href="#Neural-Network-Training-Setup" class="headerlink" title="Neural Network Training Setup"></a>Neural Network Training Setup</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataset = MyDataset(file)  <span class="comment"># read data via MyDataset</span></span><br><span class="line">tr_set = DataLoader(dataset, <span class="number">16</span>, shuffle=<span class="literal">True</span>)  <span class="comment"># put dataset into Dataloader</span></span><br><span class="line">model = MyModel().to(device)  <span class="comment"># construct model and move to device (cpu/cuda) </span></span><br><span class="line">criterion = nn.MSELoss()  <span class="comment"># set loss function</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), <span class="number">0.1</span>)  <span class="comment"># set optimizer</span></span><br></pre></td></tr></table></figure><h4 id="Neural-Network-Training-Loop"><a href="#Neural-Network-Training-Loop" class="headerlink" title="Neural Network Training Loop"></a>Neural Network Training Loop</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(n_epochs):    <span class="comment"># iterate n_epochs</span></span><br><span class="line">    model.train()  <span class="comment"># set model to train mode </span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> tr_set:  <span class="comment"># iterate through the dataloader</span></span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># set gradient to zero</span></span><br><span class="line">        x, y = x.to(device), y.to(device)   <span class="comment"># move data to device (cpu/cuda) </span></span><br><span class="line">        pred = model(x)    <span class="comment"># forward pass (compute output)</span></span><br><span class="line">        loss = criterion(pred, y)   <span class="comment"># compute loss</span></span><br><span class="line">        loss.backward()   <span class="comment"># compute gradient (backpropagation)</span></span><br><span class="line">        optimizer.step()  <span class="comment"># update model with optimizer</span></span><br></pre></td></tr></table></figure><h4 id="Neural-Network-Validation-Loop"><a href="#Neural-Network-Validation-Loop" class="headerlink" title="Neural Network Validation Loop"></a>Neural Network Validation Loop</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()  <span class="comment"># set model to evaluation mode</span></span><br><span class="line">total_loss = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> dv_set:  <span class="comment"># iterate through the dataloader</span></span><br><span class="line">    x, y = x.to(device), y.to(device)  <span class="comment"># move data to device (cpu/cuda)</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># disable gradient calculation</span></span><br><span class="line">        pred = model(x)    <span class="comment"># forward pass (compute output)</span></span><br><span class="line">        loss = criterion(pred, y)  <span class="comment"># compute loss</span></span><br><span class="line">    total_loss += loss.cpu().item() * <span class="built_in">len</span>(x)   <span class="comment"># accumulate loss</span></span><br><span class="line">    avg_loss = total_loss / <span class="built_in">len</span>(dv_set.dataset)  <span class="comment"># compute averaged loss</span></span><br></pre></td></tr></table></figure><h4 id="Neural-Network-Testing-Loop"><a href="#Neural-Network-Testing-Loop" class="headerlink" title="Neural Network Testing Loop"></a>Neural Network Testing Loop</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()  <span class="comment"># set model to evaluation mode</span></span><br><span class="line">preds = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tt_set:  <span class="comment"># iterate through the dataloader </span></span><br><span class="line">    x = x.to(device)  <span class="comment"># move data to device (cpu/cuda) </span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># disable gradient calculation </span></span><br><span class="line">        pred = model(x)   <span class="comment"># forward pass (compute output) </span></span><br><span class="line">        preds.append(pred.cpu())  <span class="comment"># collect prediction</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>模型 <code>model.eval()</code>：更改某些模型层的行为，例如 dropout 和 batch 正常化。</li><li>使用 <code>torch.no_grad()</code>：防止将计算添加到梯度计算图中。通常用于防止对验证/测试数据进行意外训练。</li></ul><h4 id="Save-Load-Trained-Models"><a href="#Save-Load-Trained-Models" class="headerlink" title="Save/Load Trained Models"></a>Save/Load Trained Models</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save</span></span><br><span class="line">torch.save(model.state_dict(), path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load</span></span><br><span class="line">ckpt = torch.load(path) </span><br><span class="line">model.load_state_dict(ckpt)</span><br></pre></td></tr></table></figure><h4 id="More-About-PyTorch"><a href="#More-About-PyTorch" class="headerlink" title="More About PyTorch"></a>More About PyTorch</h4><ul><li>torchaudio：speech/audio processing </li><li>torchtext ：natural language processing </li><li>torchvision ：computer vision </li><li><p>skorch ：scikit-learn + pyTorch</p></li><li><p>Useful github repositories using PyTorch：</p><ul><li><p>Huggingface Transformers (transformer models: BERT, GPT, …) </p></li><li><p>Fairseq (sequence modeling for NLP &amp; speech) </p></li><li><p>ESPnet (speech recognition, translation, synthesis, …) </p></li><li><p>Most implementations of recent deep learning papers</p></li></ul></li></ul><h3 id="三、PyTorch-文档和常见错误"><a href="#三、PyTorch-文档和常见错误" class="headerlink" title="三、PyTorch 文档和常见错误"></a>三、PyTorch 文档和常见错误</h3><h4 id="PyTorch-Documentation"><a href="#PyTorch-Documentation" class="headerlink" title="PyTorch Documentation"></a>PyTorch Documentation</h4><p><a href="https://pytorch.org/docs/stable/">https://pytorch.org/docs/stable/</a> </p><ul><li><code>torch.nn</code> -&gt; Neural Network </li><li><code>torch.optim</code> -&gt; Optimization Algorithms </li><li><code>torch.utils.data</code> -&gt; Dataset, Dataloader</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;吴恩达说：AI 是最新的电力，大约在一百年前，我们社会的电气化改变了每个主要行业，从交通运输行业到制造业、医疗保健、通讯等方面，如今我们见到了 AI 明显的令人惊讶的能量，带来了同样巨大的转变。而在 AI 的各个分支中，发展的最为迅速的就是深度学习。去年初时，我尝试学习过&lt;a href=&quot;/动手学深度学习/&quot;&gt;动手学深度学习&lt;/a&gt;课程，但是没坚持下来。这次选择李宏毅 2023 年春季最新的机器学习课程，这门课专注于深度学习领域，和最新技术的应用。以下为我在学习第二讲：Colab Tutorial and PyTorch Tutorial 时所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="人工智能与数据科学" scheme="http://blog.zhuangzhihao.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="PyTorch" scheme="http://blog.zhuangzhihao.top/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>正确认识 ChatGPT</title>
    <link href="http://blog.zhuangzhihao.top/%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86ChatGPT/"/>
    <id>http://blog.zhuangzhihao.top/%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86ChatGPT/</id>
    <published>2023-04-21T16:00:00.000Z</published>
    <updated>2023-05-08T01:31:48.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>吴恩达说：AI 是最新的电力，大约在一百年前，我们社会的电气化改变了每个主要行业，从交通运输行业到制造业、医疗保健、通讯等方面，如今我们见到了 AI 明显的令人惊讶的能量，带来了同样巨大的转变。而在 AI 的各个分支中，发展的最为迅速的就是深度学习。去年初时，我尝试学习过<a href="/动手学深度学习/">动手学深度学习</a>课程，但是没坚持下来。这次选择李宏毅 2023 年春季最新的机器学习课程，这门课专注于深度学习领域，和最新技术的应用。以下为我在学习第一讲：正确认识 ChatGPT 时所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、对-ChatGPT-的常见误解"><a href="#一、对-ChatGPT-的常见误解" class="headerlink" title="一、对 ChatGPT 的常见误解"></a>一、对 ChatGPT 的常见误解</h3><p>常见误解 1：是由开发者准备好的罐头回应。但实际上，<a href="https://chat.openai.com/chat">Chat GPT</a> 每次输出都不相同。</p><p>常见误解 2：是 ChatGPT 从网上搜寻答案，整理重组给你想要的答案。但实际上，多数 ChatGPT 的答案在网络上都找不到一模一样的句子，甚至很多是幻想出来的。官方也给出了回应，说 ChatGPT 是没有连网的。</p><p>ChatGPT 真正在做的事情是文字接龙，可以把它理解成一个函数，输入一些东西就输出一些东西。输入一个句子，输出的是接下来的一个词汇出现的几率，然后从这个几率分布中做取样，所以它每次产生的答案是有随机性的。</p><p><img src="https://blog.zhuangzhihao.top/img/ChatGPT01.png" alt></p><p>这个函数非常复杂，可能有 1700 亿个以上的参数。作为对比，$f(x) = a x + b$ 有两个参数。</p><p>这么一个复杂且神奇的函数是通过大量网络上的资料以及人类的指导下，训练出来的，当神奇函数 $f$ 找到后，ChatGPT 就不需要联网了。我们平常使用的时候，就是<strong>测试</strong>，测试的时候就不需要上网搜集资料了。</p><h3 id="二、ChatGPT-背后的关键技术——预训练（Pre-train）"><a href="#二、ChatGPT-背后的关键技术——预训练（Pre-train）" class="headerlink" title="二、ChatGPT 背后的关键技术——预训练（Pre-train）"></a>二、ChatGPT 背后的关键技术——预训练（Pre-train）</h3><p>预训练（Pre-train）又叫自督导式学习（Self-supervised Learning），训练出的模型又叫基石模型（Foundation Model）。</p><p>GPT = Generative Pre-trained Transformer。</p><p>一般机器是怎样学习的？以一个英文翻译成中文为例，我们需要提供大量的成对的句子，提供给机器：I eat an apple &lt;-&gt; 我吃苹果，You eat an orange &lt;-&gt; 你吃橘子。这种学习称为督导式学习，有了成堆资料机器会自动找到函数。</p><p>然而要将一般的机器学习步骤运用在 ChatGPT 上，我们需要给它提供大量的学习资料，但人类老师提供的资料也许是不足够的，当有人问到它之前没有遇到过得问题，那么它也无法回答。</p><p>实际上，网络上的每一段文字，都能形成成对的问答，可以无痛制造成对资料。</p><p><img src="https://blog.zhuangzhihao.top/img/ChatGPT02.png" alt></p><p>在没有人类老师指导的情况下，学习大量网络上的数据，此时称之为预训练（自督导式学习），在多种语言上做预训练后，只要教某一个语言的某一个任务，自动学会其他语言的同样任务。</p><p>之后在人类老师的指导下（督导式学习）模型可以继续学习，我们称之为微调（finetune）。当人类老师比较懒不想教 AI 的时候，或者人类老师也不知道标准答案的时候，就可以使用增强式学习（Reinforcement Learning，RL）这个时候我们只需要点个赞，或者点个踩就可以，比较省事。</p><h3 id="三、ChatGPT-带来的研究问题"><a href="#三、ChatGPT-带来的研究问题" class="headerlink" title="三、ChatGPT 带来的研究问题"></a>三、ChatGPT 带来的研究问题</h3><ol><li>如何精准提出需求：当我们不能精准提出需求的时候，ChatGPT 不能给出有效的答案，我们需要对 ChatGPT 进行“催眠”（调解），这在学术界叫做 Prompting。</li><li>如何更改错误。ChatGPT 的预训练资料只有到 2021 年。如何让 ChatGPT 修改一个错误，并且不会导致其他错误，这是一个新的主题，叫做：Neural Editing。</li><li>如何用模型侦测一段文字是不是 AI 生成的？同样的概念可以被用在语音、影像上。</li><li>有时候我们不小心告诉它一些东西，有没有办法让它遗忘呢？这是一个新的研究主题，这个主题叫做：Machine Unlearning。</li></ol><h3 id="四、用-ChatGPT-玩文字冒险游戏"><a href="#四、用-ChatGPT-玩文字冒险游戏" class="headerlink" title="四、用 ChatGPT 玩文字冒险游戏"></a>四、用 ChatGPT 玩文字冒险游戏</h3><p>文字冒险游戏又叫互动式小说。</p><p>催眠指令 + ChatGPT 产生的文字冒险游戏叙述 -&gt; ChatGPT -&gt; 产生适合 Midjourney 生成图片的文字叙述 -&gt; Midjourney -&gt; 产生游戏插图。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;吴恩达说：AI 是最新的电力，大约在一百年前，我们社会的电气化改变了每个主要行业，从交通运输行业到制造业、医疗保健、通讯等方面，如今我们见到了 AI 明显的令人惊讶的能量，带来了同样巨大的转变。而在 AI 的各个分支中，发展的最为迅速的就是深度学习。去年初时，我尝试学习过&lt;a href=&quot;/动手学深度学习/&quot;&gt;动手学深度学习&lt;/a&gt;课程，但是没坚持下来。这次选择李宏毅 2023 年春季最新的机器学习课程，这门课专注于深度学习领域，和最新技术的应用。以下为我在学习第一讲：正确认识 ChatGPT 时所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="人工智能与数据科学" scheme="http://blog.zhuangzhihao.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="ChatGPT" scheme="http://blog.zhuangzhihao.top/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>C# 101</title>
    <link href="http://blog.zhuangzhihao.top/CSharp101/"/>
    <id>http://blog.zhuangzhihao.top/CSharp101/</id>
    <published>2023-04-08T16:00:00.000Z</published>
    <updated>2023-04-30T14:22:13.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C# 是一种强大而广泛使用的编程语言，基于面向对象的原则，融合了其他范例中的许多功能，尤其是函数编程，你可以用它来制作网站、游戏、移动应用程序、桌面应用程序等等。C# 也是 .NET 编程平台的一部分，大多数 .NET 运行时和库都是用 C# 编写的，微软提供了 C# for beginners 课程（101、201）为初学者提供引导，以下为我在学习第一门课程过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、Hello-World"><a href="#一、Hello-World" class="headerlink" title="一、Hello World"></a>一、Hello World</h3><p><code>Console.WriteLine</code> 是一个用于向文本控制台打印消息的方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>变量是一个符号，你可以用不同的值来运行相同的代码。例如，你可以声明一个名为 <code>aFriend</code> 的新变量，你可以用 <code>Console.WriteLine</code> 来输出一个字符串。你可以通过使用 <code>string</code> 类型来声明这个变量，或者使用 <code>var</code> 关键字，它将自动为你计算出类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> aFriend = <span class="string">&quot;Bill&quot;</span>;</span><br><span class="line">Console.WriteLine(aFriend);</span><br></pre></td></tr></table></figure><h3 id="二、字符串的基本知识"><a href="#二、字符串的基本知识" class="headerlink" title="二、字符串的基本知识"></a>二、字符串的基本知识</h3><p>上一个代码块中缺少 “Hello “这个词，你可以通过使用 <code>+</code> 将多个字符串组合在一起，创建一个新的字符串，输出到控制台，来解决这个问题。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;Hello &quot;</span> + aFriend + <span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><p>字符串插值：将变量放在 <code>&#123;</code> 和 <code>&#125;</code> 之间，告诉 C# 用变量的值来替换该文本。然后，你可以在开头的引号前加上 <code>$</code>，使字符串插值成为可能。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;aFriend&#125;</span>!&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>firstFriend</code> 和 <code>secondFriend</code> 是字符串的变量。<code>Console.WriteLine</code> 中的那一行也是一个字符串。它是一个字符串字面量。字符串字面量是代表一个恒定字符串的文本。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> firstFriend = <span class="string">&quot;Maria&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> secondFriend = <span class="string">&quot;Sophia&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;My friends are <span class="subst">&#123;firstFriend&#125;</span> and <span class="subst">&#123;secondFriend&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>字符串不仅仅是一个字母的集合，你可以使用 “Length “找到字符串的长度。<code>Length</code> 是一个字符串的属性，它返回该字符串的字符数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">$&quot;The name <span class="subst">&#123;firstFriend&#125;</span> has <span class="subst">&#123;firstFriend.Length&#125;</span> letters.&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The name <span class="subst">&#123;secondFriend&#125;</span> has <span class="subst">&#123;secondFriend.Length&#125;</span> letters.&quot;</span>);</span><br></pre></td></tr></table></figure><p>假设你的字符串中有你不想显示的前面或后面的空格。你想修剪字符串中的空格。 你可以直接使用 <code>Trim</code> 方法和相关的 <code>TrimStart</code>和 <code>TrimEnd</code> 方法来删除前导和尾部空格。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> greeting = <span class="string">&quot;      Hello World!       &quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;[<span class="subst">&#123;greeting&#125;</span>]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> trimmedGreeting = greeting.TrimStart();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;[<span class="subst">&#123;trimmedGreeting&#125;</span>]&quot;</span>);</span><br><span class="line"></span><br><span class="line">trimmedGreeting = greeting.TrimEnd();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;[<span class="subst">&#123;trimmedGreeting&#125;</span>]&quot;</span>);</span><br><span class="line"></span><br><span class="line">trimmedGreeting = greeting.Trim();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;[<span class="subst">&#123;trimmedGreeting&#125;</span>]&quot;</span>);</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>Replace</code> 方法用其他值来替换子串。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> sayHello = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">Console.WriteLine(sayHello);</span><br><span class="line">sayHello = sayHello.Replace(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Greetings&quot;</span>);</span><br><span class="line">Console.WriteLine(sayHello);</span><br></pre></td></tr></table></figure><p>有时你需要你的字符串是全大写或全小写，<code>ToUpper</code> 和 <code>ToLower</code> 就是做这个的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;WhiSPer&quot;</span>.ToUpper());</span><br><span class="line">Console.WriteLine(<span class="string">&quot;sHoUt&quot;</span>.ToLower());</span><br></pre></td></tr></table></figure><p>你的字符串中是否包含另一个字符串？你可以使用 <code>Contains</code> 来找出答案，<code>Contains</code> 方法返回一个 boolean，可以容纳两个值： <code>True</code> 或 <code>False</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> songLyrics = <span class="string">&quot;You say goodbye, and I say hello&quot;</span>;</span><br><span class="line">Console.WriteLine(songLyrics.Contains(<span class="string">&quot;goodbye&quot;</span>));</span><br><span class="line">Console.WriteLine(songLyrics.Contains(<span class="string">&quot;greetings&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>StartsWith</code> 和 <code>EndsWith</code> 是类似于 <code>Contains</code> 的方法，它们告诉你一个字符串是否以你要检查的字符串开始或结束。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(songLyrics.StartsWith(<span class="string">&quot;You&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="三、整型变量和浮点型变量"><a href="#三、整型变量和浮点型变量" class="headerlink" title="三、整型变量和浮点型变量"></a>三、整型变量和浮点型变量</h3><p>一个整型变量是一个正数或负数的整数。整型变量的操作遵循数学运算的顺序，你也可以通过在你想先做的事情周围加上括号来强制执行不同的顺序。 整型变量运算将总是产生整数，即使数学结果是小数或分数，答案也会被截断为整数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">int</span> c = a + b;</span><br><span class="line"><span class="built_in">int</span> d = a - b;</span><br><span class="line"><span class="built_in">int</span> e = a * b;</span><br><span class="line"><span class="built_in">int</span> f = a / b;</span><br><span class="line"><span class="built_in">int</span> g = a + b * c;</span><br><span class="line"><span class="built_in">int</span> h = (a + b) - <span class="number">6</span> * c + (<span class="number">12</span> * <span class="number">4</span>) / <span class="number">3</span> + <span class="number">12</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;c&#125;</span> <span class="subst">&#123;d&#125;</span> <span class="subst">&#123;e&#125;</span> <span class="subst">&#123;f&#125;</span> <span class="subst">&#123;g&#125;</span> <span class="subst">&#123;h&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>你可以用余数运算符 <code>%</code> 找到余数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">int</span> d = (a + b) / c;</span><br><span class="line"><span class="built_in">int</span> e = (a + b) % c;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;quotient: <span class="subst">&#123;d&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;remainder: <span class="subst">&#123;e&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于整数在编码中的结构方式，其大小是有限制的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> max = <span class="built_in">int</span>.MaxValue;</span><br><span class="line"><span class="built_in">int</span> min = <span class="built_in">int</span>.MinValue;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The range of integers is <span class="subst">&#123;min&#125;</span> to <span class="subst">&#123;max&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">// The range of integers is -2147483648 to 2147483647</span></span><br></pre></td></tr></table></figure><p>双精度浮点型变量是数据的另一种表现形式。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a = <span class="number">19</span>;</span><br><span class="line"><span class="built_in">double</span> b = <span class="number">23</span>;</span><br><span class="line"><span class="built_in">double</span> c = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">double</span> d = (a + b) / c;</span><br><span class="line">Console.WriteLine(d);</span><br></pre></td></tr></table></figure><p>双精度浮点型变量的取值范围相当大，比整数大得多。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> max = <span class="built_in">double</span>.MaxValue;</span><br><span class="line"><span class="built_in">double</span> min = <span class="built_in">double</span>.MinValue;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The range of double is <span class="subst">&#123;min&#125;</span> to <span class="subst">&#123;max&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">// The range of double is -1.7976931348623157E+308 to 1.7976931348623157E+308</span></span><br></pre></td></tr></table></figure></p><p>当然，双精度浮点型变量并不完美，它们也有四舍五入的误差。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> third = <span class="number">1.0</span> / <span class="number">3.0</span>;</span><br><span class="line">Console.WriteLine(third);</span><br></pre></td></tr></table></figure></p><p>28 位浮点型（Decimal）与双精度浮点型类似，但它的精度要高得多，可用来满足进行精密数学运算的需求。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decimal</span> min = <span class="built_in">decimal</span>.MinValue;</span><br><span class="line"><span class="built_in">decimal</span> max = <span class="built_in">decimal</span>.MaxValue;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The range of the decimal type is <span class="subst">&#123;min&#125;</span> to <span class="subst">&#123;max&#125;</span>&quot;</span>);</span><br><span class="line"><span class="comment">// The range of the decimal type is -79228162514264337593543950335 to 79228162514264337593543950335</span></span><br></pre></td></tr></table></figure><p>数字的后缀 M 是表示常量应该使用 <code>decimal</code> 类型，数字的后缀 F 是表示常量应该使用 <code>float</code> 类型的方法。否则，编译器会默认假定为 <code>Double</code> 类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a = <span class="number">1.0</span>;</span><br><span class="line"><span class="built_in">double</span> b = <span class="number">3.0</span>;</span><br><span class="line">Console.WriteLine(a / b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">decimal</span> c = <span class="number">1.0</span>M;</span><br><span class="line"><span class="built_in">decimal</span> d = <span class="number">3.0</span>M;</span><br><span class="line">Console.WriteLine(c / d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> radiuss = <span class="number">2.5F</span>;</span><br><span class="line"><span class="built_in">float</span> areas = (<span class="built_in">float</span>)Math.PI * radiuss * radiuss;</span><br><span class="line">Console.WriteLine(areas);</span><br></pre></td></tr></table></figure><p>同理，整型变量也有不同精度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">long</span> min1 = <span class="built_in">long</span>.MinValue;</span><br><span class="line"><span class="built_in">long</span> max1 = <span class="built_in">long</span>.MaxValue;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The range of the long type is <span class="subst">&#123;min1&#125;</span> to <span class="subst">&#123;max1&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">short</span> min3 = <span class="built_in">short</span>.MinValue;</span><br><span class="line"><span class="built_in">short</span> max4 = <span class="built_in">short</span>.MaxValue;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The range of the short type is <span class="subst">&#123;min3&#125;</span> to <span class="subst">&#123;max4&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、分支和循环"><a href="#四、分支和循环" class="headerlink" title="四、分支和循环"></a>四、分支和循环</h3><p>条件是在 <code>if</code> 后面的括号中的语句。条件是一个布尔值，这意味着它必须返回一个真或假。这意味着使用符号，如 <code>&gt;</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code> 或 <code>==</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> outcome = <span class="number">3</span> &gt; <span class="number">5</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;This condition is &quot;</span> + outcome);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (a + b &gt; <span class="number">10</span>)</span><br><span class="line">Console.WriteLine(<span class="string">&quot;The answer is greater than 10&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;The answer is not greater than 10&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果你想在你的 <code>if</code> 语句中使用更复杂的代码，只要在你想做的事情周围加上大括号。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> ((a + b + c &gt; <span class="number">10</span>) &amp;&amp; (a == b))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;The answer is greater than 10&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;And the first number is equal to the second&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;The answer is not greater than 10&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Or the first number is not equal to the second&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用循环以重复执行语句。 <code>while</code> 语句会检查条件，并执行 <code>while</code> 后面的语句或语句块。 除非条件为 <code>false</code>，否则它会重复检查条件并执行这些语句。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (counter &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>while</code> 循环先测试条件，然后再执行 <code>while</code> 后面的代码。 <code>do</code> … <code>while</code> 循环先执行代码，然后再检查条件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">counter++;</span><br><span class="line">&#125; <span class="keyword">while</span> (counter &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><code>for</code> 语句包含三个控制具体工作方式的部分。第一部分是 for 初始值设定项，中间部分是 for 条件，最后一部分是 for 迭代器。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> counter = <span class="number">0</span>; counter &lt; <span class="number">10</span>; counter++)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Hello World! The counter is <span class="subst">&#123;counter&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、数组、列表和集合"><a href="#五、数组、列表和集合" class="headerlink" title="五、数组、列表和集合"></a>五、数组、列表和集合</h3><p>基本列表示例，<code>System.collection.Generic</code>  是一个有列表的命名空间。如果你不告诉代码你正在使用它，那么每次你想使用一个列表时，你都必须写<code>Systems.Collections.Generic.List</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;&lt;name&gt;&quot;</span>, <span class="string">&quot;Ana&quot;</span>, <span class="string">&quot;Felipe&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;name.ToUpper()&#125;</span>!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的集合使用 <code>List&lt;T&gt;</code> 类型，此类型存储一系列元素，可以 <code>Add()</code> 添加或 <code>Remove()</code> 删除元素。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine();</span><br><span class="line">names.Add(<span class="string">&quot;Maria&quot;</span>);</span><br><span class="line">names.Add(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line">names.Remove(<span class="string">&quot;Ana&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Hello <span class="subst">&#123;name.ToUpper()&#125;</span>!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;My name is <span class="subst">&#123;names[<span class="number">0</span>]&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;I&#x27;ve added <span class="subst">&#123;names[<span class="number">2</span>]&#125;</span> and <span class="subst">&#123;names[<span class="number">3</span>]&#125;</span> to the list&quot;</span>);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;The list has <span class="subst">&#123;names.Count&#125;</span> people in it&quot;</span>);</span><br></pre></td></tr></table></figure><p>若要在更大的集合中查找元素，需要在列表中搜索不同的项。 <code>IndexOf</code> 方法可搜索项，并返回此项的索引。 如果项不在列表中，<code>IndexOf</code>将返回 -1。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;Sophia&quot;</span>, <span class="string">&quot;Ana&quot;</span>, <span class="string">&quot;Jayme&quot;</span>, <span class="string">&quot;Bill&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;Ana&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> index = names.IndexOf(name);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Found <span class="subst">&#123;name&#125;</span> at <span class="subst">&#123;index&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>Sort()</code> 接收一个列表并对其进行组织。它查看变量类型，并以最合理的方式进行组织，如果是字符串，它按字母顺序排序，如果是数字，它从最小到最大进行组织。注意，你不需要写 <code>sortedList = names.Sort()</code>，你只需要写 <code>names.Sort()</code>。<code>Sort()</code> 改变了列表本身，你不需要把这个动作保存到一个新的对象中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;Sophia&quot;</span>, <span class="string">&quot;Ana&quot;</span>, <span class="string">&quot;Jayme&quot;</span>, <span class="string">&quot;Bill&quot;</span> &#125;;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Pre Sorting:&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> name <span class="keyword">in</span> names )</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">names.Sort();</span><br><span class="line"></span><br><span class="line">Console.WriteLine();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Post Sorting:&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> name <span class="keyword">in</span> names )</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、对象和类"><a href="#六、对象和类" class="headerlink" title="六、对象和类"></a>六、对象和类</h3><p>面向对象编程：对象是在编程中模仿现实世界的一种方式。 如果你采用人的概念，他们可以有姓名、地址、身高，所有这些属性都会因人而异。 面向对象的编码封装了那种类型的信息，这样你就可以很容易地让一个人拥有所有这些细节。</p><p>例如我们可以创建具有以下属性的银行帐户对象 <code>BankAccount</code>：</p><ul><li>它有一个唯一标识银行帐户的 10 位数字。</li><li>它有一个字符串，用于存储所有者的姓名。</li><li>可以检索余额。</li><li>它接受存款。</li><li>它接受提款。</li><li>初始余额必须为正。</li><li>提款不会导致负余额。</li></ul><p>还可以对这些目标进行分类：</p><ul><li>属性：有关对象的详细信息（它有多少钱，帐户名称）。</li><li>动作：对象可以做的事情（接受存款和取款）。</li><li>规则：对象的准则，这样它就不会尝试做不可能的事情（确保帐户永远不会为负）。</li></ul><p>属性是每个对象所拥有的值的一个很好的小列表。</p><p><code>get</code> 和 <code>set</code>：有时你只想让用户看到一个变量而不是改变它。 其他时候，您希望用户能够更改变量。 <code>get</code> 让你看到变量，<code>set</code> 让你改变它。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties </span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数：此方法用于创建对象的特定实例。 创建一个 <code>BankAccount</code> 类，就像您现在所做的那样，就像为所有银行账户创建一个模板。 它不是一个单独的个人帐户。 构造函数将创建一个包含所有人员实际详细信息的单一帐户。 您向构造函数提供特定帐户所需的所有详细信息，并将详细信息分配给新对象的属性。</p><p><code>this</code> 是一种样式选择。 它明确指出变量“所有者”是该特定实例的变量。 将来，您将有一个对象的两个实例进行交互，而 <code>this</code> 将变得更加明确有用。 如果你愿意，你也可以写 <code>Owner</code> 而不是 <code>this.Owner</code>！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> BankAccount(<span class="string">&quot;Kendra&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Account<span class="subst">&#123;account.Number&#125;</span> was created for <span class="subst">&#123;account.Owner&#125;</span> with <span class="subst">&#123;account.Balance&#125;</span> dollars&quot;</span>);</span><br><span class="line"><span class="comment">// Account was created for Kendra with 1000 dollars</span></span><br></pre></td></tr></table></figure><p>函数用于对对象执行操作或更改对象变量。 这两个函数将进行存款（加钱）和提款（取出钱）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Variables </span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> BankAccount(<span class="string">&quot;Kendra&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Account<span class="subst">&#123;account.Number&#125;</span> was created for <span class="subst">&#123;account.Owner&#125;</span> with <span class="subst">&#123;account.Balance&#125;</span> dollars&quot;</span>);</span><br><span class="line"><span class="comment">// Account was created for Kendra with 1000 dollars</span></span><br></pre></td></tr></table></figure><h3 id="七、方法和成员变量"><a href="#七、方法和成员变量" class="headerlink" title="七、方法和成员变量"></a>七、方法和成员变量</h3><p>到目前为止，这是您的银行帐户！ 它现在做的不多，只打印出所有者和余额。 它甚至还没有帐号。 您将处理一个交易类，该类已为您添加为一个空类。</p><p>帐号：您需要一个起始编号，您可以以此作为新帐号的基础，以确保所有帐户都是唯一的。</p><ul><li><code>Private</code>：这意味着没有客户端可以看到这个号码。 它是内部的，是代码内部工作的一部分。</li><li><code>Static</code>：这意味着该号码在所有个人帐户中是通用的。 如果一个帐户更改了它，那么所有其他帐户都会更新该编号。 这就是您如何使它成为确保帐号都是唯一的好方法！ 一旦银行账户使用它作为银行号码，它就可以向账户种子添加一个，下一个新银行账户就有一个新号码。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Balance = initialBalance;</span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString();</span><br><span class="line">        accountNumberSeed++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> BankAccount(<span class="string">&quot;Kendra&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Account <span class="subst">&#123;account.Number&#125;</span> was created for <span class="subst">&#123;account.Owner&#125;</span> with <span class="subst">&#123;account.Balance&#125;</span> dollars&quot;</span>);</span><br><span class="line"><span class="comment">// Account 1234567890 was created for Kendra with 1000 dollars</span></span><br></pre></td></tr></table></figure><p>交易属性和构造去：您需要的下一部分是余额！ 您可以执行此操作的一种方法是保留一个正在运行的标签。 但是，另一种方法是创建交易历史记录。 为此，您将制作一个小交易类，用于记录一次交易。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Transaction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Amount &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Notes &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Amount = amount;</span><br><span class="line">        <span class="keyword">this</span>.Date = date;</span><br><span class="line">        <span class="keyword">this</span>.Notes = note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新 <code>BankAccount</code> 以匹配：现在您有了交易类，您可以在我们的银行账户中使用它。 首先，您需要列出交易清单。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance&#123; <span class="keyword">get</span>;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Transaction&gt; allTransactions = <span class="keyword">new</span> List&lt;Transaction&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Balance = initialBalance;</span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString();</span><br><span class="line">        accountNumberSeed++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新余额：既然您已经有了可以使用的交易列表，您需要将 <code>Balance</code> 附加到它上面。 你想要做的是，每当有人想要获得余额时，代码会检查交易列表并将其全部汇总，然后返回答案。 您可以通过将一些说明附加到 Balance 中的 <code>get</code> 来做到这一点！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">decimal</span> balance = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> allTransactions)</span><br><span class="line">            &#123;</span><br><span class="line">                balance += item.Amount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Transaction&gt; allTransactions = <span class="keyword">new</span> List&lt;Transaction&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString();</span><br><span class="line">        accountNumberSeed++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我们下面这个模块的最终代码。 不过有问题！ 您不再有初始余额并且有 0 钱！ 由于您将余额与交易挂钩，因此您需要能够进行存款和取款才能将钱存入银行。 您将在下一个模块中了解到这一点！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Transaction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties (#2)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Amount &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Notes</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor (#3)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Amount = amount;</span><br><span class="line">        <span class="keyword">this</span>.Date = date;</span><br><span class="line">        <span class="keyword">this</span>.Notes = note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance  <span class="comment">//(#5)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">decimal</span> balance = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> allTransactions)</span><br><span class="line">            &#123;</span><br><span class="line">                balance += item.Amount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>; <span class="comment">//(#1)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Transaction&gt; allTransactions = <span class="keyword">new</span> List&lt;Transaction&gt;(); <span class="comment">//(#4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="comment">//(#6: deleted &quot;this.Balance = initialBalance;&quot;)</span></span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString(); <span class="comment">//(#1)</span></span><br><span class="line">        accountNumberSeed++; <span class="comment">//(#1)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> BankAccount(<span class="string">&quot;Kendra&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Account <span class="subst">&#123;account.Number&#125;</span> was created for <span class="subst">&#123;account.Owner&#125;</span> with <span class="subst">&#123;account.Balance&#125;</span> dollars&quot;</span>);</span><br><span class="line"><span class="comment">// Account 1234567890 was created for Kendra with 0 dollars</span></span><br></pre></td></tr></table></figure><h3 id="八、方法和异常"><a href="#八、方法和异常" class="headerlink" title="八、方法和异常"></a>八、方法和异常</h3><p>以上是您到目前为止所做的代码。 通过汇总交易列表获得余额，但您还没有编写添加交易的方法。 这种情况在编码中发生了很多次，要使某些东西更健壮，您必须先退后一步，然后再继续。</p><p>增加充值：首先，是时候做充值功能了。 此添加将使交易列出金额、日期和您存入的注释，然后将其添加到交易列表中。</p><p>例外情况：但是如果有人试图存入负值怎么办？ 这在逻辑上没有意义，但目前该方法允许这样做。 你能做的就是破例。 在做任何事情之前，您检查存入的金额是否大于 0。如果是，代码将继续添加交易。 如果不是，代码会抛出一个异常，它会停止代码并打印出问题。</p><p>然后您需要为提款做同样的事情！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">decimal</span> balance = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> allTransactions)</span><br><span class="line">            &#123;</span><br><span class="line">                balance += item.Amount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Transaction&gt; allTransactions = <span class="keyword">new</span> List&lt;Transaction&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString();</span><br><span class="line">        accountNumberSeed++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(amount), <span class="string">&quot;Amount of deposit must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> deposit = <span class="keyword">new</span> Transaction(amount, date, note);</span><br><span class="line">        allTransactions.Add(deposit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(amount), <span class="string">&quot;Amount of withdrawal must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Balance - amount &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Not sufficient funds for this withdrawal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> withdrawal = <span class="keyword">new</span> Transaction(-amount, date, note);</span><br><span class="line">        allTransactions.Add(withdrawal);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建初始存款：现在您已经有了存款和取款，您终于可以再次进行初始存款了。 您要做的是在您首次建立银行账户时创建一笔初始金额的存款。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Transaction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Amount &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Date &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Notes &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Amount = amount;</span><br><span class="line">        <span class="keyword">this</span>.Date = date;</span><br><span class="line">        <span class="keyword">this</span>.Notes = note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BankAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Number &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Owner &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Balance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">decimal</span> balance = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> allTransactions)</span><br><span class="line">            &#123;</span><br><span class="line">                balance += item.Amount;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> accountNumberSeed = <span class="number">1234567890</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Transaction&gt; allTransactions = <span class="keyword">new</span> List&lt;Transaction&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">decimal</span> initialBalance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.Owner = name;</span><br><span class="line">        <span class="keyword">this</span>.Number = accountNumberSeed.ToString();</span><br><span class="line">        accountNumberSeed++;</span><br><span class="line">        MakeDeposit(initialBalance, DateTime.Now, <span class="string">&quot;Initial balance&quot;</span>); <span class="comment">//(#4)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Functions</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeDeposit</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(#2)</span></span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(amount), <span class="string">&quot;Amount of deposit must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(#1)</span></span><br><span class="line">        <span class="keyword">var</span> deposit = <span class="keyword">new</span> Transaction(amount, date, note);</span><br><span class="line">        allTransactions.Add(deposit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MakeWithdrawal</span>(<span class="params"><span class="built_in">decimal</span> amount, DateTime date, <span class="built_in">string</span> note</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(#3)</span></span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException(<span class="keyword">nameof</span>(amount), <span class="string">&quot;Amount of withdrawal must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Balance - amount &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Not sufficient funds for this withdrawal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> withdrawal = <span class="keyword">new</span> Transaction(-amount, date, note);</span><br><span class="line">        allTransactions.Add(withdrawal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> BankAccount(<span class="string">&quot;Kendra&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;Account <span class="subst">&#123;account.Number&#125;</span> was created for <span class="subst">&#123;account.Owner&#125;</span> with <span class="subst">&#123;account.Balance&#125;</span> dollars&quot;</span>);</span><br><span class="line"></span><br><span class="line">account.MakeWithdrawal(<span class="number">500</span>, DateTime.Now, <span class="string">&quot;Rent payment&quot;</span>);  <span class="comment">//Added test code</span></span><br><span class="line">Console.WriteLine(account.Balance);</span><br><span class="line">account.MakeDeposit(<span class="number">100</span>, DateTime.Now, <span class="string">&quot;Friend paid me back&quot;</span>);</span><br><span class="line">Console.WriteLine(account.Balance);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">Account 1234567890 was created for Kendra with 1000 dollars</span></span><br><span class="line"><span class="comment">500</span></span><br><span class="line"><span class="comment">600</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="九、继续学习"><a href="#九、继续学习" class="headerlink" title="九、继续学习"></a>九、继续学习</h3><p>还有更多资源可供学习继续学习：</p><ul><li><a href="https://docs.microsoft.com/dotnet/csharp/?WT.mc_id=csharpnotebook-35129-website">C# Documentation</a></li><li><a href="https://docs.microsoft.com/learn/dotnet/?WT.mc_id=csharpnotebook-35129-website">Microsoft Learn</a></li><li><a href="https://docs.microsoft.com/dotnet/csharp/fundamentals/tutorials/classes?WT.mc_id=Educationalcsharp-c9-scottha">Documentation: Object Oriented Coding in C#</a></li><li><a href="https://dotnet.microsoft.com/learn/videos?WT.mc_id=csharpnotebook-35129-website">Other 101 Videos</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;C# 是一种强大而广泛使用的编程语言，基于面向对象的原则，融合了其他范例中的许多功能，尤其是函数编程，你可以用它来制作网站、游戏、移动应用程序、桌面应用程序等等。C# 也是 .NET 编程平台的一部分，大多数 .NET 运行时和库都是用 C# 编写的，微软提供了 C# for beginners 课程（101、201）为初学者提供引导，以下为我在学习第一门课程过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".NET" scheme="http://blog.zhuangzhihao.top/categories/NET/"/>
    
    
    <category term="C#" scheme="http://blog.zhuangzhihao.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf 快速入门</title>
    <link href="http://blog.zhuangzhihao.top/Thymeleaf%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.zhuangzhihao.top/Thymeleaf%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-03-12T07:31:49.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前我们学习的都是 SpringBoot + Vue 或者 React 的前后端分离的项目，但是一些公司还是会使用一些混合模板开发的项目，甚至还要维护一些 Jsp 的老项目，其中就有 SpringBoot 官方推荐的模板引擎 Thymeleaf，通过在静态 HTML 嵌入标签属性，浏览器可以直接打开模板文件。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、Thymeleaf-基础使用"><a href="#一、Thymeleaf-基础使用" class="headerlink" title="一、Thymeleaf 基础使用"></a>一、Thymeleaf 基础使用</h3><p>Thymeleaf 代码模版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>在 <code>resources/templates/index.html</code> 中写前端页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;Bezhuang&#x27;+$&#123;title&#125;&quot;</span>&gt;</span>默认的title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;description&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;默认的description&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;keywords&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;默认的keywords&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>thymeleafdemo.controller/IndexController</code> 中向前端页面传递参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;传递的Index&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;传递的description&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;keywords&quot;</span>, <span class="string">&quot;传递的keywords&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Thymeleaf-常用方法"><a href="#二、Thymeleaf-常用方法" class="headerlink" title="二、Thymeleaf 常用方法"></a>二、Thymeleaf 常用方法</h3><p>在 <code>resources/templates/basic.html</code> 中写前端页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;h2 th:text=&quot;$&#123;user.getUsername()&#125;&quot;&gt;&lt;/h2&gt;    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--    变量表达式不仅可以写成$&#123;...&#125;，而且还可以写成*&#123;...&#125;。</span></span><br><span class="line"><span class="comment">但是，有一个重要的区别：星号语法对选定对象而不是整个上下文评估表达式。也就是说，只要没有选定的对象，美元($&#123;…&#125;)和星号(*&#123;...&#125;)的语法就完全一样。    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    th:if    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.isVip&#125;&quot;</span>&gt;</span>会员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;!user.isVip&#125;&quot;</span>&gt;</span>会员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    th:each    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;tag:$&#123;user.tags&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;tag&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    th:switch    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.sex&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>thymeleafdemo.controller/IndexController</code> 中添加控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/basic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">basic</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setUsername(<span class="string">&quot;Bezhuang&quot;</span>);</span><br><span class="line">    userVO.setAge(<span class="number">24</span>);</span><br><span class="line">    userVO.setIsVip(<span class="literal">true</span>);</span><br><span class="line">    userVO.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    userVO.setSex(<span class="number">1</span>);</span><br><span class="line">    userVO.setTags(Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Python&quot;</span>));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, userVO);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;basic&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法总结：</p><ul><li><code>th:text</code>：文本的显示，其值会替换 HTML 中指定标签的值。</li><li><code>th:utext</code>：支持 HTML 的文本显示。</li><li><code>th:value</code>：给属性赋值。</li><li><code>th:object</code>：用于设置选定对条。</li><li><code>th:if</code>：条件判断，可以和 <code>th:unless</code> 配合使用。</li><li><code>th:switch</code>：选择判断，需要配合 <code>th:case</code> 使用。</li><li><code>th:each</code>：循环迭代。</li><li><code>th:href</code>： 设置链接地址。</li><li><code>th:src</code>：设置资源。</li></ul><h3 id="三、Thymeleaf-中-CSS、JS-的使用"><a href="#三、Thymeleaf-中-CSS、JS-的使用" class="headerlink" title="三、Thymeleaf 中 CSS、JS 的使用"></a>三、Thymeleaf 中 CSS、JS 的使用</h3><p>引入 CSS 文件 <code>app.css</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;app.css&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 JavaScript：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;index.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态引入 JavaScript，传入 <code>user</code> 参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> printuser = <span class="comment">/*[[$&#123;user&#125;]]*/</span>&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(printuser);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>追加 CSS 样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.nonactive</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;tag,stat:$&#123;user.tags&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:text</span>=<span class="string">&quot;$&#123;tag&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:classappend</span>=<span class="string">&quot;$&#123;stat.last&#125;?&#x27;active&#x27;:nonactive&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、Thymeleaf-组件的使用"><a href="#四、Thymeleaf-组件的使用" class="headerlink" title="四、Thymeleaf 组件的使用"></a>四、Thymeleaf 组件的使用</h3><p>创建 fragment 碎片（组件）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;com1&quot;</span>&gt;</span></span><br><span class="line">    com1</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;com2&quot;</span>&gt;</span></span><br><span class="line">    com2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 basic 页面中插入碎片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    th:replace    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;component::com1&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    th:insert 保留外层的div    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;component::com1&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    th:insert id   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;component::#com2&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件中使用外部对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;com1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*@thymesVar id=&quot;user&quot; type=&quot;com.example.loop.thymeleafdemo.vo.UserVO&quot;*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件间传递参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    th:insert    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;component::com3(&#x27;传递的参数&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;com3(message)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件间传递模块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;component::com4(~&#123;::#message&#125;)&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span>传递的模块<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;com4(message)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、Thymeleaf-内置对象和工具类"><a href="#五、Thymeleaf-内置对象和工具类" class="headerlink" title="五、Thymeleaf 内置对象和工具类"></a>五、Thymeleaf 内置对象和工具类</h3><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><div class="table-container"><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java">#ctx</a></td><td style="text-align:center">上下文对象</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java">#vars</a></td><td style="text-align:center">同 #ctx，表示上下文变量</td></tr><tr><td style="text-align:left">#locale</td><td style="text-align:center">上下文本地化（特定的地理区域）变量，可参考 java.util.Locale</td></tr><tr><td style="text-align:left">#request</td><td style="text-align:center">HttpServletRequest 对象，可参考 javax.servlet.http.HttpServletRequest</td></tr><tr><td style="text-align:left">#response</td><td style="text-align:center">HttpServletResponse 对象，可参考 javax.servlet.http.HttpServletResponse</td></tr><tr><td style="text-align:left">#session</td><td style="text-align:center">HttpSession 对象，可参考 javax.servlet.http.HttpSession</td></tr><tr><td style="text-align:left">#servletContext</td><td style="text-align:center">ServletContext 对象，可参考 javax.servlet.ServletContext</td></tr></tbody></table></div><p><code>#ctx</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.getLocale()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.getVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#ctx.containsVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#vars</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.getLocale()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.getVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#vars.containsVariable(&#x27;message&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#locale</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.country&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中国 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayCountry&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- zh --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.language&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayLanguage&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 中文 (中国) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#locale.displayName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#request</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTTP/1.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.protocol&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.scheme&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- localhost --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.serverName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8080 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.serverPort&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- GET --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.method&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.requestURI&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http://localhost:8080/standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.requestURL&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.servletPath&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- java.util.Collections$3@203646fe --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.parameterNames&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &#123;q=[Ljava.lang.String;@3308c69f&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.parameterMap&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- q=expression --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.queryString&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，请求地址的 URL 参数直接通过<code>#request.x</code>是取不出来的，需要使用<code>param.x</code>语法来取出。如，URL：<code>/standard-expression-syntax/variables?q=expression</code>，取出 q 参数的正确姿势：<code>&lt;p th:text=&quot;$&#123;param.q&#125;&quot;&gt;&lt;/p&gt;</code>。</p><p><code>#response</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 200 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 8192 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.bufferSize&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.characterEncoding&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- text/html;charset=UTF-8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.contentType&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#session</code>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2BCB2A0EACFF2D9D249D9799431B5127 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1499786693244 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.lastAccessedTime&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fanlychie --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;user&#x27;).name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，放到会话里面的对象直接通过<code>#session.x</code>是取不出来的，需要使用<code>session.x</code>语法来取出。如，取出会话里面的 user 对象的正确姿势：<code>&lt;p th:text=&quot;$&#123;session.user.name&#125;&quot;&gt;&lt;/p&gt;</code>。</p><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><div class="table-container"><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Messages.java">#messages</a></td><td style="text-align:center">消息工具类，与 ＃{…} 作用相同</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Uris.java">#uris</a></td><td style="text-align:center">地址相关的工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Conversions.java">#conversions</a></td><td style="text-align:center">对象转换工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Dates.java">#dates</a></td><td style="text-align:center">日期时间工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Calendars.java">#calendars</a></td><td style="text-align:center">日历工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Numbers.java">#numbers</a></td><td style="text-align:center">数字工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Strings.java">#strings</a></td><td style="text-align:center">字符串工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Objects.java">#objects</a></td><td style="text-align:center">对象工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Bools.java">#bools</a></td><td style="text-align:center">布尔工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Arrays.java">#arrays</a></td><td style="text-align:center">数组工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Lists.java">#lists</a></td><td style="text-align:center">List 工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Sets.java">#sets</a></td><td style="text-align:center">Set 工具类</td></tr><tr><td style="text-align:left"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Maps.java">#maps</a></td><td style="text-align:center">Map 工具类</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.isEmpty(message)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2017-07-12 00:37:25 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(now, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前我们学习的都是 SpringBoot + Vue 或者 React 的前后端分离的项目，但是一些公司还是会使用一些混合模板开发的项目，甚至还要维护一些 Jsp 的老项目，其中就有 SpringBoot 官方推荐的模板引擎 Thymeleaf，通过在静态 HTML 嵌入标签属性，浏览器可以直接打开模板文件。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Java" scheme="http://blog.zhuangzhihao.top/categories/Java/"/>
    
    
    <category term="Thymeleaf" scheme="http://blog.zhuangzhihao.top/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>初学使用 Python 库进行自然语言处理</title>
    <link href="http://blog.zhuangzhihao.top/NLP-Tutorial-in-Python/"/>
    <id>http://blog.zhuangzhihao.top/NLP-Tutorial-in-Python/</id>
    <published>2023-02-09T16:00:00.000Z</published>
    <updated>2023-04-05T02:13:43.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近，自然语言处理工具 <a href="https://chat.openai.com/chat">ChatGPT</a> 彻底出圈火爆全网，显然自然语言处理和深度学习将是下一步人工智能发展的趋势之一。于是，我尝试跟着 MIT 大神 <a href="https://www.youtube.com/@KeithGalli">Keith Galli</a> 的 <a href="https://www.youtube.com/watch?v=M7SWr5xObkA">Tutorial</a> 一起，初学使用 Python 库进行自然语言处理，在一个个例子中深入了解自然语言处理的主要概念。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、Bag-of-words"><a href="#一、Bag-of-words" class="headerlink" title="一、Bag-of-words"></a>一、Bag-of-words</h3><p>机器学习算法不能直接处理原始文本，文本必须转换为数字向量。在语言处理中，向量 x 来自文本数据，以反映文本的各种语言特性。这称为特征提取或特征编码。Bag-of-words（词袋）模型就是一种流行且简单的文本数据特征提取方法，在这种方法中，我们将每个单词计数视为一个特征。词袋模型假设我们不考虑文本中词与词之间的上下文关系，仅仅只考虑所有词的权重。而权重与词在文本中出现的频率有关。</p><p>第 1 步：定义一些训练语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>:</span><br><span class="line">  BOOKS = <span class="string">&quot;BOOKS&quot;</span></span><br><span class="line">  CLOTHING = <span class="string">&quot;CLOTHING&quot;</span></span><br><span class="line"></span><br><span class="line">train_x = [<span class="string">&quot;i love the book&quot;</span>, <span class="string">&quot;this is a great book&quot;</span>, <span class="string">&quot;the fit is great&quot;</span>, <span class="string">&quot;i love the shoes&quot;</span>]</span><br><span class="line">train_y = [Category.BOOKS, Category.BOOKS, Category.CLOTHING, Category.CLOTHING]</span><br></pre></td></tr></table></figure><p>第 2 步：使用机器学习库 <a href="https://sklearncn.cn/">scikit-learn</a> 拟合模型，将每个自由文本文档转换为一个向量，我们可以将其用作机器学习模型的输入或输出。最简单的评分方法是将单词的存在标记为布尔值，0 表示不存在，1 表示存在，用向量中的一个位置对每个词进行评分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">vectorizer = CountVectorizer(binary=<span class="literal">True</span>)</span><br><span class="line">train_x_vectors = vectorizer.fit_transform(train_x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(vectorizer.get_feature_names())</span><br><span class="line"><span class="comment"># 输出词汇表</span></span><br><span class="line"><span class="comment"># [&#x27;book&#x27;, &#x27;fit&#x27;, &#x27;great&#x27;, &#x27;is&#x27;, &#x27;love&#x27;, &#x27;shoes&#x27;, &#x27;the&#x27;, &#x27;this&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_x_vectors.toarray())</span><br><span class="line"><span class="comment"># [[1 0 0 0 1 0 1 0]</span></span><br><span class="line"><span class="comment">#  [1 0 1 1 0 0 0 1]</span></span><br><span class="line"><span class="comment">#  [0 1 1 1 0 0 1 0]</span></span><br><span class="line"><span class="comment">#  [0 0 0 0 1 1 1 0]]</span></span><br></pre></td></tr></table></figure><p>第 3 步：使用线性 SVM 模型构建一个简单的文本分类器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">clf_svm = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">clf_svm.fit(train_x_vectors, train_y)</span><br></pre></td></tr></table></figure><p>第 4 步：在经过训练的模型上测试新语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_x = vectorizer.transform([<span class="string">&#x27;i love the books&#x27;</span>])  <span class="comment"># 向量化新语句</span></span><br><span class="line"></span><br><span class="line">clf_svm.predict(test_x)</span><br><span class="line"><span class="comment"># 被分类到书籍类别</span></span><br><span class="line"><span class="comment"># array([&#x27;CLOTHING&#x27;], dtype=&#x27;&lt;U8&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="二、Word-Vectors"><a href="#二、Word-Vectors" class="headerlink" title="二、Word Vectors"></a>二、Word Vectors</h3><p>词向量（Word Vectors）模型是考虑词语位置关系的一种模型，通过大量语料的训练，将每一个词语映射到高维度的向量当中，通过求余弦的方式，可以判断两个词语之间的关系。把词映射为实数域向量的技术也叫词嵌入（Word Embedding）。随着优秀的词向量模型（Word2Vec、ELMo、Bert 等）的出现，推动了 NLP 领域飞跃式的发展。</p><p>spaCy 是世界上最快的工业级自然语言处理工具。 支持多种自然语言处理基本功能，包括分词、词性标注、词干化、命名实体识别、名词短语提取等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip install spacy</span><br><span class="line">!python -m spacy download en_core_web_md</span><br></pre></td></tr></table></figure><p>使用词向量构建文本分类模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line">nlp = spacy.load(<span class="string">&quot;en_core_web_md&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_x)</span><br><span class="line"><span class="comment"># [&#x27;i love the book&#x27;, &#x27;this is a great book&#x27;, &#x27;the fit is great&#x27;, &#x27;i love the shoes&#x27;]</span></span><br><span class="line"></span><br><span class="line">docs = [nlp(text) <span class="keyword">for</span> text <span class="keyword">in</span> train_x]</span><br><span class="line">train_x_word_vectors = [x.vector <span class="keyword">for</span> x <span class="keyword">in</span> docs]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">clf_svm_wv = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">clf_svm_wv.fit(train_x_word_vectors, train_y)</span><br></pre></td></tr></table></figure><p>使用我们的模型预测新的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_x = [<span class="string">&quot;I love the books&quot;</span>]</span><br><span class="line">test_docs = [nlp(text) <span class="keyword">for</span> text <span class="keyword">in</span> test_x]</span><br><span class="line">test_x_word_vectors =  [x.vector <span class="keyword">for</span> x <span class="keyword">in</span> test_docs]</span><br><span class="line"></span><br><span class="line">clf_svm_wv.predict(test_x_word_vectors)</span><br><span class="line"><span class="comment"># array([&#x27;BOOKS&#x27;], dtype=&#x27;&lt;U8&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="三、Regexes"><a href="#三、Regexes" class="headerlink" title="三、Regexes"></a>三、Regexes</h3><p>正则表达式（Regexes）本质上是一种嵌入在 Python 中并通过 re 模块提供的高度专业化的微型编程语言。 使用这种小语言，您可以为要匹配的可能字符串集指定规则； 该集合可能包含英文句子、电子邮件地址、TeX 命令或任何您喜欢的内容。 然后，您可以提出诸如“此字符串是否与模式匹配？”或“此字符串中任何位置的模式是否匹配？”之类的问题。 您还可以使用 RE 修改字符串或以各种方式将其拆分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">regexp = re.<span class="built_in">compile</span>(<span class="string">r&quot;\bread\b|\bstory\b|book&quot;</span>)</span><br><span class="line"></span><br><span class="line">phrases = [<span class="string">&quot;I liked that story.&quot;</span>, <span class="string">&quot;the car treaded up the hill&quot;</span>, <span class="string">&quot;this hat is nice&quot;</span>]</span><br><span class="line"></span><br><span class="line">matches = []</span><br><span class="line"><span class="keyword">for</span> phrase <span class="keyword">in</span> phrases:</span><br><span class="line">  <span class="keyword">if</span> re.search(regexp, phrase):</span><br><span class="line">    matches.append(phrase)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matches)</span><br><span class="line"><span class="comment"># [&#x27;I liked that story.&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="四、Stemming-Lemmatization"><a href="#四、Stemming-Lemmatization" class="headerlink" title="四、Stemming/Lemmatization"></a>四、Stemming/Lemmatization</h3><p>Python NLTK 中的词干提取（Stemming）和词形还原（Lemmatization）是自然语言处理的文本规范化技术。这些技术广泛用于文本预处理。词干化和词形还原之间的区别在于，词干化更快，因为它在不知道上下文的情况下切割单词，而词形还原更慢，因为它在处理之前知道单词的上下文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line">nltk.download(<span class="string">&#x27;wordnet&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;stopwords&#x27;</span>)</span><br><span class="line">nltk.download(<span class="string">&#x27;punkt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>词干提取是一种将句子中的一组单词转换为序列以缩短其查找时间的技术。在这种方法中，具有相同含义但根据上下文或句子有一些变化的词被归一化。换句话说，只有一个词根，但同一个词有许多变体。例如，词根是 eat，它的变体是 eats, eating, eaten and like so。同样，借助 Python 中的词干提取，我们可以找到任何变体的词根。</p><p>NLTK 有一个名为 PorterStemmer 的算法。该算法接受标记化词列表并将其词干化为词根：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> PorterStemmer</span><br><span class="line"></span><br><span class="line">stemmer = PorterStemmer()</span><br><span class="line"></span><br><span class="line">phrase = <span class="string">&quot;reading the books&quot;</span></span><br><span class="line">words = word_tokenize(phrase)</span><br><span class="line"></span><br><span class="line">stemmed_words = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">  stemmed_words.append(stemmer.stem(word))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; &quot;</span>.join(stemmed_words)</span><br><span class="line"><span class="comment"># &#x27;read the book&#x27;</span></span><br></pre></td></tr></table></figure><p>词形还原是根据词义和上下文查找词词元的算法过程。词形还原通常是指对单词进行词法分析，旨在去除屈折词尾。它有助于返回称为词条的单词的基本形式或字典形式。</p><p>Lemmatization 优于 Stemming，因为词干算法通过从单词中删除后缀来工作。从广义上讲，就是切断单词的开头或结尾。相反，Lemmatization 是一个更强大的操作，它考虑了单词的形态分析。它返回作为所有屈折形式的基本形式的引理。需要深入的语言知识来创建词典和寻找单词的正确形式。词干提取是一种通用操作，而词形还原是一种智能操作，可以在字典中查找正确的形式。因此，词形还原有助于形成更好的机器学习特征。</p><p>NLTK Lemmatization 方法基于 WorldNet 的内置 morph 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> WordNetLemmatizer</span><br><span class="line"></span><br><span class="line">lemmatizer = WordNetLemmatizer()</span><br><span class="line"></span><br><span class="line">phrase = <span class="string">&quot;reading the books&quot;</span></span><br><span class="line">words = word_tokenize(phrase)</span><br><span class="line"></span><br><span class="line">lemmatized_words = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">  lemmatized_words.append(lemmatizer.lemmatize(word, pos=<span class="string">&#x27;v&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; &quot;</span>.join(lemmatized_words)</span><br><span class="line"><span class="comment"># &#x27;read the book&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="五、Stopwords"><a href="#五、Stopwords" class="headerlink" title="五、Stopwords"></a>五、Stopwords</h3><p>停用词（Stopwords）是搜索引擎被编程为忽略的常用词（例如 the、a、an、in），无论是在索引条目进行搜索时还是在检索条目时作为搜索查询的结果。 我们不希望这些词占用我们数据库中的空间，或占用宝贵的处理时间。为此，我们可以通过存储您认为是停用词的单词列表来轻松删除它们。</p><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/Stop-word-removal-using-NLTK.png" alt></p><p>Python 中的 NLTK（自然语言工具包）有一个以 16 种不同语言存储的停用词列表，标记化，然后删除停用词：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"></span><br><span class="line">stop_words = stopwords.words(<span class="string">&#x27;english&#x27;</span>)</span><br><span class="line"></span><br><span class="line">phrase = <span class="string">&quot;Here is an example sentence demonstrating the removal of stopwords&quot;</span></span><br><span class="line"></span><br><span class="line">words = word_tokenize(phrase)</span><br><span class="line"></span><br><span class="line">stripped_phrase = []</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">  <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stop_words:</span><br><span class="line">    stripped_phrase.append(word)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; &quot;</span>.join(stripped_phrase)</span><br><span class="line"><span class="comment"># &#x27;Here example sentence demonstrating removal stopwords&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="六、TextBlob"><a href="#六、TextBlob" class="headerlink" title="六、TextBlob"></a>六、TextBlob</h3><p>TextBlob 是一个用 Python 编写的开源的文本处理库。它可以用来执行很多自然语言处理的任务，比如，词性标注，名词性成分提取，情感分析，文本翻译等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!python -m textblob.download_corpora</span><br></pre></td></tr></table></figure><p>使用 TextBlob 进行拼写更正、情感和词性标注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> textblob <span class="keyword">import</span> TextBlob</span><br><span class="line"></span><br><span class="line">phrase = <span class="string">&quot;the book was horrible&quot;</span></span><br><span class="line"></span><br><span class="line">tb_phrase = TextBlob(phrase)</span><br><span class="line"></span><br><span class="line">tb_phrase.correct()</span><br><span class="line"><span class="comment"># TextBlob(&quot;the book was horrible&quot;)</span></span><br><span class="line"></span><br><span class="line">tb_phrase.tags</span><br><span class="line"><span class="comment"># [(&#x27;the&#x27;, &#x27;DT&#x27;), (&#x27;book&#x27;, &#x27;NN&#x27;), (&#x27;was&#x27;, &#x27;VBD&#x27;), (&#x27;horrible&#x27;, &#x27;JJ&#x27;)]</span></span><br><span class="line"></span><br><span class="line">tb_phrase.sentiment</span><br><span class="line"><span class="comment"># Sentiment(polarity=-1.0, subjectivity=1.0)</span></span><br></pre></td></tr></table></figure><h3 id="七、State-of-the-art-Models"><a href="#七、State-of-the-art-Models" class="headerlink" title="七、State-of-the-art Models"></a>七、State-of-the-art Models</h3><h4 id="Recurrent-Neural-Networks-RNNs-for-text-classification"><a href="#Recurrent-Neural-Networks-RNNs-for-text-classification" class="headerlink" title="Recurrent Neural Networks (RNNs) for text classification"></a>Recurrent Neural Networks (RNNs) for text classification</h4><p>循环神经网络（Rerrent Neural Network, RNN）是一种专门处理序列信息的具有时间依赖的网络。</p><h4 id="Transformer-architectures-attention-is-all-you-need"><a href="#Transformer-architectures-attention-is-all-you-need" class="headerlink" title="Transformer architectures (attention is all you need)"></a>Transformer architectures (attention is all you need)</h4><p>Transformer 模型基于 encoder-decoder 架构，抛弃了传统的 RNN、CNN 模型，仅由 Attention 机制实现，并且由于 encoder 端是并行计算的，训练时间大大缩短。</p><p>Transformer 模型广泛应用于 NLP 领域，机器翻译、文本摘要、问答系统等等，目前火热的 Bert 模型就是基于 Transformer 模型构建的。</p><p>使用 spaCy 来使用 BERT 模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip install spacy-transformers</span><br><span class="line">!python -m spacy download en_trf_bertbaseuncased_lg</span><br></pre></td></tr></table></figure><p>使用 Transformers/BERT 编写分类模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">nlp = spacy.load(<span class="string">&quot;en_trf_bertbaseuncased_lg&quot;</span>)</span><br><span class="line">doc = nlp(<span class="string">&quot;Here is some text to encode.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>:</span><br><span class="line">  BOOKS = <span class="string">&quot;BOOKS&quot;</span></span><br><span class="line">  BANK = <span class="string">&quot;BANK&quot;</span></span><br><span class="line"></span><br><span class="line">train_x = [<span class="string">&quot;good characters and plot progression&quot;</span>, <span class="string">&quot;check out the book&quot;</span>, <span class="string">&quot;good story. would recommend&quot;</span>, <span class="string">&quot;novel recommendation&quot;</span>, <span class="string">&quot;need to make a deposit to the bank&quot;</span>, <span class="string">&quot;balance inquiry savings&quot;</span>, <span class="string">&quot;save money&quot;</span>]</span><br><span class="line">train_y = [Category.BOOKS, Category.BOOKS, Category.BOOKS, Category.BOOKS, Category.BANK, Category.BANK, Category.BANK]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">docs = [nlp(text) <span class="keyword">for</span> text <span class="keyword">in</span> train_x]</span><br><span class="line">train_x_vectors = [doc.vector <span class="keyword">for</span> doc <span class="keyword">in</span> docs]</span><br><span class="line">clf_svm = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">clf_svm.fit(train_x_vectors, train_y)</span><br><span class="line"></span><br><span class="line">test_x = [<span class="string">&quot;check this story out&quot;</span>]</span><br><span class="line">docs = [nlp(text) <span class="keyword">for</span> text <span class="keyword">in</span> test_x]</span><br><span class="line">test_x_vectors = [doc.vector <span class="keyword">for</span> doc <span class="keyword">in</span> docs]</span><br><span class="line"></span><br><span class="line">clf_svm.predict(test_x_vectors)</span><br><span class="line"><span class="comment"># array([&#x27;BOOKS&#x27;], dtype=&#x27;&lt;U5&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="八、课后小练习"><a href="#八、课后小练习" class="headerlink" title="八、课后小练习"></a>八、课后小练习</h3><p><a href="https://colab.research.google.com/github/KeithGalli/pycon2020/blob/master/NLP_Exercise.ipynb">构建一个高性能模型来对亚马逊评论的类别进行分类</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近，自然语言处理工具 &lt;a href=&quot;https://chat.openai.com/chat&quot;&gt;ChatGPT&lt;/a&gt; 彻底出圈火爆全网，显然自然语言处理和深度学习将是下一步人工智能发展的趋势之一。于是，我尝试跟着 MIT 大神 &lt;a href=&quot;https://www.youtube.com/@KeithGalli&quot;&gt;Keith Galli&lt;/a&gt; 的 &lt;a href=&quot;https://www.youtube.com/watch?v=M7SWr5xObkA&quot;&gt;Tutorial&lt;/a&gt; 一起，初学使用 Python 库进行自然语言处理，在一个个例子中深入了解自然语言处理的主要概念。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Python &amp; Golang" scheme="http://blog.zhuangzhihao.top/categories/Python-Golang/"/>
    
    
    <category term="NLP" scheme="http://blog.zhuangzhihao.top/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 添加动画</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/</id>
    <published>2023-01-19T16:00:00.000Z</published>
    <updated>2023-01-20T13:23:50.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第十二章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章是使用 React-Spring 动画库为项目添加动画。</p></blockquote><span id="more"></span><h3 id="一、React-Spring-简介"><a href="#一、React-Spring-简介" class="headerlink" title="一、React Spring 简介"></a>一、React Spring 简介</h3><p><a href="https://www.react-spring.dev/">React Spring</a> 是 React 官方推荐的动画组件，它支持对单个组件设置一个或多个动画效果，也可以设计多个组件间切换的效果。</p><ul><li><code>useSpring</code>：创建一个单独的简单动画 <code>Spring</code>，从 a→b 移动数据的单个弹簧。</li><li><code>useSprings</code>：创建一组同时执行的 <code>Spring</code>，多个不同弹簧，用于列表，每个弹簧从 a→b 移动数据。</li><li><code>useTrail</code>：创建一组依次执行的 <code>Spring</code>，多个相同弹簧，一个弹簧在另一个弹簧之后/跟随。</li><li><code>useTransition</code>：添加组件 <code>mounted/unmounted</code> 等生命周期变化时的动画</li><li><code>useChain</code>：用于自定义 <code>Spring</code> 执行顺序，将多个动画排队或连接在一起</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-spring</span><br></pre></td></tr></table></figure><h3 id="二、Staggered-Animation-配置"><a href="#二、Staggered-Animation-配置" class="headerlink" title="二、Staggered Animation 配置"></a>二、Staggered Animation 配置</h3><p>每个列表中的项目都是按照一定的时间间隔，顺序执行动画，打到一种堆叠的效果。</p><p>抽离动画为自定义的 <code>hooks</code>，新建 <code>src/hooks/useStaggeredList.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTrail &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useStaggeredList</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> trailAnimes = <span class="title function_">useTrail</span>(number, &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, 0px, 0px)&quot;</span>,</span><br><span class="line">    <span class="attr">from</span>: &#123; <span class="attr">transform</span>: <span class="string">&quot;translate3d(-50px, 0px, 0px)&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">mass</span>: <span class="number">0.8</span>,</span><br><span class="line">      <span class="attr">tension</span>: <span class="number">280</span>,</span><br><span class="line">      <span class="attr">friction</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// delay: 200,</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> trailAnimes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/MessageList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledMessageList</span>, &#123; <span class="title class_">ChatList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Plus</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/plus.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Filter</span> <span class="keyword">from</span> <span class="string">&quot;components/Filter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Select</span> <span class="keyword">from</span> <span class="string">&quot;components/Select&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Option</span> <span class="keyword">from</span> <span class="string">&quot;components/Option&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;components/Input&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MessageCard</span> <span class="keyword">from</span> <span class="string">&quot;components/MessageCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> face1 <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTrail, animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useStaggeredList <span class="keyword">from</span> <span class="string">&quot;hooks/useStaggeredList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> messageData <span class="keyword">from</span> <span class="string">&quot;data/messages&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MessageList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> trailAnimes = <span class="title function_">useStaggeredList</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledMessageList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FilterList</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">options</span>=<span class="string">&#123;[</span>&quot;<span class="attr">最新消息优先</span>&quot;, &quot;<span class="attr">在线好友优先</span>&quot;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">actionLabel</span>=<span class="string">&quot;创建会话&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;messageData.map((message, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span> <span class="attr">style</span>=<span class="string">&#123;trailAnimes[index]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">MessageCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;message.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">active</span>=<span class="string">&#123;index</span> === <span class="string">3&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">replied</span>=<span class="string">&#123;message.replied&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">avatarSrc</span>=<span class="string">&#123;message.avatarSrc&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&#123;message.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">avatarStatus</span>=<span class="string">&#123;message.status&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">statusText</span>=<span class="string">&#123;message.statusText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">time</span>=<span class="string">&#123;message.time&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">message</span>=<span class="string">&#123;message.message&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">unreadCount</span>=<span class="string">&#123;message.unreadCount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ChatList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledMessageList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MessageList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MessageList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ContactList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledContactList</span>, &#123; <span class="title class_">Contacts</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContactCard</span> <span class="keyword">from</span> <span class="string">&quot;components/ContactCard&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useStaggeredList <span class="keyword">from</span> <span class="string">&quot;hooks/useStaggeredList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contactsData <span class="keyword">from</span> <span class="string">&quot;data/contacts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ContactList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> trailAnimes = <span class="title function_">useStaggeredList</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledContactList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FilterList</span> <span class="attr">options</span>=<span class="string">&#123;[</span>&quot;<span class="attr">新添加优先</span>&quot;, &quot;<span class="attr">按姓名排序</span>&quot;]&#125; <span class="attr">actionLabel</span>=<span class="string">&quot;添加好友&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Contacts</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;contactsData.map((contact, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;contact.id&#125;</span> <span class="attr">style</span>=<span class="string">&#123;trailAnimes[i]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ContactCard</span> <span class="attr">key</span>=<span class="string">&#123;contact.id&#125;</span> <span class="attr">contact</span>=<span class="string">&#123;contact&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Contacts</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledContactList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ContactList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ContactList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FileList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledFileList</span>, &#123; <span class="title class_">Files</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileCard</span> <span class="keyword">from</span> <span class="string">&quot;components/FileCard&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useStaggeredList <span class="keyword">from</span> <span class="string">&quot;hooks/useStaggeredList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fileData <span class="keyword">from</span> <span class="string">&quot;data/files&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FileList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> trailAnimes = <span class="title function_">useStaggeredList</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledFileList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FilterList</span> <span class="attr">options</span>=<span class="string">&#123;[</span>&quot;<span class="attr">最新文件优先</span>&quot;, &quot;<span class="attr">按文件名排序</span>&quot;]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Files</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;fileData.map((file, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;file.id&#125;</span> <span class="attr">style</span>=<span class="string">&#123;trailAnimes[i]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">FileCard</span> <span class="attr">key</span>=<span class="string">&#123;file.id&#125;</span> <span class="attr">file</span>=<span class="string">&#123;file&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Files</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledFileList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">FileList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FileList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NoteList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledNoteList</span>, &#123; <span class="title class_">Notes</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NoteCard</span> <span class="keyword">from</span> <span class="string">&quot;components/NoteCard&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useStaggeredList <span class="keyword">from</span> <span class="string">&quot;hooks/useStaggeredList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> noteData <span class="keyword">from</span> <span class="string">&quot;data/notes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NoteList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> trailAnimes = <span class="title function_">useStaggeredList</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledNoteList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FilterList</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">options</span>=<span class="string">&#123;[</span>&quot;<span class="attr">最新笔记优先</span>&quot;, &quot;<span class="attr">有改动的优先</span>&quot;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">actionLabel</span>=<span class="string">&quot;添加笔记&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Notes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;noteData.map((note, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">animated.div</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">style</span>=<span class="string">&#123;trailAnimes[i]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NoteCard</span> <span class="attr">key</span>=<span class="string">&#123;note.id&#125;</span> <span class="attr">note</span>=<span class="string">&#123;note&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">animated.div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Notes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledNoteList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">NoteList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NoteList</span>;</span><br></pre></td></tr></table></figure><h3 id="三、导航切换过渡动画"><a href="#三、导航切换过渡动画" class="headerlink" title="三、导航切换过渡动画"></a>三、导航切换过渡动画</h3><p>编辑 <code>src/components/ChatApp/index.js</code>  文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledChatApp, &#123; Nav, Sidebar, Drawer, Content &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import NavBar from <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line">import MessageList from <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line">import Conversation from <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line">import Profile from <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line">import &#123; Route, Routes, useLocation &#125; from <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">import ContactList from <span class="string">&quot;components/ContactList&quot;</span>;</span><br><span class="line">import FileList from <span class="string">&quot;components/FileList&quot;</span>;</span><br><span class="line">import NoteList from <span class="string">&quot;components/NoteList&quot;</span>;</span><br><span class="line">import EditProfile from <span class="string">&quot;components/EditProfile&quot;</span>;</span><br><span class="line">import Settings from <span class="string">&quot;components/Settings&quot;</span>;</span><br><span class="line">import BlockedList from <span class="string">&quot;components/BlockedList&quot;</span>;</span><br><span class="line">import VideoCall from <span class="string">&quot;components/VideoCall&quot;</span>;</span><br><span class="line">import &#123; useTransition, animated &#125; from <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ChatApp(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  const [showDrawer, setShowDrawer] = useState(<span class="literal">false</span>);</span><br><span class="line">  const [videoCalling, setVideoCalling] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  const location = useLocation();</span><br><span class="line"></span><br><span class="line">  const transitions = useTransition(location, &#123;</span><br><span class="line">    from: &#123; opacity: 0, transform: <span class="string">&quot;translate3d(-100px, 0, 0)&quot;</span> &#125;,</span><br><span class="line">    enter: &#123; opacity: 1, transform: <span class="string">&quot;translate3d(0, 0, 0)&quot;</span> &#125;,</span><br><span class="line">    leave: &#123; opacity: 0, transform: <span class="string">&quot;translate3d(-100px, 0, 1)&quot;</span> &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledChatApp &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Nav&gt;</span><br><span class="line">        &lt;NavBar /&gt;</span><br><span class="line">      &lt;/Nav&gt;</span><br><span class="line">      &lt;Sidebar&gt;</span><br><span class="line">        &#123;transitions((&#123; item, props &#125;) =&gt; (</span><br><span class="line">          &lt;animated.div style=&#123;props&#125;&gt;</span><br><span class="line">            &lt;Routes location=&#123;item&#125;&gt;</span><br><span class="line">              &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;&lt;MessageList /&gt;&#125; /&gt;</span><br><span class="line">              &lt;Route path=<span class="string">&quot;/contacts&quot;</span> element=&#123;&lt;ContactList /&gt;&#125; /&gt;</span><br><span class="line">              &lt;Route path=<span class="string">&quot;/files&quot;</span> element=&#123;&lt;FileList /&gt;&#125; /&gt;</span><br><span class="line">              &lt;Route path=<span class="string">&quot;/notes&quot;</span> element=&#123;&lt;NoteList /&gt;&#125; /&gt;</span><br><span class="line">              &lt;Route path=<span class="string">&quot;/settings/*&quot;</span> element=&#123;&lt;EditProfile /&gt;&#125; /&gt;</span><br><span class="line">            &lt;/Routes&gt;</span><br><span class="line">          &lt;/animated.div&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/Sidebar&gt;</span><br><span class="line">      &lt;Content&gt;</span><br><span class="line">        &#123;videoCalling &amp;&amp; (</span><br><span class="line">          &lt;VideoCall onHangOffClicked=&#123;() =&gt; setVideoCalling(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        &lt;Routes&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings&quot;</span> element=&#123;&lt;Settings /&gt;&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings/blocked&quot;</span> element=&#123;&lt;BlockedList /&gt;&#125; /&gt;</span><br><span class="line">          &lt;Route</span><br><span class="line">            path=<span class="string">&quot;/&quot;</span></span><br><span class="line">            element=&#123;</span><br><span class="line">              &lt;Conversation</span><br><span class="line">                onAvatarClick=&#123;() =&gt; setShowDrawer(<span class="literal">true</span>)&#125;</span><br><span class="line">                onVideoClicked=&#123;() =&gt; setVideoCalling(<span class="literal">true</span>)&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            &#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/Routes&gt;</span><br><span class="line">      &lt;/Content&gt;</span><br><span class="line">      &lt;Drawer show=&#123;showDrawer&#125;&gt;</span><br><span class="line">        &lt;Profile onCloseClick=&#123;() =&gt; setShowDrawer(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">      &lt;/Drawer&gt;</span><br><span class="line">    &lt;/StyledChatApp&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChatApp.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ChatApp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nav</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex-shrink: 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  z-index: 100;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sidebar</span> = styled.<span class="property">aside</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 448px;</span></span><br><span class="line"><span class="string">  min-width: 344px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  flex: 1;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.grediantGray&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  z-index: 50;</span></span><br><span class="line"><span class="string">  &gt; div &#123;</span></span><br><span class="line"><span class="string">    will-change: transform, opacity;</span></span><br><span class="line"><span class="string">    position: absolute;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Content</span> = styled.<span class="property">main</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex: 2;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Drawer</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 310px;</span></span><br><span class="line"><span class="string">  width: 0;</span></span><br><span class="line"><span class="string">  transform: translateX(200px);</span></span><br><span class="line"><span class="string">  transition: transform 0.4s;</span></span><br><span class="line"><span class="string">  will-change: width, transform;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; show &#125;) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    show &amp;&amp;</span></span></span><br><span class="line"><span class="subst"><span class="string">    css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">      <span class="attribute">width</span>: initial;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledChatApp</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledChatApp</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Nav</span>, <span class="title class_">Sidebar</span>, <span class="title class_">Content</span>, <span class="title class_">Drawer</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、会话窗口动画"><a href="#四、会话窗口动画" class="headerlink" title="四、会话窗口动画"></a>四、会话窗口动画</h3><p>编辑 <code>src/components/Conversation/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledConversation</span>, &#123; <span class="title class_">Conversations</span>, <span class="title class_">MyChatBubble</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TitleBar</span> <span class="keyword">from</span> <span class="string">&quot;components/TitleBar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatBubble</span> <span class="keyword">from</span> <span class="string">&quot;components/ChatBubble&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VoiceMessage</span> <span class="keyword">from</span> <span class="string">&quot;components/VoiceMessage&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Emoji</span> <span class="keyword">from</span> <span class="string">&quot;components/Emoji&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;components/Footer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSpring &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Conversation</span>(<span class="params">&#123; onAvatarClick, onVideoClicked, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tBarAnimeProps = <span class="title function_">useSpring</span>(&#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, 0px, 0px)&quot;</span>,</span><br><span class="line">    <span class="attr">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, -50px, 0px)&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">delay</span>: <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> convsAnimeProps = <span class="title function_">useSpring</span>(&#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, 0px, 0px)&quot;</span>,</span><br><span class="line">    <span class="attr">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">transform</span>: <span class="string">&quot;translate3d(50px, 0px, 0px)&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">delay</span>: <span class="number">600</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ftAnimeProps = <span class="title function_">useSpring</span>(&#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, 0px, 0px)&quot;</span>,</span><br><span class="line">    <span class="attr">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">transform</span>: <span class="string">&quot;translate3d(0px, 50px, 0px)&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">delay</span>: <span class="number">750</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledConversation</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TitleBar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onVideoClicked</span>=<span class="string">&#123;onVideoClicked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onAvatarClick</span>=<span class="string">&#123;onAvatarClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">animeProps</span>=<span class="string">&#123;tBarAnimeProps&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Conversations</span> <span class="attr">style</span>=<span class="string">&#123;convsAnimeProps&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatBubble</span> <span class="attr">time</span>=<span class="string">&quot;昨天 下午14：26&quot;</span>&gt;</span>Hi 小宇，忙什么呢？<span class="tag">&lt;/<span class="name">ChatBubble</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyChatBubble</span> <span class="attr">time</span>=<span class="string">&quot;昨天 下午16：30&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Hello 啊！最近就是一直在加班改 bug，然后 怼产品，怼 UI，各种怼！</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyChatBubble</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatBubble</span> <span class="attr">time</span>=<span class="string">&quot;昨天 下午18：30&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">VoiceMessage</span> <span class="attr">time</span>=<span class="string">&quot;01:24&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ChatBubble</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyChatBubble</span> <span class="attr">time</span>=<span class="string">&quot;昨天 下午16：30&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          明天约一把王者荣耀，不连赢5把不罢休 🤘</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;smile&quot;</span>&gt;</span>🤘<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">MyChatBubble</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Conversations</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">animeProps</span>=<span class="string">&#123;ftAnimeProps&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledConversation</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Conversation</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Conversation</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Conversation/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatBubble</span> <span class="keyword">from</span> <span class="string">&quot;components/ChatBubble&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Conversations</span> = <span class="title function_">styled</span>(animated.<span class="property">div</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 10px 15px;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  align-items: flex-start;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">  overflow-y: auto;</span></span><br><span class="line"><span class="string">  flex: 1;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp; &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin: 10px 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyChatBubble</span> = <span class="title function_">styled</span>(<span class="title class_">ChatBubble</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;mine&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  align-self: flex-end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledConversation</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  border: 1px solid <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray4&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp; &gt; *:last-child &#123;</span></span><br><span class="line"><span class="string">    align-self: end;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledConversation</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Conversations</span>, <span class="title class_">MyChatBubble</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Titlebar/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledTitleBar</span>, &#123; <span class="title class_">Actions</span>, <span class="title class_">Title</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-3.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Call</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/call.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Camera</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/camera.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Options</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/options.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DropdownItem</span> &#125; <span class="keyword">from</span> <span class="string">&quot;components/Dropdown/style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dropdown</span> <span class="keyword">from</span> <span class="string">&quot;components/Dropdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TitleBar</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  animeProps,</span></span><br><span class="line"><span class="params">  style,</span></span><br><span class="line"><span class="params">  onAvatarClick,</span></span><br><span class="line"><span class="params">  onVideoClicked,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledTitleBar</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">...style</span>, <span class="attr">...animeProps</span> &#125;&#125; &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">onClick</span>=<span class="string">&#123;onAvatarClick&#125;</span> <span class="attr">status</span>=<span class="string">&quot;offline&quot;</span> <span class="attr">src</span>=<span class="string">&#123;face&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>慕容天宇<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>离线<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>· 最后阅读：3小时前<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Call&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onVideoClicked&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Camera&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Dropdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>个人资料<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>关闭会话<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Seperator</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>屏蔽此人<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Options&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Actions</span>&gt;</span></span></span><br><span class="line">    &lt;/<span class="title class_">StyledTitleBar</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">TitleBar</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TitleBar</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Titlebar/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledIcon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon/style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; animated &#125; <span class="keyword">from</span> <span class="string">&quot;react-spring&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Actions</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledIcon&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    cursor: pointer;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledTitleBar</span> = <span class="title function_">styled</span>(animated.<span class="property">div</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 62px 1fr 112px;</span></span><br><span class="line"><span class="string">  padding: 30px;</span></span><br><span class="line"><span class="string">  max-height: 110px;</span></span><br><span class="line"><span class="string">  border-bottom: 1px solid <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray4&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledTitleBar</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Actions</span>, <span class="title class_">Title</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Footer/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledFooter</span>, &#123; <span class="title class_">IconContainer</span>, <span class="title class_">StyledPopoverContent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ClipIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/clip.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">SmileIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/smile.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">MicrophoneIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/microphone.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">PlaneIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/plane.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">OptionsIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icons/options.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;components/Input&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Emoji</span> <span class="keyword">from</span> <span class="string">&quot;components/Emoji&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Popover</span> <span class="keyword">from</span> <span class="string">&quot;components/Popover&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Footer</span>(<span class="params">&#123; animeProps, style, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [emojiIconActive, setEmojiIconActive] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useTheme</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledFooter</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">...style</span>, <span class="attr">...animeProps</span> &#125;&#125; &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;输入想和对方说的话&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prefix</span>=<span class="string">&#123;</span>&lt;<span class="attr">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;ClipIcon&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        suffix=&#123;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IconContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Popover</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">content</span>=<span class="string">&#123;</span>&lt;<span class="attr">PopoverContent</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">              offset=&#123;&#123; x: &quot;-25%&quot; &#125;&#125;</span></span><br><span class="line"><span class="language-xml">              onVisible=&#123;() =&gt; setEmojiIconActive(true)&#125;</span></span><br><span class="line"><span class="language-xml">              onHide=&#123;() =&gt; setEmojiIconActive(false)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">icon</span>=<span class="string">&#123;SmileIcon&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color</span>=<span class="string">&#123;emojiIconActive</span> ? <span class="attr">undefined</span> <span class="attr">:</span> <span class="attr">theme.gray3</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Popover</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;MicrophoneIcon&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">size</span>=<span class="string">&quot;52px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">icon</span>=<span class="string">&#123;PlaneIcon&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color</span>=<span class="string">&quot;white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">transform:</span> &quot;<span class="attr">translateX</span>(<span class="attr">-2px</span>)&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">IconContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledFooter</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable jsx-a11y/accessible-emoji */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PopoverContent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledPopoverContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;smile&quot;</span>&gt;</span>😊<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;grinning&quot;</span>&gt;</span>😆<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;thumbup&quot;</span>&gt;</span>👍<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;indexfingerup&quot;</span>&gt;</span>☝️<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>👌<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;handsputtogether&quot;</span>&gt;</span>🙏<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;smilewithsunglasses&quot;</span>&gt;</span>😎<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Emoji</span> <span class="attr">label</span>=<span class="string">&quot;flexedbicep&quot;</span>&gt;</span>💪<span class="tag">&lt;/<span class="name">Emoji</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;OptionsIcon&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginLeft:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledPopoverContent</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Footer</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Footer</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第十二章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章是使用 React-Spring 动画库为项目添加动画。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十六天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9/</id>
    <published>2023-01-12T16:00:00.000Z</published>
    <updated>2023-01-12T08:02:10.212Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十五天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、102-二叉树层序遍历"><a href="#一、102-二叉树层序遍历" class="headerlink" title="一、102 二叉树层序遍历"></a>一、102 二叉树层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        preorder(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        preorder(root.left, result);</span><br><span class="line">        preorder(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">        inorder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        postorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorder(root.left, list);</span><br><span class="line">        postorder(root.right, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、二叉树的迭代遍历"><a href="#三、二叉树的迭代遍历" class="headerlink" title="三、二叉树的迭代遍历"></a>三、二叉树的迭代遍历</h3><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>因此，我们可以用迭代法（非递归的方式）来实现二叉树的前后中序遍历。</p><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 result 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">if</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">               stack.push(cur);</span><br><span class="line">               cur = cur.left;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               cur = stack.pop();</span><br><span class="line">               result.add(cur.val);</span><br><span class="line">               cur = cur.right;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看后序遍历，先序遍历是中左右，后续遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转 result 数组，输出的结果顺序就是左右中了。</p><script type="math/tex; mode=display">（先序遍历）中左右 \rightarrow （左右互换）中右左 \rightarrow （反转result）左右中</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十五天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十五天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-13T09:42:02.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十五天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、102-二叉树层序遍历"><a href="#一、102-二叉树层序遍历" class="headerlink" title="一、102 二叉树层序遍历"></a>一、102 二叉树层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        preorder(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        preorder(root.left, result);</span><br><span class="line">        preorder(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">        inorder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        postorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorder(root.left, list);</span><br><span class="line">        postorder(root.right, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、二叉树的迭代遍历"><a href="#三、二叉树的迭代遍历" class="headerlink" title="三、二叉树的迭代遍历"></a>三、二叉树的迭代遍历</h3><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>因此，我们可以用迭代法（非递归的方式）来实现二叉树的前后中序遍历。</p><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 result 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">if</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">               stack.push(cur);</span><br><span class="line">               cur = cur.left;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               cur = stack.pop();</span><br><span class="line">               result.add(cur.val);</span><br><span class="line">               cur = cur.right;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看后序遍历，先序遍历是中左右，后续遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转 result 数组，输出的结果顺序就是左右中了。</p><script type="math/tex; mode=display">（先序遍历）中左右 \rightarrow （左右互换）中右左 \rightarrow （反转result）左右中</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十五天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十四天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9/</id>
    <published>2023-01-09T16:00:00.000Z</published>
    <updated>2023-01-10T06:29:36.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十四天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、二叉树理论基础"><a href="#一、二叉树理论基础" class="headerlink" title="一、二叉树理论基础"></a>一、二叉树理论基础</h3><h4 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h4><p>满二叉树：如果一棵二叉树只有度为 0 的结点和度为 2 的结点，并且度为 0 的结点在同一层上，则这棵二叉树为满二叉树（深度为 k， 有 $2^k-1$ 个节点的二叉树）。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营17.gif" alt></p><p>完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1 ~  $2^{h-1}$  个节点。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营18.gif" alt></p><p>二叉搜索树是有数值的数，二叉搜索树是一个有序树：</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树。</li></ul><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营19.png" alt></p><p>平衡二叉搜索树：又被称为 AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营20.png" alt></p><ul><li>最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了 1。</li></ul><h4 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h4><p>二叉树可以链式存储，也可以顺序存储。</p><p>顺序存储的方式就是用数组，如果父节点的数组下标是 $i$，那么它的左孩子就是 $i \times 2 + 1$，右孩子就是 $i \times 2 + 2$：</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营21.png" alt></p><p>链式存储则是通过指针把分布在各个地址的节点串联一起：</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营22.png" alt></p><h4 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h4><p>二叉树主要有两种遍历方式（图论中最基本的两种遍历方式）：</p><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li><li>广度优先遍历：一层一层的去遍历。</li></ol><p>在深度优先遍历中：有三个顺序，前中后序遍历， 这里前中后，其实指的就是中间节点的遍历顺序，</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营23.png" alt></p><h4 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h4><p><a href="/树与二叉树/">二叉树的定义</a>和链表是差不多的，相对于链表 ，二叉树的节点里多了一个指针， 有两个指针，指向左右孩子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">  TreeNode left;</span><br><span class="line">  TreeNode right;</span><br><span class="line">  TreeNode() &#123;&#125;</span><br><span class="line">  TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">  TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、二叉树的递归遍历"><a href="#二、二叉树的递归遍历" class="headerlink" title="二、二叉树的递归遍历"></a>二、二叉树的递归遍历</h3><p>递归算法的三个要素：</p><ol><li>确定递归函数的参数和返回值： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li><li>确定终止条件： 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li><li>确定单层递归的逻辑： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        preorder(root, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        preorder(root.left, result);</span><br><span class="line">        preorder(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">        inorder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        postorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorder(root.left, list);</span><br><span class="line">        postorder(root.right, list);</span><br><span class="line">        list.add(root.val);             <span class="comment">// 注意这一句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、二叉树的迭代遍历"><a href="#三、二叉树的迭代遍历" class="headerlink" title="三、二叉树的迭代遍历"></a>三、二叉树的迭代遍历</h3><p>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>因此，我们可以用迭代法（非递归的方式）来实现二叉树的前后中序遍历。</p><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历·递归·LC144_二叉树的前序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 result 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历·递归·LC94_二叉树的中序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">if</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">               stack.push(cur);</span><br><span class="line">               cur = cur.left;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               cur = stack.pop();</span><br><span class="line">               result.add(cur.val);</span><br><span class="line">               cur = cur.right;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看后序遍历，先序遍历是中左右，后续遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转 result 数组，输出的结果顺序就是左右中了。</p><script type="math/tex; mode=display">（先序遍历）中左右 \rightarrow （左右互换）中右左 \rightarrow （反转result）左右中</script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序遍历·递归·LC145_二叉树的后序遍历</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            result.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十四天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十三天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/</id>
    <published>2023-01-08T16:00:00.000Z</published>
    <updated>2023-01-10T01:44:38.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十三天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、239-滑动窗口最大值"><a href="#一、239-滑动窗口最大值" class="headerlink" title="一、239 滑动窗口最大值"></a>一、239 滑动窗口最大值</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。返回滑动窗口中的最大值 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这是使用单调队列的经典题目。此时我们需要一个队列，这个队列呢，放进去窗口里的元素，然后随着窗口的移动，队列也一进一出，每次移动之后，队列告诉我们里面的最大值是什么。每次窗口移动的时候，调用 <code>queue.pop()</code>（滑动窗口中移除元素的数值），<code>queue.push()</code>（滑动窗口添加元素的数值），然后 <code>queue.front()</code> 就返回我们要的最大值。</p><p>遍历数组，保存当前窗口最大值的数组位置在双向队列中，保证队列中数组位置的数值按从大到小排序，并用 <code>L</code>，<code>R</code> 来标记窗口的左边界和右边界。队列中保存的并不是真的数，而是该数值对应的数组下标位置，并且数组中的数要从大到小排序。如果当前遍历的数比队尾的值大，则需要弹出队尾值，直到队列重新满足从大到小的要求。刚开始遍历时，<code>L</code> 和 <code>R</code> 都为 0，有一个形成窗口的过程，此过程没有最大值，<code>L</code> 不动，<code>R</code> 向右移。当窗口大小形成时，<code>L</code> 和 <code>R</code> 一起向右移，每次移动时，判断队首的值的数组下标是否在 <code>[L,R]</code> 中，如果不在则需要弹出队首的值，当前窗口的最大值即为队首的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> nums; </span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; nums[queue.peekLast()] &lt;= nums[i])&#123;</span><br><span class="line">                queue.pollLast();    <span class="comment">// 保证从大到小，如果前面数小则需要依次弹出，直至满足要求</span></span><br><span class="line">            &#125;</span><br><span class="line">            queue.addLast(i);        <span class="comment">// 添加当前值对应的数组下标</span></span><br><span class="line">            <span class="keyword">if</span>(queue.peek() &lt;= i-k)&#123;</span><br><span class="line">                queue.poll();      <span class="comment">// 判断当前队列中队首的值是否有效</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &gt;= k)&#123;</span><br><span class="line">                result[i+<span class="number">1</span>-k] = nums[queue.peek()];      <span class="comment">// 当窗口长度为k时，保存当前窗口中最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、347-前-K-个高频元素"><a href="#二、347-前-K-个高频元素" class="headerlink" title="二、347 前 K 个高频元素"></a>二、347 前 K 个高频元素</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按任意顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">输出: [1,2]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目主要涉及到如下三块内容：要统计元素出现频率、对频率排序、找出前 K 个高频元素。</p><p>统计元素出现的频率，这一类的问题可以使用 <code>map</code> 来进行统计。然后是对频率进行排序，这里我们可以使用一种容器适配器就是堆，堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Comparator接口说明:</span></span><br><span class="line"><span class="comment"> * 返回负数，形参中第一个参数排在前面；返回正数，形参中第二个参数排在前面</span></span><br><span class="line"><span class="comment"> * 对于队列：排在前面意味着往队头靠</span></span><br><span class="line"><span class="comment"> * 对于堆（使用PriorityQueue实现）：从队头到队尾按从小到大排就是最小堆（小顶堆），</span></span><br><span class="line"><span class="comment"> *                                从队头到队尾按从大到小排就是最大堆（大顶堆）---&gt;队头元素相当于堆的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 解法1：基于大顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent1(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    <span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">// 出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2)-&gt;pair2[<span class="number">1</span>]-pair1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;    <span class="comment">// 大顶堆需要对所有元素进行排序</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;    <span class="comment">// 依次从队头弹出k个,就是出现频率前k高的元素</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解法2：基于小顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent2(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    <span class="comment">// key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">// 出现次数按从队头到队尾的顺序是从小到大排,出现次数最低的在队头(相当于小顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1,pair2)-&gt;pair1[<span class="number">1</span>]-pair2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;    <span class="comment">// 小顶堆只需要维持k个元素有序</span></span><br><span class="line">            <span class="keyword">if</span>(pq.size()&lt;k)&#123;      <span class="comment">// 小顶堆元素个数小于k个时直接加</span></span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.getValue()&gt;pq.peek()[<span class="number">1</span>])&#123;    <span class="comment">// 当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">                    pq.poll();    <span class="comment">// 弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;      <span class="comment">// 依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、栈与队列的总结"><a href="#三、栈与队列的总结" class="headerlink" title="三、栈与队列的总结"></a>三、栈与队列的总结</h3><p>栈的应用在对称性问题上，如括号匹配问题、字符串去重问题、逆波兰表达式问题。</p><p>单调队列和优先级队列。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十三天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 路由管理</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/</id>
    <published>2023-01-07T16:00:00.000Z</published>
    <updated>2023-01-08T10:35:06.278Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第十一章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、React-Router-简介"><a href="#一、React-Router-简介" class="headerlink" title="一、React Router 简介"></a>一、React Router 简介</h3><p><a href="https://reactrouter.com/en/main">React Router</a> 是为 React 提供路由功能的第三方库，通过一些 React 组件实现动态的跳转，并根据不同的路由加载不同的组件，是完整的 React 动态路由解决方案。</p><p>因为 <code>React-router-dom@6</code> 对之前的版本有一些变动，先不研究，使用 <code>React-router-dom@5</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall react-router-dom</span><br><span class="line">npm install react-router-dom@5</span><br></pre></td></tr></table></figure><p>打开 <code>App.js</code>，从 <code>react-router-dom</code> 中导入 <code>BrowserRouter</code>，<code>BrowserRouter</code> 实现了 HTML5 中的 <code>History API</code>。路由定义在 <code>Router</code> 组件的内部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatApp</span> <span class="keyword">from</span> <span class="string">&quot;components/ChatApp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">&quot;theme&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatApp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>其他高级用法参见<a href="https://react-guide.github.io/react-router-cn/index.html">中文文档</a>。</p><h3 id="二、配置导航路由"><a href="#二、配置导航路由" class="headerlink" title="二、配置导航路由"></a>二、配置导航路由</h3><p>编辑 <code>src/components/ChatApp/index.js</code> 文件，使用 <code>path</code> 匹配路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledChatApp, &#123; Nav, Sidebar, Drawer, Content &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import NavBar from <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line">import MessageList from <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line">import Conversation from <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line">import Profile from <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line">import &#123; Route, Switch &#125; from <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">import ContactList from <span class="string">&quot;components/ContactList&quot;</span>;</span><br><span class="line">import FileList from <span class="string">&quot;components/FileList&quot;</span>;</span><br><span class="line">import NoteList from <span class="string">&quot;components/NoteList&quot;</span>;</span><br><span class="line">import EditProfile from <span class="string">&quot;components/EditProfile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ChatApp(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledChatApp &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Nav&gt;</span><br><span class="line">        &lt;NavBar /&gt;</span><br><span class="line">      &lt;/Nav&gt;</span><br><span class="line">      &lt;Sidebar&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;MessageList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/contacts&quot;</span>&gt;</span><br><span class="line">            &lt;ContactList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/files&quot;</span>&gt;</span><br><span class="line">            &lt;FileList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/notes&quot;</span>&gt;</span><br><span class="line">            &lt;NoteList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;EditProfile /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Sidebar&gt;</span><br><span class="line">      &lt;Content&gt;</span><br><span class="line">        &lt;Conversation /&gt;</span><br><span class="line">      &lt;/Content&gt;</span><br><span class="line">      &lt;Drawer&gt;</span><br><span class="line">        &lt;Profile /&gt;</span><br><span class="line">      &lt;/Drawer&gt;</span><br><span class="line">    &lt;/StyledChatApp&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChatApp.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ChatApp;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NavBar/index.js</code>给 <code>MenuItem</code> 添加 <code>to</code> 属性，用于接收路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledNavBar</span>, &#123; <span class="title class_">StyledMenuItem</span>, <span class="title class_">MenuIcon</span>, <span class="title class_">MenuItems</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Badge</span> <span class="keyword">from</span> <span class="string">&quot;components/Badge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> profileImage <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  faCommentDots,</span><br><span class="line">  faUsers,</span><br><span class="line">  faFolder,</span><br><span class="line">  faStickyNote,</span><br><span class="line">  faEllipsisH,</span><br><span class="line">  faCog,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/free-solid-svg-icons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, useLocation, matchPath &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NavBar</span>(<span class="params">&#123; ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledNavBar</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">src</span>=<span class="string">&#123;profileImage&#125;</span> <span class="attr">status</span>=<span class="string">&quot;online&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MenuItems</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">showBadge</span> <span class="attr">icon</span>=<span class="string">&#123;faCommentDots&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/contacts&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faUsers&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/files&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faFolder&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/notes&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faStickyNote&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">icon</span>=<span class="string">&#123;faEllipsisH&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;faCog&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">align-self:</span> <span class="attr">end</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MenuItems</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledNavBar</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MenuItem</span>(<span class="params">&#123; to, icon, showBadge, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loc = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> active = !!<span class="title function_">matchPath</span>(loc.<span class="property">pathname</span>, &#123;</span><br><span class="line">    <span class="attr">path</span>: to,</span><br><span class="line">    <span class="attr">exact</span>: to === <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledMenuItem</span> <span class="attr">active</span>=<span class="string">&#123;active&#125;</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;to&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">show</span>=<span class="string">&#123;showBadge&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">MenuIcon</span> <span class="attr">active</span>=<span class="string">&#123;active&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;icon&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Badge</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledMenuItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">NavBar</span>.<span class="property">propTypes</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavBar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MenuItem</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NavBar/style.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/react-fontawesome&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; activeBar &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledAvatar</span>, &#123; <span class="title class_">StatusIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;components/Avatar/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledMenuItem</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  &amp; &gt; a &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    height: 74px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    align-items: center;</span></span><br><span class="line"><span class="string">    justify-content: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;activeBar()&#125;</span>;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123; active &#125;) =&gt; (active ? <span class="string">&quot;&quot;</span> : <span class="string">`&amp;::before, &amp;::after &#123;height: 0&#125;`</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &amp;:hover &#123;</span></span><br><span class="line"><span class="string">      /* 指示条动画 */</span></span><br><span class="line"><span class="string">      ::before,</span></span><br><span class="line"><span class="string">      ::after &#123;</span></span><br><span class="line"><span class="string">        height: 100%;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      /* 图标动画 */</span></span><br><span class="line"><span class="string">      svg &#123;</span></span><br><span class="line"><span class="string">        transform: scale(1.2);</span></span><br><span class="line"><span class="string">        opacity: 1;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MenuIcon</span> = <span class="title function_">styled</span>(<span class="title class_">FontAwesomeIcon</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  font-size: 24px;</span></span><br><span class="line"><span class="string">  opacity: <span class="subst">$&#123;(&#123; active &#125;) =&gt; (active ? <span class="number">1</span> : <span class="number">0.3</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  transform: scale(1);</span></span><br><span class="line"><span class="string">  transition: 0.4s;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledNavBar</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-rows: 1fr 4fr;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.darkPurple&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: 30px 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledAvatar&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    justify-self: center;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;StatusIcon&#125;</span> &#123;</span></span><br><span class="line"><span class="string">      &amp;::before &#123;</span></span><br><span class="line"><span class="string">        background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.darkPurple&#125;</span>;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MenuItems</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-rows: repeat(5, minmax(auto, 88px)) 1fr;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledNavBar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MenuIcon</span>, <span class="title class_">StyledMenuItem</span>, <span class="title class_">MenuItems</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="三、配置内容区域路由"><a href="#三、配置内容区域路由" class="headerlink" title="三、配置内容区域路由"></a>三、配置内容区域路由</h3><p>编辑 <code>src/components/ChatApp/index.js</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledChatApp, &#123; Nav, Sidebar, Drawer, Content &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import NavBar from <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line">import MessageList from <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line">import Conversation from <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line">import Profile from <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line">import &#123; Route, Switch &#125; from <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">import ContactList from <span class="string">&quot;components/ContactList&quot;</span>;</span><br><span class="line">import FileList from <span class="string">&quot;components/FileList&quot;</span>;</span><br><span class="line">import NoteList from <span class="string">&quot;components/NoteList&quot;</span>;</span><br><span class="line">import EditProfile from <span class="string">&quot;components/EditProfile&quot;</span>;</span><br><span class="line">import Settings from <span class="string">&quot;components/Settings&quot;</span>;</span><br><span class="line">import BlockedList from <span class="string">&quot;components/BlockedList&quot;</span>;</span><br><span class="line">import VideoCall from <span class="string">&quot;components/VideoCall&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ChatApp(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  const [showDrawer, setShowDrawer] = useState(<span class="literal">false</span>);</span><br><span class="line">  const [videoCalling, setVideoCalling] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledChatApp &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Nav&gt;</span><br><span class="line">        &lt;NavBar /&gt;</span><br><span class="line">      &lt;/Nav&gt;</span><br><span class="line">      &lt;Sidebar&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;MessageList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/contacts&quot;</span>&gt;</span><br><span class="line">            &lt;ContactList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/files&quot;</span>&gt;</span><br><span class="line">            &lt;FileList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/notes&quot;</span>&gt;</span><br><span class="line">            &lt;NoteList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;EditProfile /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Sidebar&gt;</span><br><span class="line">      &lt;Content&gt;</span><br><span class="line">        &#123;videoCalling &amp;&amp; (</span><br><span class="line">          &lt;VideoCall onHangOffClicked=&#123;() =&gt; setVideoCalling(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;Settings /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/settings/blocked&quot;</span>&gt;</span><br><span class="line">            &lt;BlockedList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;Conversation</span><br><span class="line">              onAvatarClick=&#123;() =&gt; setShowDrawer(<span class="literal">true</span>)&#125;</span><br><span class="line">              onVideoClicked=&#123;() =&gt; setVideoCalling(<span class="literal">true</span>)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Content&gt;</span><br><span class="line">      &lt;Drawer show=&#123;showDrawer&#125;&gt;</span><br><span class="line">        &lt;Profile onCloseClick=&#123;() =&gt; setShowDrawer(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">      &lt;/Drawer&gt;</span><br><span class="line">    &lt;/StyledChatApp&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChatApp.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ChatApp;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/Settings/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSettings</span>, &#123;</span><br><span class="line">  <span class="title class_">StyledSettingsItem</span>,</span><br><span class="line">  <span class="title class_">SettingsItemControl</span>,</span><br><span class="line">  <span class="title class_">StyledSettingsGroup</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuRight</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuRight.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Switch</span> <span class="keyword">from</span> <span class="string">&quot;components/Switch&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Settings</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettings</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;隐私设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;添加好友时需要验证&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;推荐通讯录好友&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">description</span>=<span class="string">&quot;上传的通讯录只用来匹配好友列表，本应用不会记录和发送任何信息给其它机构或&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;只能通过手机号找到我&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;通知设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;新消息通知&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;语音和视频通话提醒&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;显示通知详情&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;声音&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">settings</span>/<span class="attr">blocked</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">text-decoration:</span> <span class="attr">none</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">color:</span> <span class="attr">inherit</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;查看已静音的好友列表&quot;</span> <span class="attr">type</span>=<span class="string">&quot;menu&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettings</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SettingsGroup</span>(<span class="params">&#123; groupName, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">paddingBottom:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;groupName&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SettingsItem</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  type = <span class="string">&quot;switch&quot;</span>,</span></span><br><span class="line"><span class="params">  label,</span></span><br><span class="line"><span class="params">  description,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsItem</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;switch&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;menu&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuRight&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;description &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">4px</span> <span class="attr">0</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;description&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Seperator</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> &quot;<span class="attr">8px</span>&quot;, <span class="attr">marginBottom:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Settings</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Settings</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/BlockedList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledBlockedList</span>, &#123;</span><br><span class="line">  <span class="title class_">SettingsMenu</span>,</span><br><span class="line">  <span class="title class_">ClosableAvatar</span>,</span><br><span class="line">  <span class="title class_">BlockedAvatar</span>,</span><br><span class="line">  <span class="title class_">CloseIcon</span>,</span><br><span class="line">  <span class="title class_">BlockedName</span>,</span><br><span class="line">  <span class="title class_">FriendList</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuLeft</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuLeft.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> closeCircle &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/closeCircle.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BlockedList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="title function_">useHistory</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledBlockedList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuLeft&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cursor:</span> <span class="attr">pointer</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> history.goBack()&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span>&gt;</span>已屏蔽的好友<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;new Array(8).fill(0).map((_, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ClosableAvatar</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedAvatar</span> <span class="attr">size</span>=<span class="string">&quot;105px&quot;</span> <span class="attr">src</span>=<span class="string">&#123;face&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">CloseIcon</span> <span class="attr">width</span>=<span class="string">&#123;46&#125;</span> <span class="attr">height</span>=<span class="string">&#123;51&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;closeCircle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedName</span>&gt;</span>李浩<span class="tag">&lt;/<span class="name">BlockedName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ClosableAvatar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledBlockedList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">BlockedList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BlockedList</span>;</span><br></pre></td></tr></table></figure><p>修改 <code>src/components/ChatApp/style.js</code>：：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nav</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex-shrink: 0;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sidebar</span> = styled.<span class="property">aside</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 448px;</span></span><br><span class="line"><span class="string">  min-width: 344px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  flex: 1;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.grediantGray&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Content</span> = styled.<span class="property">main</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex: 2;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Drawer</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 310px;</span></span><br><span class="line"><span class="string">  width: 0;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; show &#125;) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    show &amp;&amp;</span></span></span><br><span class="line"><span class="subst"><span class="string">    css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">      <span class="attribute">width</span>: <span class="number">310px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledChatApp</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledChatApp</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Nav</span>, <span class="title class_">Sidebar</span>, <span class="title class_">Content</span>, <span class="title class_">Drawer</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Conversation/index.js</code> 添加 <code>onAvatarClick</code> 和 <code>onVideoClicked</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Conversation</span>(<span class="params">&#123; onAvatarClick, onVideoClicked, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledConversation</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TitleBar</span> <span class="attr">onAvatarClick</span>=<span class="string">&#123;onAvatarClick&#125;</span> <span class="attr">onVideoClicked</span>=<span class="string">&#123;onVideoClicked&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在 <code>src/components/TitleBar/index.js</code> 添加 <code>onAvatarClick</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TitleBar</span>(<span class="params">&#123; onAvatarClick, onVideoClicked, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;StyledTitleBar &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Avatar onClick=&#123;onAvatarClick&#125; status=&quot;offline&quot; src=&#123;face&#125; /&gt;</span><br><span class="line">      &lt;Title&gt;</span><br><span class="line">     。。。   </span><br><span class="line">&lt;Actions&gt;</span><br><span class="line">&lt;Icon opacity=&#123;0.3&#125; icon=&#123;Call&#125; onVideoClicked=&#123;onVideoClicked&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第十一章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十一天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/</id>
    <published>2023-01-06T16:00:00.000Z</published>
    <updated>2023-01-07T03:45:01.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十一天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、20-有效的括号"><a href="#一、20-有效的括号" class="headerlink" title="一、20 有效的括号"></a>一、20 有效的括号</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>由于栈结构的特殊性，非常适合做对称匹配类的题目。括号匹配是使用栈解决的经典问题。在匹配左括号的时候，右括号先入栈，就只需要比较当前元素和栈顶相不相等就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">// 如果是右括号判断是否和栈顶元素匹配</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();    <span class="comment">// 最后判断栈中元素是否一一匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、1047-删除字符串中的所有相邻重复项"><a href="#二、1047-删除字符串中的所有相邻重复项" class="headerlink" title="二、1047 删除字符串中的所有相邻重复项"></a>二、1047 删除字符串中的所有相邻重复项</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给出由小写字母组成的字符串 <code>S</code>，重复项删除操作会选择两个相邻且相同的字母，并删除它们。在 S 上反复执行重复项删除操作，直到无法继续删除。在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>用栈来存放遍历过的元素，当遍历当前的这个元素的时候，去栈里看一下我们是不是遍历过相同数值的相邻元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deque.peek() != <span class="literal">null</span> &amp;&amp; deque.peek() == s.charAt(i)) &#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                deque.push(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            str = deque.pop() + str;    <span class="comment">// 注意 pop 出的元素在前</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题还可以拿字符串直接作为栈，用<code>StringBuilder</code> 来修改字符串，速度更快，也省去了栈还要转为字符串的操作。</p><p>本题还可以双指针法，直接用 <code>fast</code> 指针覆盖 <code>slow</code> 指针的值，遇到前后相同值的就跳过，即 <code>slow</code> 指针后退一步，下次循环就可以直接被覆盖掉了。</p><p>编程语言的一些功能实现也会使用栈结构，实现函数递归调用就需要栈。递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>但是在企业项目开发中，尽量不要使用递归。在项目比较大的时候，由于参数多，全局变量等等，使用递归很容易判断不充分 return 的条件，非常容易无限递归（或者递归层级过深），造成栈溢出错误。</p><h3 id="三、150-逆波兰表达式求值"><a href="#三、150-逆波兰表达式求值" class="headerlink" title="三、150 逆波兰表达式求值"></a>三、150 逆波兰表达式求值</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/逆波兰式/128437">逆波兰表示法</a> 表示的算术表达式。请你计算该表达式。返回一个表示表达式值的整数。</p><ul><li>有效的算符为 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code> 和 <code>&#39;/&#39;</code> 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是向零截断 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 32 位 整数表示。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>其实逆波兰表达式相当于是二叉树中的后序遍历。 可以把运算符作为中间节点，按照后序遍历的规则（左右中）画出一个二叉树。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营16.png" alt></p><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，图示即便写成 <code>1 2 + 3 4 + *</code> 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNumber(token)) &#123;</span><br><span class="line">                stack.push(Integer.parseInt(token));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();    <span class="comment">// 先 num2 再 num1</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        stack.push(num1 + num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        stack.push(num1 - num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        stack.push(num1 * num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        stack.push(num1 / num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(<span class="string">&quot;+&quot;</span>.equals(token) || <span class="string">&quot;-&quot;</span>.equals(token) || <span class="string">&quot;*&quot;</span>.equals(token) || <span class="string">&quot;/&quot;</span>.equals(token));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十一天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9/</id>
    <published>2023-01-05T16:00:00.000Z</published>
    <updated>2023-01-07T02:43:42.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、栈和队列基本原理"><a href="#一、栈和队列基本原理" class="headerlink" title="一、栈和队列基本原理"></a>一、栈和队列基本原理</h3><p>栈是先进后出（LIFO），队列是先进先出（FIFO）。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营15.png" alt></p><p>Java 使用栈时推荐 Deque 双端队列而不是 Stack，因为 Stack 继承自 Vector，破坏了类的封装性；其次，Stack 是类，Deque 是接口，接口可以屏蔽实现细节。<code>ArrayDeque</code> 会比 <code>LinkedList</code> 在除了删除元素这一点外会快一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; queue1 = <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>&lt;&gt;();</span><br><span class="line">Deque&lt;Integer&gt; queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="二、232-用栈实现队列"><a href="#二、232-用栈实现队列" class="headerlink" title="二、232 用栈实现队列"></a>二、232 用栈实现队列</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><p>你只能使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>将一个栈当作输入栈，用于压入 push 传入的数据；另一个栈当作输出栈，用于 pop 和 peek 操作。每次 pop 或 peek 时，若输出栈为空则将输入栈的全部数据依次弹出并压入输出栈，这样输出栈从栈顶往栈底的顺序就是队列从队首往队尾的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stackIn;    <span class="comment">// 负责进栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stackOut;    <span class="comment">// 负责出栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();    </span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;    </span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 stackOut 为空，那么将 stackIn 中的元素全部放到 stackOut 中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) <span class="keyword">return</span>; </span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty())&#123;</span><br><span class="line">                stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>peek()</code> 的实现，直接复用了 <code>pop()</code>， 要不然，对 stackOut 判空的逻辑又要重写一遍。因此，一定要懂得复用，功能相近的函数要抽象出来。</p><h3 id="三、225-用队列实现栈"><a href="#三、225-用队列实现栈" class="headerlink" title="三、225 用队列实现栈"></a>三、225 用队列实现栈</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用一个队列实现栈的操作。入栈操作时，首先获得入栈前的元素个数 n，然后将元素入队到队列，再将队列中的前 n 个元素（即除了新入栈的元素之外的全部元素）依次出队并入队到队列，此时队列的前端的元素即为新入栈的元素，且队列的前端和后端分别对应栈顶和栈底。</p><p>由于每次入栈操作都确保队列的前端元素为栈顶元素，因此出栈操作和获得栈顶元素操作都可以简单实现。出栈操作只需要移除队列的前端元素并返回即可，获得栈顶元素操作只需要获得队列的前端元素并返回即可（不移除元素）。</p><p>由于队列用于存储栈内的元素，判断栈是否为空时，只需要判断队列是否为空即可。</p><p><img src="https://assets.leetcode-cn.com/solution-static/225/225_fig2.gif" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第九天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9/</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-01-05T09:49:13.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第九天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、KMP-算法"><a href="#一、KMP-算法" class="headerlink" title="一、KMP 算法"></a>一、KMP 算法</h3><p>Knuth-Morris-Pratt 算法，简称 KMP 算法，由 Donald Knuth、James H. Morris 和 Vaughan Pratt 三人于 1977 年联合发表，主要应用在字符串匹配上。</p><p>KMP 算法的核心为前缀函数，记作 $π(i)$，其定义如下：对于长度为 m 的字符串 s，其前缀函数 $π(i)（0≤i&lt;m）$ 表示 s 的子串 $s[0:i]$ 的最长的相等的真前缀与真后缀的长度。特别地，如果不存在符合条件的前后缀，那么 $π(i)=0$。其中真前缀与真后缀的定义为不等于自身的的前缀与后缀。例如，字符串 aabaaab 的前缀函数值依次为 0, 1, 0, 1, 2, 2, 3。</p><p>一刷先不看 KMP，留空等二刷补</p><p>28.实现 strStr() </p><p>459.重复的子字符串</p><h3 id="四、字符串和双指针总结"><a href="#四、字符串和双指针总结" class="headerlink" title="四、字符串和双指针总结"></a>四、字符串和双指针总结</h3><p>双指针法在数组，链表和字符串中很常用。</p><p>原地移除数组上的元素，由于数组上的元素不能真正的删除，只能覆盖，双指针法通过两个指针在一个 for 循环下完成两个 for 循环的工作。</p><p>其实很多数组（字符串）填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。在删除冗余空格的过程中，如果不注意代码效率，很容易写成了 O(n^2) 的时间复杂度。其实使用双指针法 O(n) 就可以搞定。</p><p>使用双指针法来翻转链表，只需要改变链表的 next 指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第九天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第八天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9/</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-01-04T11:45:35.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第八天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h3><p>在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。String 类是不可变类，即一旦一个 String 对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p>Java 提供了两个可变字符串类 StringBuffer 和 StringBuilder，即字符串缓冲区。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营14.png" alt></p><p>String 是 Java 中基础且重要的类，被声明为 final class，是不可变字符串。因为它的不可变性，所以拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。</p><p>StringBuffer 就是为了解决大量拼接字符串时产生很多中间对象问题而提供的一个类。它提供了 append 和 add 方法，可以将字符串添加到已有序列的末尾或指定位置，它的本质是一个线程安全的可修改的字符序列。</p><p>在很多情况下我们的字符串拼接操作不需要线程安全，所以 JDK1.5 发布了 StringBuilder，它和 StringBuffer 本质上没什么区别，就是去掉了保证线程安全的那部分，减少了开销。</p><p>一般情况下，速度从快到慢为 StringBuilder &gt; StringBuffer &gt; String，当然这是相对的，不是绝对的。</p><p>操作少量的数据时使用 String。单线程操作大量数据时使用 StringBuilder。多线程操作大量数据时使用 StringBuffer。</p><h3 id="二、344-反转字符串"><a href="#二、344-反转字符串" class="headerlink" title="二、344 反转字符串"></a>二、344 反转字符串</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>双指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充知识点：<code>swap</code> 除了交换数值，也可以是通过位运算实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[left] ^= s[right];  <span class="comment">// 构造 a ^ b 的结果，并放在 a 中</span></span><br><span class="line">s[right] ^= s[left];  <span class="comment">// 将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b</span></span><br><span class="line">s[left] ^= s[right];  <span class="comment">// a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换</span></span><br></pre></td></tr></table></figure><h3 id="三、541-反转字符串-II"><a href="#三、541-反转字符串-II" class="headerlink" title="三、541 反转字符串 II"></a>三、541 反转字符串 II</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>在遍历字符串的过程中，只要让 <code>i += (2 * k)</code>，<code>i</code> 每次移动 <code>2 * k</code> 就可以了，然后判断是否需要有反转的区间。每隔 <code>2k</code> 个反转前 <code>k</code> 个，尾数不够 <code>k</code> 个时候全部反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Math.min(ch.length - <span class="number">1</span>, left + k - <span class="number">1</span>);    <span class="comment">// 判断尾数够不够k个来决定end指针的位置</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> ch[left];</span><br><span class="line">                ch[left++] = ch[right];</span><br><span class="line">                ch[right--] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、剑指-Offer-05-替换空格"><a href="#四、剑指-Offer-05-替换空格" class="headerlink" title="四、剑指 Offer 05 替换空格"></a>四、剑指 Offer 05 替换空格</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成 <code>%20</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>对于很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。这么做有两个好处：首先是不用申请新数组；而且从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;    <span class="comment">// 等同于if (&quot; &quot;.equals(String.valueOf(s.charAt(i))))&#123;&#125;</span></span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：对于所有线性数据结构的填充或者删除，后序处理都会高效的多。</p><h3 id="五、151-翻转字符串里的单词"><a href="#五、151-翻转字符串里的单词" class="headerlink" title="五、151 翻转字符串里的单词"></a>五、151 翻转字符串里的单词</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串 <code>s</code> ，请你反转字符串中单词的顺序。单词是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的单词分隔开。返回单词顺序颠倒且单词之间用单个空格连接的结果字符串。</p><p>注意：输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>分部解题：去除首尾以及中间多余空格，再将整个字符串反转，再将每个单词反转回来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> removeSpace(s);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">removeSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(start) == <span class="string">&#x27; &#x27;</span>) start++;    <span class="comment">// 去除开头空格</span></span><br><span class="line">        <span class="keyword">while</span> (s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end--;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseEachWord</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sb.length();</span><br><span class="line">        <span class="keyword">while</span> (start &lt; n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (end &lt; n &amp;&amp; sb.charAt(end) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            reverseString(sb, start, end - <span class="number">1</span>);</span><br><span class="line">            start = end + <span class="number">1</span>;</span><br><span class="line">            end = start + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、剑指-Offer-58-II-左旋转字符串"><a href="#六、剑指-Offer-58-II-左旋转字符串" class="headerlink" title="六、剑指 Offer 58 - II 左旋转字符串"></a>六、剑指 Offer 58 - II 左旋转字符串</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串 <code>&quot;abcdefg&quot;</code> 和数字 2，该函数将返回左旋转两位得到的结果 <code>&quot;cdefgab&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>经典题目，反转区间为前 n 的子串，反转区间为 n 到末尾的子串，最后反转整个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, n, len - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start++, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end--, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第八天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第七天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-01-03T09:52:58.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第七天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、454-四数相加-II"><a href="#一、454-四数相加-II" class="headerlink" title="一、454 四数相加 II"></a>一、454 四数相加 II</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目是四个独立的数组，只要找到 <code>A[i] + B[j] + C[k] + D[l] = 0</code> 就可以，不用考虑有重复的四个元素相加等于 0 的情况。使用哈希法的 map 可以巧妙解决的问题，提高程序执行效率，降低时间复杂度，当然使用哈希法会提高空间复杂度，但一般来说我们都是舍空间换时间。</p><p>先统计前两个数组中的元素之和，同时统计出现的次数，放入 map。再统计剩余的两个元素的和，在 map 中找是否存在相加为 0 的情况，同时记录次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2) &#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(temp)) &#123;</span><br><span class="line">                    map.put(temp, map.get(temp) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(temp, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums4) &#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(<span class="number">0</span> - temp)) &#123;</span><br><span class="line">                    result += map.get(<span class="number">0</span> - temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、383-赎金信"><a href="#二、383-赎金信" class="headerlink" title="二、383 赎金信"></a>二、383 赎金信</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。<code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目和<a href="https://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9#%E4%BA%8C%E3%80%81242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D"> 242 有效的字母异位词</a>很像，有效的字母异位词相当于求字符串 a 和 b 是否可以相互组成 ，而这道题目是求字符串 a 能否组成字符串 b，而不用管字符串 b 能不能组成字符串 a。</p><p>这里需要注意两点。第一点为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思说明杂志里面的字母不可重复使用。第二点你可以假设两个字符串均只含有小写字母，说明只有小写字母，那可以采用空间换取时间的哈希策略， 用一个长度为 26 的数组还记录 <code>magazine</code> 里字母出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果数组中存在负数，说明ransomNote字符串总存在magazine中没有的字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本题的情况下，使用 map 的空间消耗要比数组大一些的，因为 map 要维护红黑树或者哈希表，而且还要做哈希函数，是更费时的。所以对于数据量大的字符串，使用数组更加简单直接有效。</p><h3 id="三、15-三数之和"><a href="#三、15-三数之和" class="headerlink" title="三、15 三数之和"></a>三、15 三数之和</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。注意：答案中不可以包含重复的三元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>找出 <code>a + b + c = 0</code>，即 <code>a = nums[i], b = nums[j], c = -(a + b)</code>，可以使用哈希法来确定 <code>0-(a+b)</code> 是否在数组里出现过，但是题目中说的不可以包含重复的三元组，需要再去重，这样很容易超时。</p><p>这道题目使用双指针法要比哈希法高效一些。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营12.gif" alt></p><p>首先将 <code>nums</code> 数组排序，然后有一层 <code>for</code> 循环，<code>i</code> 从下标 0 的地方开始，同时定一个下标 <code>left</code> 定义在 <code>i+1</code> 的位置上，定义下标 <code>right</code> 在数组结尾的位置上。数组中 <code>a = nums[i]，b = nums[left]，c = nums[right]</code>，要使得 <code>a + b + c = 0</code>。</p><p>如果 <code>nums[i] + nums[left] + nums[right] &gt; 0</code> 就说明此时三数之和大了，因为数组是经过排序后的，所以 <code>right</code> 下标就应该向左移动，这样才能让三数之和小一些。</p><p>如果 <code>nums[i] + nums[left] + nums[right] &lt; 0</code> 说明此时三数之和小了，<code>left</code> 就向右移动，才能让三数之和大一些，直到 <code>left</code>与 <code>right</code> 相遇为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;    <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;        <span class="comment">// 去重 a</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对 b 和 c 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前做过的 <a href="https://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/#%E4%BA%94%E3%80%811-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C">1 两数之和</a> 就不能用双指针法，因为要求返回的是索引下标，而双指针法一定要排序，一旦排序之后原数组的索引就被改变了。如果两数之和要求返回的是数值的话，就可以使用双指针法了。</p><h3 id="四、18-四数之和"><a href="#四、18-四数之和" class="headerlink" title="四、18 四数之和"></a>四、18 四数之和</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且不重复的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 互不相同</li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按任意顺序返回答案 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题思路整体和上一题 15 三数之和一样的，都是双指针法，但难在去重和剪枝。</p><p>四数之和的双指针解法是在三数之和的基础上再套一层 for 循环。<code>nums[k] + nums[i]</code> 为确定值，依然是循环内有 <code>left</code> 和 <code>right</code> 下标作为双指针，找出 <code>nums[k] + nums[i] + nums[left] + nums[right] == target</code> 的情况。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营13.png" alt></p><p>需要注意的细节：因为这个题目时自定义 <code>target</code>，所以不能像三数之和那样进行剪枝操作。<code>i</code> 进行剪枝操作的时候要将 <code>k</code> 和 <code>i</code> 看成是一个整体。<code>i</code> 进行去重的时候，应该是 <code>i &gt; k + 1</code>。因为数字之和比较大，所以数据类型应该选择 <code>long</code>，而且要对和进行强转，因为 Java 中字面量默认时 <code>int</code> 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// nums[i] &gt; target 直接返回, 剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123;    <span class="comment">// 对nums[i]去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j - <span class="number">1</span>] == nums[j]) &#123;  <span class="comment">// 对nums[j]去重</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &gt; target int会溢出</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、哈希表总结"><a href="#五、哈希表总结" class="headerlink" title="五、哈希表总结"></a>五、哈希表总结</h3><ol><li>数组作为哈希表：数组就是简单的哈希表，但是数组的大小是受限的。如果题中要求只有小写字母，那么就可以考虑用数组。</li><li>set 作为哈希表：数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。所以此时一样的做映射的话，就可以使用 set 了。</li><li>map 作为哈希表：map 是一种<code>&lt;key, value&gt;</code>的结构，如果不仅要判断 X 是否存在而且还要记录 X 的下标位置，可以用 <code>key</code> 保存数值，用 <code>value</code> 在保存数值所在的下标，所以使用 <code>map</code> 最为合适。虽然 map 是万能的，但使用 map 的空间消耗要比数组大一些，因为 map 要维护红黑树或者符号表，而且还要做哈希函数的运算。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第七天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第六天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/</id>
    <published>2023-01-01T16:00:00.000Z</published>
    <updated>2023-01-02T05:35:40.390Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第六天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、哈希表理论基础"><a href="#一、哈希表理论基础" class="headerlink" title="一、哈希表理论基础"></a>一、哈希表理论基础</h3><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表（Hash table）是根据关键码的值而直接进行访问的数据结构。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营07.png" alt></p><p>哈希表一般都是用来快速判断一个元素是否出现集合里。例如要查询一个名字是否在这所学校里，要枚举的话时间复杂度是 <code>O(n)</code>，但如果使用哈希表的话， 只需要 <code>O(1)</code> 就可以做到，我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>将学生姓名映射到哈希表上就涉及到了哈希函数（Hash function）。哈希函数通过 <code>hashCode</code> 把名字转化为数值，一般 <code>hashCode</code> 是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p>如果 <code>hashCode</code> 得到的数值大于哈希表的大小了，也就是大于 <code>tableSize</code> 了，此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营08.png" alt></p><h4 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h4><p>如果学生的数量大于哈希表的大小，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表同一个索引下标的位置，这一现象叫做哈希碰撞。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营09.png" alt></p><p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p><p>拉链法：刚刚小李和小王在索引 1 的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营10.png" alt></p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><p>使用线性探测法，一定要保证哈希表的大小 <code>tableSize</code> 大于数据规模 <code>dataSize</code>，依靠哈希表中的空位来解决碰撞问题。例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求 <code>tableSize</code> 一定要大于 <code>dataSize</code> ，要不然哈希表上就没有空置的位置来存放冲突的数据了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营11.png" alt></p><h4 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h4><p>当我们想使用哈希法来解决问题的时候，我们一般会选择三种数据结构：数组（List）、集合（set）、映射（map）。</p><ul><li><p><code>List</code> 是有序可重复集合。</p></li><li><p><code>Set</code> 是无序不可重复集合。</p></li><li><p><code>Map</code> 是以键值对存储的集合，<code>key</code> 不能重复，<code>key</code> 底层也是以 <code>set</code> 存储的。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下，当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。</p><p>但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，<code>set</code> 或者是 <code>map</code> 来存放数据，才能实现快速的查找。</p><h3 id="二、242-有效的字母异位词"><a href="#二、242-有效的字母异位词" class="headerlink" title="二、242 有效的字母异位词"></a>二、242 有效的字母异位词</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p><p>注意：若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>暴力解法：转换成字符数组，分别排序再比较。时间复杂度：<code>O(nlogn)</code>，空间复杂度：<code>O(logn)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ss = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] tt = t.toCharArray();</span><br><span class="line">        Arrays.sort(ss);</span><br><span class="line">        Arrays.sort(tt);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(ss, tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组其实就是一个简单哈希表，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串 <code>s</code> 里字符出现的次数。</p><p>定义一个数组叫做 <code>record</code> 用来上记录字符串 <code>s</code> 里字符出现的次数，大小为 26 就可以了，初始化为 0，因为字符 <code>a</code> 到字符 <code>z</code> 的 ASCII 也是 26 个连续的数值，字符 <code>a</code> 映射为下标 0，相应的字符 <code>z</code> 映射为下标 25。</p><p>再遍历字符串 <code>s</code> 的时候，只需要将 <code>s[i] - ‘a’</code> 所在的元素做 +1 操作即可，并不需要记住字符 <code>a</code> 的 ASCII，只要求出一个相对数值就可以了。这样就将字符串 <code>s</code> 中字符出现的次数，统计出来了。同样在遍历字符串 <code>t</code> 的时候，对t中出现的字符映射哈希表索引上的数值再做 <code>-1</code> 的操作。</p><p><code>record</code> 数组如果有的元素不为零 0，说明字符串 <code>s</code> 和 <code>t</code> 一定是谁多了字符或者谁少了字符，如果 <code>record</code> 数组所有元素都为零 0，说明字符串 <code>s</code> 和 <code>t</code> 是字母异位词。</p><p>时间复杂度为 <code>O(n)</code>，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为 <code>O(1)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> count : record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、349-两个数组的交集"><a href="#三、349-两个数组的交集" class="headerlink" title="三、349 两个数组的交集"></a>三、349 两个数组的交集</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集。输出结果中的每个元素一定是唯一的。我们可以不考虑输出结果的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用数组来做哈希的题目，是因为题目都限制了数值的大小。而这道题目没有限制数值的大小，就无法使用数组来做哈希表了。而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import java.util.HashSet; import java.util.Set;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            set1.add(i);            <span class="comment">//遍历数组1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set1.contains(i)) &#123;</span><br><span class="line">                resSet.add(i);      <span class="comment">//遍历数组2的过程中判断哈希表中是否存在该元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resSet.stream().mapToInt(x -&gt; x).toArray();    <span class="comment">//将结果几何转为数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、202-快乐数"><a href="#四、202-快乐数" class="headerlink" title="四、202 快乐数"></a>四、202 快乐数</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。如果 <code>n</code> 是快乐数就返回 <code>true</code> ；不是则返回 <code>false</code> 。</p><p>快乐数定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。</li><li>如果这个过程结果为 1，那么这个数就是快乐数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法了。所以这道题目使用哈希法，来判断这个 <code>sum</code> 是否重复出现，如果重复了就是 <code>return false</code>， 否则一直找到 <code>sum == 1</code> 为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !record.contains(n)) &#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;   <span class="comment">// ==1为true，!=1为false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNextNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;    <span class="comment">// 取各位置上的数字的平方和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、1-两数之和"><a href="#五、1-两数之和" class="headerlink" title="五、1 两数之和"></a>五、1 两数之和</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 <code>target</code> 的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>梦开始的地方，暴力解法，两个 <code>for</code> 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题需要一个集合来存放我们遍历过的元素，然后在遍历数组的时候去询问这个集合，某元素是否遍历过，也就是是否出现在这个集合。那么我们就应该想到使用哈希法了。</p><p>使用数组和 set 来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set 是一个集合，里面放的元素只能是一个 <code>key</code>，而两数之和这道题目，不仅要判断 <code>y</code> 是否存在而且还要记录 <code>y</code> 的下标位置，因为要返回 <code>x</code> 和 <code>y</code> 的下标。所以 set 也不能用。</li></ul><p>本题，我们不仅要知道元素有没有遍历过，还要判断这个元素是否出现过，如果出现过，返回这个元素的下标，需要使用 <code>key value</code> 结构来存放，<code>key</code> 来存元素，<code>value</code> 来存下标，使用 <code>map</code> 正合适。</p><ul><li>map 中的存储结构为 <code>&#123;key：数据元素，value：数组元素对应的下标&#125;</code>。</li><li>在遍历数组的时候，只需要向 map 去查询是否有和目前遍历元素比配的数值，如果有，就找到的匹配对，如果没有，就把目前遍历的元素放进 map 中，因为 map 存放的就是我们访问过的元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];   <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">            res[<span class="number">1</span>] = i;</span><br><span class="line">            res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);    <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第六天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2022-12-31T09:35:32.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第四天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、24-两两交换链表中的节点"><a href="#一、24-两两交换链表中的节点" class="headerlink" title="一、24 两两交换链表中的节点"></a>一、24 两两交换链表中的节点</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>用虚拟头结点的方式进行操作，这样会方便很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next.next;    </span><br><span class="line">            current.next = head.next;        </span><br><span class="line">            head.next.next = head;        </span><br><span class="line">            head.next = temp;        </span><br><span class="line">            current = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、19-删除链表的倒数第-N-个节点"><a href="#二、19-删除链表的倒数第-N-个节点" class="headerlink" title="二、19 删除链表的倒数第 N 个节点"></a>二、19 删除链表的倒数第 N 个节点</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>同样使用虚拟头结点，这样方便处理删除实际头结点的逻辑。定义 <code>fast</code> 指针和 <code>slow</code> 指针，初始值为虚拟头结点，<code>fast</code> 首先走<code>n + 1</code> 步 ，指向删除节点的下一个节点，这样同时移动的时候 <code>slow</code> 才能指向删除节点的上一个节点（方便做删除操作）。</p><p>然后，<code>fast</code> 和 <code>slow</code> 同时移动，直到 <code>fast</code> 指向末尾（Null），此时 <code>slow</code> 指向删除节点的上一个节点。删除 <code>slow</code> 指向的下一个节点（<code>slow-&gt;next = slow-&gt;next-&gt;next;</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="literal">null</span>) &#123;    <span class="comment">//注意这里是 fast.next 不是 fast</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、面试题-02-07-链表相交"><a href="#三、面试题-02-07-链表相交" class="headerlink" title="三、面试题 02.07 链表相交"></a>三、面试题 02.07 链表相交</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></a></p><p>题目数据保证整个链式结构中不存在环。注意，函数返回结果后，链表必须保持其原始结构。</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>简单来说，就是求两个链表交点节点的指针。 这里注意，交点不是数值相等，而是指针相等。</p><p>使用双指针的方法，可以将空间复杂度降至 O(1)。</p><p>只有当链表 <code>headA</code> 和  <code>headB</code> 都不为空时，两个链表才可能相交。因此首先判断链表 <code>headA</code> 和 <code>headB</code> 是否为空，如果其中至少有一个链表为空，则两个链表一定不相交，返回 <code>null</code>。</p><p>当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，创建两个指针 <code>pA</code> 和 <code>pB</code>，初始时分别指向两个链表的头节点 <code>headA</code> 和 <code>headB</code>，然后将两个指针依次遍历两个链表的每个节点。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营05.png" alt></p><p>每步操作需要同时更新指针 <code>pA</code> 和 <code>pB</code>。如果指针 <code>pA</code> 不为空，则将指针 <code>pA</code> 移到下一个节点；如果指针 <code>pB</code> 不为空，则将指针 <code>pB</code> 移到下一个节点。如果指针 <code>pA</code> 为空，则将指针 <code>pA</code> 移到链表 <code>headB</code> 的头节点；如果指针 <code>pB</code> 为空，则将指针 <code>pB</code> 移到链表 <code>headA</code> 的头节点。当指针 <code>pA</code> 和 <code>pB</code> 指向同一个节点或者都为空时，返回它们指向的节点或者 <code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">A</span> <span class="operator">=</span> headA, B = headB;</span><br><span class="line">        <span class="keyword">while</span> (A != B) &#123;</span><br><span class="line">            A = A != <span class="literal">null</span> ? A.next : headB;</span><br><span class="line">            B = B != <span class="literal">null</span> ? B.next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、142-环形链表-II"><a href="#四、142-环形链表-II" class="headerlink" title="四、142 环形链表 II"></a>四、142 环形链表 II</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给定一个链表的头节点 <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。不允许修改链表。</p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>可以使用快慢指针法判断链表是否环，分别定义 <code>fast</code> 和 <code>slow</code> 指针，从头结点出发，<code>fast</code> 指针每次移动两个节点，<code>slow</code> 指针每次移动一个节点，如果 <code>fast</code> 和 <code>slow</code> 指针在途中相遇 ，说明这个链表有环。这是因为 <code>fast</code> 是走两步，<code>slow</code> 是走一步，其实相对于 <code>slow</code> 来说，<code>fast</code> 是一个节点一个节点的靠近 <code>slow</code> 的，所以 <code>fast</code> 一定可以和 <code>slow</code> 重合。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营06.png" alt></p><p>设链表中环外部分的长度为 <code>a</code>。<code>slow</code> 指针进入环后，又走了 <code>b</code> 的距离与 <code>fast</code> 相遇。此时，<code>fast</code> 指针已经走完了环的 n 圈，因此它走过的总距离为 $a+n(b+c)+b=a+(n+1)b+nc$。</p><p>又因为任意时刻，<code>fast</code> 指针走过的距离都为 <code>slow</code> 指针的 2 倍。因此，可以推导出：</p><script type="math/tex; mode=display">a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)</script><p>即从相遇点到入环点的距离加上 $n-1$ 圈的环长，恰好等于从链表头部到入环点的距离。</p><p>因此，当发现 <code>slow</code> 与 <code>fast</code> 相遇时，我们再额外使用一个指针 <code>ptr</code>。起始，它指向链表头部。随后，它和 <code>slow</code> 每次向后移动一个位置。最终，它们会在入环点相遇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">ptr</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                    ptr = ptr.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第四天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2022-12-29T16:00:00.000Z</published>
    <updated>2023-01-07T03:51:06.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第三天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、链表理论基础"><a href="#一、链表理论基础" class="headerlink" title="一、链表理论基础"></a>一、链表理论基础</h3><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 <code>null</code>（空指针）。链表的入口节点称为链表的头结点也就是 <code>head</code>。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营02.png" alt></p><p>链表节点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;    </span><br><span class="line">    ListNode next;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;    <span class="comment">// 节点的构造函数</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;    </span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;    </span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表在内存中的存储方式是通过指针域的指针链接在内存中各个节点。所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p>链表和数组的区别：数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p><p>除此以外，还有双链表、循环链表和静态链表，以及它们的 C/C++ 的定义方式可以参考<a href="/线性表的链式存储">这篇文章</a>。</p><p>双链表结点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode() &#123;&#125;;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表一定要分清节点和指针的概念。 <code>new ListNode()</code> 是真实存在的一个节点，<code>head = new ListNode()</code> 相当于 <code>head</code> 指针指向了一个真实的节点，<code>node = head</code> 相当于 <code>node</code> 和 <code>head</code> 同时指向了这个真实的节点。</p><h3 id="二、203-移除链表元素"><a href="#二、203-移除链表元素" class="headerlink" title="二、203 移除链表元素"></a>二、203 移除链表元素</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回新的头节点。</p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>第一种操作：直接使用原来的链表来进行移除。移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点（<code>head = head -&gt; next</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123; </span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class="line">            head = head.next;    <span class="comment">// 删除头结点</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>)&#123;      <span class="comment">//注意这里不是 if</span></span><br><span class="line">            <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.val == val)&#123;</span><br><span class="line">                current.next = current.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以设置一个虚拟头结点，这样原链表的所有节点就都可以按照统一的方式进行移除了。最后呢在 return 头结点的时候，<code>return dummyNode-&gt;next;</code>， 这才是新的头结点。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营03.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);    <span class="comment">// 设置一个虚拟头结点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">previous</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.val == val)&#123;</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                previous = current;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、707-设计链表"><a href="#三、707-设计链表" class="headerlink" title="三、707 设计链表"></a>三、707 设计链表</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 <code>0-index</code> 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code> 的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目设计链表的五个接口，覆盖了链表的常见操作：</p><ul><li>获取链表第 <code>index</code> 个节点的数值，注意 index 是从 0 开始的，第 0 个节点就是头结点。</li><li>在链表的最前面插入一个节点，等价于在第 0 个元素前添加。</li><li>在链表的最后面插入一个节点，等价于在 <code>(末尾+1)</code> 个元素前添加。</li><li>在链表第 <code>index</code> 个节点前面插入一个节点，例如 <code>index</code> 为 0，那么新插入的节点为链表的新头节点。如果 <code>index</code> 等于链表的长度，则说明是新插入的节点为链表的尾结点。如果 <code>index</code> 大于链表的长度，则返回空。</li><li>删除链表的第 <code>index</code> 个节点</li></ul><p>可以设置一个虚拟头结点再进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;    </span><br><span class="line">    ListNode head;    <span class="comment">//虚拟头结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;      <span class="comment">//初始化链表</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;    <span class="comment">//包含一个虚拟头节点，所以查找第 index+1 个节点</span></span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size, val);      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;    <span class="comment">//找到要插入节点的前驱</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充（双链表）"><a href="#补充（双链表）" class="headerlink" title="补充（双链表）"></a>补充（双链表）</h4><p>如果本题目是双链表进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;  </span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head,tail;    <span class="comment">//记录链表的虚拟头结点和尾结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//这一步非常关键，否则在加入头结点的操作中会出现null.next的错误！！！</span></span><br><span class="line">        head.next=tail;</span><br><span class="line">        tail.prev=head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size / <span class="number">2</span>)&#123;    <span class="comment">//判断是哪一边遍历时间更短</span></span><br><span class="line">            <span class="comment">//tail开始</span></span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; size-index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.head;    <span class="comment">//找到前驱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);    <span class="comment">//新建结点</span></span><br><span class="line">        newNode.next = pre.next;</span><br><span class="line">        pre.next.prev = newNode;</span><br><span class="line">        newNode.prev = pre;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;    <span class="comment">//删除操作</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next.next.prev = pre;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、206-反转链表"><a href="#四、206-反转链表" class="headerlink" title="四、206 反转链表"></a>四、206 反转链表</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>如果再定义一个新的链表，实现链表元素的反转，其实这是对内存空间的浪费。其实只需要改变链表的 <code>next</code> 指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营04.png" alt></p><p>首先定义一个 <code>cur</code> 指针，指向头结点，再定义一个 <code>pre</code> 指针，初始化为 <code>null</code>。然后就开始反转，首先要把 <code>cur-&gt;next</code> 节点用 <code>tmp</code> 指针保存一下，也就是保存一下这个节点。接下来要改变 <code>cur-&gt;next</code> 的指向，将 <code>cur-&gt;next</code> 指向 <code>pre</code> ，即反转第一个节点。接下来循环遍历继续移动 <code>pre</code> 和 <code>cur</code> 指针。最后，<code>cur</code> 指针已经指向了 <code>null</code>，循环结束，链表也反转完毕了。 此时，<code>pre</code> 指针就指向了新的头结点，我们 <code>return pre</code> 指针就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = curr.next;    <span class="comment">// 保存下一个节点</span></span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用递归法解此题，递归法相对抽象一些，但是其实和双指针法是一样的逻辑，同样是当 <code>cur</code> 为空的时候循环结束，不断将 <code>cur</code> 指向 <code>pre</code> 的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;<span class="comment">// 先保存下一个节点</span></span><br><span class="line">        cur.next = prev;<span class="comment">// 反转</span></span><br><span class="line">        <span class="comment">// 更新prev、cur位置</span></span><br><span class="line">        <span class="comment">// prev = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从后向前递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头节点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的 head 节点为尾节点，next 需要指向 NULL</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第三天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
</feed>
