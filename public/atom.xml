<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bezhuang&#39;s Blog</title>
  
  <subtitle>庄之皓的博客网站</subtitle>
  <link href="http://blog.zhuangzhihao.top/atom.xml" rel="self"/>
  
  <link href="http://blog.zhuangzhihao.top/"/>
  <updated>2023-01-09T03:03:10.098Z</updated>
  <id>http://blog.zhuangzhihao.top/</id>
  
  <author>
    <name>Bezhuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码随想录算法训练营第十三天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9/</id>
    <published>2023-01-08T16:00:00.000Z</published>
    <updated>2023-01-09T03:03:10.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十三天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、239-滑动窗口最大值"><a href="#一、239-滑动窗口最大值" class="headerlink" title="一、239 滑动窗口最大值"></a>一、239 滑动窗口最大值</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。返回滑动窗口中的最大值 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这是使用单调队列的经典题目。此时我们需要一个队列，这个队列呢，放进去窗口里的元素，然后随着窗口的移动，队列也一进一出，每次移动之后，队列告诉我们里面的最大值是什么。每次窗口移动的时候，调用 <code>queue.pop()</code>（滑动窗口中移除元素的数值），<code>queue.push()</code>（滑动窗口添加元素的数值），然后 <code>queue.front()</code> 就返回我们要的最大值。</p><p>遍历数组，保存当前窗口最大值的数组位置在双向队列中，保证队列中数组位置的数值按从大到小排序，并用 <code>L</code>，<code>R</code> 来标记窗口的左边界和右边界。队列中保存的并不是真的数，而是该数值对应的数组下标位置，并且数组中的数要从大到小排序。如果当前遍历的数比队尾的值大，则需要弹出队尾值，直到队列重新满足从大到小的要求。刚开始遍历时，<code>L</code> 和 <code>R</code> 都为 0，有一个形成窗口的过程，此过程没有最大值，<code>L</code> 不动，<code>R</code> 向右移。当窗口大小形成时，<code>L</code> 和 <code>R</code> 一起向右移，每次移动时，判断队首的值的数组下标是否在 <code>[L,R]</code> 中，如果不在则需要弹出队首的值，当前窗口的最大值即为队首的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span> nums; </span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty() &amp;&amp; nums[queue.peekLast()] &lt;= nums[i])&#123;</span><br><span class="line">                queue.pollLast();    <span class="comment">// 保证从大到小，如果前面数小则需要依次弹出，直至满足要求</span></span><br><span class="line">            &#125;</span><br><span class="line">            queue.addLast(i);        <span class="comment">// 添加当前值对应的数组下标</span></span><br><span class="line">            <span class="keyword">if</span>(queue.peek() &lt;= i-k)&#123;</span><br><span class="line">                queue.poll();      <span class="comment">// 判断当前队列中队首的值是否有效</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &gt;= k)&#123;</span><br><span class="line">                result[i+<span class="number">1</span>-k] = nums[queue.peek()];      <span class="comment">// 当窗口长度为k时，保存当前窗口中最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、347-前-K-个高频元素"><a href="#二、347-前-K-个高频元素" class="headerlink" title="二、347 前 K 个高频元素"></a>二、347 前 K 个高频元素</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按任意顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">输出: [1,2]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目主要涉及到如下三块内容：要统计元素出现频率、对频率排序、找出前 K 个高频元素。</p><p>统计元素出现的频率，这一类的问题可以使用 <code>map</code> 来进行统计。然后是对频率进行排序，这里我们可以使用一种容器适配器就是堆，堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Comparator接口说明:</span></span><br><span class="line"><span class="comment"> * 返回负数，形参中第一个参数排在前面；返回正数，形参中第二个参数排在前面</span></span><br><span class="line"><span class="comment"> * 对于队列：排在前面意味着往队头靠</span></span><br><span class="line"><span class="comment"> * 对于堆（使用PriorityQueue实现）：从队头到队尾按从小到大排就是最小堆（小顶堆），</span></span><br><span class="line"><span class="comment"> *                                从队头到队尾按从大到小排就是最大堆（大顶堆）---&gt;队头元素相当于堆的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 解法1：基于大顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent1(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    <span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">// 出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2)-&gt;pair2[<span class="number">1</span>]-pair1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;    <span class="comment">// 大顶堆需要对所有元素进行排序</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;    <span class="comment">// 依次从队头弹出k个,就是出现频率前k高的元素</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解法2：基于小顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent2(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();    <span class="comment">// key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">// 出现次数按从队头到队尾的顺序是从小到大排,出现次数最低的在队头(相当于小顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1,pair2)-&gt;pair1[<span class="number">1</span>]-pair2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;    <span class="comment">// 小顶堆只需要维持k个元素有序</span></span><br><span class="line">            <span class="keyword">if</span>(pq.size()&lt;k)&#123;      <span class="comment">// 小顶堆元素个数小于k个时直接加</span></span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.getValue()&gt;pq.peek()[<span class="number">1</span>])&#123;    <span class="comment">// 当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">                    pq.poll();    <span class="comment">// 弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;      <span class="comment">// 依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、栈与队列的总结"><a href="#三、栈与队列的总结" class="headerlink" title="三、栈与队列的总结"></a>三、栈与队列的总结</h3><p>栈的应用在对称性问题上，如括号匹配问题、字符串去重问题、逆波兰表达式问题。</p><p>单调队列和优先级队列。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十三天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 路由管理</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/</id>
    <published>2023-01-07T16:00:00.000Z</published>
    <updated>2023-01-08T10:35:06.278Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第十一章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、React-Router-简介"><a href="#一、React-Router-简介" class="headerlink" title="一、React Router 简介"></a>一、React Router 简介</h3><p><a href="https://reactrouter.com/en/main">React Router</a> 是为 React 提供路由功能的第三方库，通过一些 React 组件实现动态的跳转，并根据不同的路由加载不同的组件，是完整的 React 动态路由解决方案。</p><p>因为 <code>React-router-dom@6</code> 对之前的版本有一些变动，先不研究，使用 <code>React-router-dom@5</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall react-router-dom</span><br><span class="line">npm install react-router-dom@5</span><br></pre></td></tr></table></figure><p>打开 <code>App.js</code>，从 <code>react-router-dom</code> 中导入 <code>BrowserRouter</code>，<code>BrowserRouter</code> 实现了 HTML5 中的 <code>History API</code>。路由定义在 <code>Router</code> 组件的内部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatApp</span> <span class="keyword">from</span> <span class="string">&quot;components/ChatApp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">&quot;theme&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatApp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>其他高级用法参见<a href="https://react-guide.github.io/react-router-cn/index.html">中文文档</a>。</p><h3 id="二、配置导航路由"><a href="#二、配置导航路由" class="headerlink" title="二、配置导航路由"></a>二、配置导航路由</h3><p>编辑 <code>src/components/ChatApp/index.js</code> 文件，使用 <code>path</code> 匹配路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledChatApp, &#123; Nav, Sidebar, Drawer, Content &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import NavBar from <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line">import MessageList from <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line">import Conversation from <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line">import Profile from <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line">import &#123; Route, Switch &#125; from <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">import ContactList from <span class="string">&quot;components/ContactList&quot;</span>;</span><br><span class="line">import FileList from <span class="string">&quot;components/FileList&quot;</span>;</span><br><span class="line">import NoteList from <span class="string">&quot;components/NoteList&quot;</span>;</span><br><span class="line">import EditProfile from <span class="string">&quot;components/EditProfile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ChatApp(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledChatApp &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Nav&gt;</span><br><span class="line">        &lt;NavBar /&gt;</span><br><span class="line">      &lt;/Nav&gt;</span><br><span class="line">      &lt;Sidebar&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;MessageList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/contacts&quot;</span>&gt;</span><br><span class="line">            &lt;ContactList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/files&quot;</span>&gt;</span><br><span class="line">            &lt;FileList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/notes&quot;</span>&gt;</span><br><span class="line">            &lt;NoteList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;EditProfile /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Sidebar&gt;</span><br><span class="line">      &lt;Content&gt;</span><br><span class="line">        &lt;Conversation /&gt;</span><br><span class="line">      &lt;/Content&gt;</span><br><span class="line">      &lt;Drawer&gt;</span><br><span class="line">        &lt;Profile /&gt;</span><br><span class="line">      &lt;/Drawer&gt;</span><br><span class="line">    &lt;/StyledChatApp&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChatApp.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ChatApp;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NavBar/index.js</code>给 <code>MenuItem</code> 添加 <code>to</code> 属性，用于接收路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledNavBar</span>, &#123; <span class="title class_">StyledMenuItem</span>, <span class="title class_">MenuIcon</span>, <span class="title class_">MenuItems</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Badge</span> <span class="keyword">from</span> <span class="string">&quot;components/Badge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> profileImage <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  faCommentDots,</span><br><span class="line">  faUsers,</span><br><span class="line">  faFolder,</span><br><span class="line">  faStickyNote,</span><br><span class="line">  faEllipsisH,</span><br><span class="line">  faCog,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/free-solid-svg-icons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, useLocation, matchPath &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NavBar</span>(<span class="params">&#123; ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledNavBar</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">src</span>=<span class="string">&#123;profileImage&#125;</span> <span class="attr">status</span>=<span class="string">&quot;online&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MenuItems</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">showBadge</span> <span class="attr">icon</span>=<span class="string">&#123;faCommentDots&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/contacts&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faUsers&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/files&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faFolder&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">to</span>=<span class="string">&quot;/notes&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;faStickyNote&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span> <span class="attr">icon</span>=<span class="string">&#123;faEllipsisH&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MenuItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;faCog&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">align-self:</span> <span class="attr">end</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">MenuItems</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledNavBar</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MenuItem</span>(<span class="params">&#123; to, icon, showBadge, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loc = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">const</span> active = !!<span class="title function_">matchPath</span>(loc.<span class="property">pathname</span>, &#123;</span><br><span class="line">    <span class="attr">path</span>: to,</span><br><span class="line">    <span class="attr">exact</span>: to === <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledMenuItem</span> <span class="attr">active</span>=<span class="string">&#123;active&#125;</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;to&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Badge</span> <span class="attr">show</span>=<span class="string">&#123;showBadge&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">MenuIcon</span> <span class="attr">active</span>=<span class="string">&#123;active&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;icon&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Badge</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledMenuItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">NavBar</span>.<span class="property">propTypes</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavBar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MenuItem</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NavBar/style.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/react-fontawesome&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; activeBar &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledAvatar</span>, &#123; <span class="title class_">StatusIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;components/Avatar/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledMenuItem</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  &amp; &gt; a &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    height: 74px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    display: flex;</span></span><br><span class="line"><span class="string">    align-items: center;</span></span><br><span class="line"><span class="string">    justify-content: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;activeBar()&#125;</span>;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;(&#123; active &#125;) =&gt; (active ? <span class="string">&quot;&quot;</span> : <span class="string">`&amp;::before, &amp;::after &#123;height: 0&#125;`</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &amp;:hover &#123;</span></span><br><span class="line"><span class="string">      /* 指示条动画 */</span></span><br><span class="line"><span class="string">      ::before,</span></span><br><span class="line"><span class="string">      ::after &#123;</span></span><br><span class="line"><span class="string">        height: 100%;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      /* 图标动画 */</span></span><br><span class="line"><span class="string">      svg &#123;</span></span><br><span class="line"><span class="string">        transform: scale(1.2);</span></span><br><span class="line"><span class="string">        opacity: 1;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MenuIcon</span> = <span class="title function_">styled</span>(<span class="title class_">FontAwesomeIcon</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  font-size: 24px;</span></span><br><span class="line"><span class="string">  opacity: <span class="subst">$&#123;(&#123; active &#125;) =&gt; (active ? <span class="number">1</span> : <span class="number">0.3</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  transform: scale(1);</span></span><br><span class="line"><span class="string">  transition: 0.4s;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledNavBar</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-rows: 1fr 4fr;</span></span><br><span class="line"><span class="string">  width: 100px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.darkPurple&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: 30px 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledAvatar&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    justify-self: center;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;StatusIcon&#125;</span> &#123;</span></span><br><span class="line"><span class="string">      &amp;::before &#123;</span></span><br><span class="line"><span class="string">        background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.darkPurple&#125;</span>;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MenuItems</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-rows: repeat(5, minmax(auto, 88px)) 1fr;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledNavBar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MenuIcon</span>, <span class="title class_">StyledMenuItem</span>, <span class="title class_">MenuItems</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="三、配置内容区域路由"><a href="#三、配置内容区域路由" class="headerlink" title="三、配置内容区域路由"></a>三、配置内容区域路由</h3><p>编辑 <code>src/components/ChatApp/index.js</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState &#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledChatApp, &#123; Nav, Sidebar, Drawer, Content &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import NavBar from <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line">import MessageList from <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line">import Conversation from <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line">import Profile from <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line">import &#123; Route, Switch &#125; from <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line">import ContactList from <span class="string">&quot;components/ContactList&quot;</span>;</span><br><span class="line">import FileList from <span class="string">&quot;components/FileList&quot;</span>;</span><br><span class="line">import NoteList from <span class="string">&quot;components/NoteList&quot;</span>;</span><br><span class="line">import EditProfile from <span class="string">&quot;components/EditProfile&quot;</span>;</span><br><span class="line">import Settings from <span class="string">&quot;components/Settings&quot;</span>;</span><br><span class="line">import BlockedList from <span class="string">&quot;components/BlockedList&quot;</span>;</span><br><span class="line">import VideoCall from <span class="string">&quot;components/VideoCall&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ChatApp(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  const [showDrawer, setShowDrawer] = useState(<span class="literal">false</span>);</span><br><span class="line">  const [videoCalling, setVideoCalling] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledChatApp &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Nav&gt;</span><br><span class="line">        &lt;NavBar /&gt;</span><br><span class="line">      &lt;/Nav&gt;</span><br><span class="line">      &lt;Sidebar&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;MessageList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/contacts&quot;</span>&gt;</span><br><span class="line">            &lt;ContactList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/files&quot;</span>&gt;</span><br><span class="line">            &lt;FileList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/notes&quot;</span>&gt;</span><br><span class="line">            &lt;NoteList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;EditProfile /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Sidebar&gt;</span><br><span class="line">      &lt;Content&gt;</span><br><span class="line">        &#123;videoCalling &amp;&amp; (</span><br><span class="line">          &lt;VideoCall onHangOffClicked=&#123;() =&gt; setVideoCalling(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/settings&quot;</span>&gt;</span><br><span class="line">            &lt;Settings /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/settings/blocked&quot;</span>&gt;</span><br><span class="line">            &lt;BlockedList /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">            &lt;Conversation</span><br><span class="line">              onAvatarClick=&#123;() =&gt; setShowDrawer(<span class="literal">true</span>)&#125;</span><br><span class="line">              onVideoClicked=&#123;() =&gt; setVideoCalling(<span class="literal">true</span>)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/Route&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Content&gt;</span><br><span class="line">      &lt;Drawer show=&#123;showDrawer&#125;&gt;</span><br><span class="line">        &lt;Profile onCloseClick=&#123;() =&gt; setShowDrawer(<span class="literal">false</span>)&#125; /&gt;</span><br><span class="line">      &lt;/Drawer&gt;</span><br><span class="line">    &lt;/StyledChatApp&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChatApp.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ChatApp;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/Settings/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSettings</span>, &#123;</span><br><span class="line">  <span class="title class_">StyledSettingsItem</span>,</span><br><span class="line">  <span class="title class_">SettingsItemControl</span>,</span><br><span class="line">  <span class="title class_">StyledSettingsGroup</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuRight</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuRight.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Switch</span> <span class="keyword">from</span> <span class="string">&quot;components/Switch&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Settings</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettings</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;隐私设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;添加好友时需要验证&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;推荐通讯录好友&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">description</span>=<span class="string">&quot;上传的通讯录只用来匹配好友列表，本应用不会记录和发送任何信息给其它机构或&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;只能通过手机号找到我&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;通知设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;新消息通知&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;语音和视频通话提醒&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;显示通知详情&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;声音&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">settings</span>/<span class="attr">blocked</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">text-decoration:</span> <span class="attr">none</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">color:</span> <span class="attr">inherit</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;查看已静音的好友列表&quot;</span> <span class="attr">type</span>=<span class="string">&quot;menu&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettings</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SettingsGroup</span>(<span class="params">&#123; groupName, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">paddingBottom:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;groupName&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SettingsItem</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  type = <span class="string">&quot;switch&quot;</span>,</span></span><br><span class="line"><span class="params">  label,</span></span><br><span class="line"><span class="params">  description,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsItem</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;switch&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;menu&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuRight&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;description &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">4px</span> <span class="attr">0</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;description&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Seperator</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> &quot;<span class="attr">8px</span>&quot;, <span class="attr">marginBottom:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Settings</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Settings</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/BlockedList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledBlockedList</span>, &#123;</span><br><span class="line">  <span class="title class_">SettingsMenu</span>,</span><br><span class="line">  <span class="title class_">ClosableAvatar</span>,</span><br><span class="line">  <span class="title class_">BlockedAvatar</span>,</span><br><span class="line">  <span class="title class_">CloseIcon</span>,</span><br><span class="line">  <span class="title class_">BlockedName</span>,</span><br><span class="line">  <span class="title class_">FriendList</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuLeft</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuLeft.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> closeCircle &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/closeCircle.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BlockedList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="title function_">useHistory</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledBlockedList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuLeft&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cursor:</span> <span class="attr">pointer</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> history.goBack()&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span>&gt;</span>已屏蔽的好友<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;new Array(8).fill(0).map((_, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ClosableAvatar</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedAvatar</span> <span class="attr">size</span>=<span class="string">&quot;105px&quot;</span> <span class="attr">src</span>=<span class="string">&#123;face&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">CloseIcon</span> <span class="attr">width</span>=<span class="string">&#123;46&#125;</span> <span class="attr">height</span>=<span class="string">&#123;51&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;closeCircle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedName</span>&gt;</span>李浩<span class="tag">&lt;/<span class="name">BlockedName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ClosableAvatar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledBlockedList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">BlockedList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BlockedList</span>;</span><br></pre></td></tr></table></figure><p>修改 <code>src/components/ChatApp/style.js</code>：：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nav</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex-shrink: 0;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sidebar</span> = styled.<span class="property">aside</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 448px;</span></span><br><span class="line"><span class="string">  min-width: 344px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  flex: 1;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.grediantGray&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Content</span> = styled.<span class="property">main</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex: 2;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Drawer</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 310px;</span></span><br><span class="line"><span class="string">  width: 0;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; show &#125;) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    show &amp;&amp;</span></span></span><br><span class="line"><span class="subst"><span class="string">    css`<span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">      <span class="attribute">width</span>: <span class="number">310px</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="subst"><span class="string">    `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledChatApp</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledChatApp</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Nav</span>, <span class="title class_">Sidebar</span>, <span class="title class_">Content</span>, <span class="title class_">Drawer</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Conversation/index.js</code> 添加 <code>onAvatarClick</code> 和 <code>onVideoClicked</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Conversation</span>(<span class="params">&#123; onAvatarClick, onVideoClicked, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledConversation</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TitleBar</span> <span class="attr">onAvatarClick</span>=<span class="string">&#123;onAvatarClick&#125;</span> <span class="attr">onVideoClicked</span>=<span class="string">&#123;onVideoClicked&#125;/</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在 <code>src/components/TitleBar/index.js</code> 添加 <code>onAvatarClick</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TitleBar</span>(<span class="params">&#123; onAvatarClick, onVideoClicked, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;StyledTitleBar &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Avatar onClick=&#123;onAvatarClick&#125; status=&quot;offline&quot; src=&#123;face&#125; /&gt;</span><br><span class="line">      &lt;Title&gt;</span><br><span class="line">     。。。   </span><br><span class="line">&lt;Actions&gt;</span><br><span class="line">&lt;Icon opacity=&#123;0.3&#125; icon=&#123;Call&#125; onVideoClicked=&#123;onVideoClicked&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第十一章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十一天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/</id>
    <published>2023-01-06T16:00:00.000Z</published>
    <updated>2023-01-07T03:45:01.866Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十一天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、20-有效的括号"><a href="#一、20-有效的括号" class="headerlink" title="一、20 有效的括号"></a>一、20 有效的括号</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>由于栈结构的特殊性，非常适合做对称匹配类的题目。括号匹配是使用栈解决的经典问题。在匹配左括号的时候，右括号先入栈，就只需要比较当前元素和栈顶相不相等就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">// 如果是右括号判断是否和栈顶元素匹配</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();    <span class="comment">// 最后判断栈中元素是否一一匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、1047-删除字符串中的所有相邻重复项"><a href="#二、1047-删除字符串中的所有相邻重复项" class="headerlink" title="二、1047 删除字符串中的所有相邻重复项"></a>二、1047 删除字符串中的所有相邻重复项</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给出由小写字母组成的字符串 <code>S</code>，重复项删除操作会选择两个相邻且相同的字母，并删除它们。在 S 上反复执行重复项删除操作，直到无法继续删除。在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>用栈来存放遍历过的元素，当遍历当前的这个元素的时候，去栈里看一下我们是不是遍历过相同数值的相邻元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deque.peek() != <span class="literal">null</span> &amp;&amp; deque.peek() == s.charAt(i)) &#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                deque.push(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            str = deque.pop() + str;    <span class="comment">// 注意 pop 出的元素在前</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题还可以拿字符串直接作为栈，用<code>StringBuilder</code> 来修改字符串，速度更快，也省去了栈还要转为字符串的操作。</p><p>本题还可以双指针法，直接用 <code>fast</code> 指针覆盖 <code>slow</code> 指针的值，遇到前后相同值的就跳过，即 <code>slow</code> 指针后退一步，下次循环就可以直接被覆盖掉了。</p><p>编程语言的一些功能实现也会使用栈结构，实现函数递归调用就需要栈。递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>但是在企业项目开发中，尽量不要使用递归。在项目比较大的时候，由于参数多，全局变量等等，使用递归很容易判断不充分 return 的条件，非常容易无限递归（或者递归层级过深），造成栈溢出错误。</p><h3 id="三、150-逆波兰表达式求值"><a href="#三、150-逆波兰表达式求值" class="headerlink" title="三、150 逆波兰表达式求值"></a>三、150 逆波兰表达式求值</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/逆波兰式/128437">逆波兰表示法</a> 表示的算术表达式。请你计算该表达式。返回一个表示表达式值的整数。</p><ul><li>有效的算符为 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code> 和 <code>&#39;/&#39;</code> 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是向零截断 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 32 位 整数表示。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>其实逆波兰表达式相当于是二叉树中的后序遍历。 可以把运算符作为中间节点，按照后序遍历的规则（左右中）画出一个二叉树。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营16.png" alt></p><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，图示即便写成 <code>1 2 + 3 4 + *</code> 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isNumber(token)) &#123;</span><br><span class="line">                stack.push(Integer.parseInt(token));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();    <span class="comment">// 先 num2 再 num1</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        stack.push(num1 + num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        stack.push(num1 - num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        stack.push(num1 * num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        stack.push(num1 / num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(<span class="string">&quot;+&quot;</span>.equals(token) || <span class="string">&quot;-&quot;</span>.equals(token) || <span class="string">&quot;*&quot;</span>.equals(token) || <span class="string">&quot;/&quot;</span>.equals(token));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十一天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%8D%81%E5%A4%A9/</id>
    <published>2023-01-05T16:00:00.000Z</published>
    <updated>2023-01-07T02:43:42.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、栈和队列基本原理"><a href="#一、栈和队列基本原理" class="headerlink" title="一、栈和队列基本原理"></a>一、栈和队列基本原理</h3><p>栈是先进后出（LIFO），队列是先进先出（FIFO）。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营15.png" alt></p><p>Java 使用栈时推荐 Deque 双端队列而不是 Stack，因为 Stack 继承自 Vector，破坏了类的封装性；其次，Stack 是类，Deque 是接口，接口可以屏蔽实现细节。<code>ArrayDeque</code> 会比 <code>LinkedList</code> 在除了删除元素这一点外会快一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; queue1 = <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>&lt;&gt;();</span><br><span class="line">Deque&lt;Integer&gt; queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="二、232-用栈实现队列"><a href="#二、232-用栈实现队列" class="headerlink" title="二、232 用栈实现队列"></a>二、232 用栈实现队列</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><p>你只能使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>将一个栈当作输入栈，用于压入 push 传入的数据；另一个栈当作输出栈，用于 pop 和 peek 操作。每次 pop 或 peek 时，若输出栈为空则将输入栈的全部数据依次弹出并压入输出栈，这样输出栈从栈顶往栈底的顺序就是队列从队首往队尾的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stackIn;    <span class="comment">// 负责进栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stackOut;    <span class="comment">// 负责出栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();    </span><br><span class="line">        stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stackIn.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;    </span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        dumpstackIn();</span><br><span class="line">        <span class="keyword">return</span> stackOut.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 stackOut 为空，那么将 stackIn 中的元素全部放到 stackOut 中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dumpstackIn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackOut.isEmpty()) <span class="keyword">return</span>; </span><br><span class="line">        <span class="keyword">while</span> (!stackIn.isEmpty())&#123;</span><br><span class="line">                stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>peek()</code> 的实现，直接复用了 <code>pop()</code>， 要不然，对 stackOut 判空的逻辑又要重写一遍。因此，一定要懂得复用，功能相近的函数要抽象出来。</p><h3 id="三、225-用队列实现栈"><a href="#三、225-用队列实现栈" class="headerlink" title="三、225 用队列实现栈"></a>三、225 用队列实现栈</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><p>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用一个队列实现栈的操作。入栈操作时，首先获得入栈前的元素个数 n，然后将元素入队到队列，再将队列中的前 n 个元素（即除了新入栈的元素之外的全部元素）依次出队并入队到队列，此时队列的前端的元素即为新入栈的元素，且队列的前端和后端分别对应栈顶和栈底。</p><p>由于每次入栈操作都确保队列的前端元素为栈顶元素，因此出栈操作和获得栈顶元素操作都可以简单实现。出栈操作只需要移除队列的前端元素并返回即可，获得栈顶元素操作只需要获得队列的前端元素并返回即可（不移除元素）。</p><p>由于队列用于存储栈内的元素，判断栈是否为空时，只需要判断队列是否为空即可。</p><p><img src="https://assets.leetcode-cn.com/solution-static/225/225_fig2.gif" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第十天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第九天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B9%9D%E5%A4%A9/</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-01-05T09:49:13.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第九天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、KMP-算法"><a href="#一、KMP-算法" class="headerlink" title="一、KMP 算法"></a>一、KMP 算法</h3><p>Knuth-Morris-Pratt 算法，简称 KMP 算法，由 Donald Knuth、James H. Morris 和 Vaughan Pratt 三人于 1977 年联合发表，主要应用在字符串匹配上。</p><p>KMP 算法的核心为前缀函数，记作 $π(i)$，其定义如下：对于长度为 m 的字符串 s，其前缀函数 $π(i)（0≤i&lt;m）$ 表示 s 的子串 $s[0:i]$ 的最长的相等的真前缀与真后缀的长度。特别地，如果不存在符合条件的前后缀，那么 $π(i)=0$。其中真前缀与真后缀的定义为不等于自身的的前缀与后缀。例如，字符串 aabaaab 的前缀函数值依次为 0, 1, 0, 1, 2, 2, 3。</p><p>一刷先不看 KMP，留空等二刷补</p><p>28.实现 strStr() </p><p>459.重复的子字符串</p><h3 id="四、字符串和双指针总结"><a href="#四、字符串和双指针总结" class="headerlink" title="四、字符串和双指针总结"></a>四、字符串和双指针总结</h3><p>双指针法在数组，链表和字符串中很常用。</p><p>原地移除数组上的元素，由于数组上的元素不能真正的删除，只能覆盖，双指针法通过两个指针在一个 for 循环下完成两个 for 循环的工作。</p><p>其实很多数组（字符串）填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。在删除冗余空格的过程中，如果不注意代码效率，很容易写成了 O(n^2) 的时间复杂度。其实使用双指针法 O(n) 就可以搞定。</p><p>使用双指针法来翻转链表，只需要改变链表的 next 指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第九天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第八天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AB%E5%A4%A9/</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-01-04T11:45:35.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第八天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h3><p>在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。String 类是不可变类，即一旦一个 String 对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p>Java 提供了两个可变字符串类 StringBuffer 和 StringBuilder，即字符串缓冲区。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营14.png" alt></p><p>String 是 Java 中基础且重要的类，被声明为 final class，是不可变字符串。因为它的不可变性，所以拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。</p><p>StringBuffer 就是为了解决大量拼接字符串时产生很多中间对象问题而提供的一个类。它提供了 append 和 add 方法，可以将字符串添加到已有序列的末尾或指定位置，它的本质是一个线程安全的可修改的字符序列。</p><p>在很多情况下我们的字符串拼接操作不需要线程安全，所以 JDK1.5 发布了 StringBuilder，它和 StringBuffer 本质上没什么区别，就是去掉了保证线程安全的那部分，减少了开销。</p><p>一般情况下，速度从快到慢为 StringBuilder &gt; StringBuffer &gt; String，当然这是相对的，不是绝对的。</p><p>操作少量的数据时使用 String。单线程操作大量数据时使用 StringBuilder。多线程操作大量数据时使用 StringBuffer。</p><h3 id="二、344-反转字符串"><a href="#二、344-反转字符串" class="headerlink" title="二、344 反转字符串"></a>二、344 反转字符串</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>双指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充知识点：<code>swap</code> 除了交换数值，也可以是通过位运算实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[left] ^= s[right];  <span class="comment">// 构造 a ^ b 的结果，并放在 a 中</span></span><br><span class="line">s[right] ^= s[left];  <span class="comment">// 将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b</span></span><br><span class="line">s[left] ^= s[right];  <span class="comment">// a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换</span></span><br></pre></td></tr></table></figure><h3 id="三、541-反转字符串-II"><a href="#三、541-反转字符串-II" class="headerlink" title="三、541 反转字符串 II"></a>三、541 反转字符串 II</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>在遍历字符串的过程中，只要让 <code>i += (2 * k)</code>，<code>i</code> 每次移动 <code>2 * k</code> 就可以了，然后判断是否需要有反转的区间。每隔 <code>2k</code> 个反转前 <code>k</code> 个，尾数不够 <code>k</code> 个时候全部反转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ch = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ch.length; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Math.min(ch.length - <span class="number">1</span>, left + k - <span class="number">1</span>);    <span class="comment">// 判断尾数够不够k个来决定end指针的位置</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> ch[left];</span><br><span class="line">                ch[left++] = ch[right];</span><br><span class="line">                ch[right--] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、剑指-Offer-05-替换空格"><a href="#四、剑指-Offer-05-替换空格" class="headerlink" title="四、剑指 Offer 05 替换空格"></a>四、剑指 Offer 05 替换空格</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成 <code>%20</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>对于很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。这么做有两个好处：首先是不用申请新数组；而且从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;    <span class="comment">// 等同于if (&quot; &quot;.equals(String.valueOf(s.charAt(i))))&#123;&#125;</span></span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：对于所有线性数据结构的填充或者删除，后序处理都会高效的多。</p><h3 id="五、151-翻转字符串里的单词"><a href="#五、151-翻转字符串里的单词" class="headerlink" title="五、151 翻转字符串里的单词"></a>五、151 翻转字符串里的单词</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串 <code>s</code> ，请你反转字符串中单词的顺序。单词是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的单词分隔开。返回单词顺序颠倒且单词之间用单个空格连接的结果字符串。</p><p>注意：输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>分部解题：去除首尾以及中间多余空格，再将整个字符串反转，再将每个单词反转回来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> removeSpace(s);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">removeSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(start) == <span class="string">&#x27; &#x27;</span>) start++;    <span class="comment">// 去除开头空格</span></span><br><span class="line">        <span class="keyword">while</span> (s.charAt(end) == <span class="string">&#x27; &#x27;</span>) end--;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(start);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="number">1</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reverseEachWord</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sb.length();</span><br><span class="line">        <span class="keyword">while</span> (start &lt; n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (end &lt; n &amp;&amp; sb.charAt(end) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            reverseString(sb, start, end - <span class="number">1</span>);</span><br><span class="line">            start = end + <span class="number">1</span>;</span><br><span class="line">            end = start + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、剑指-Offer-58-II-左旋转字符串"><a href="#六、剑指-Offer-58-II-左旋转字符串" class="headerlink" title="六、剑指 Offer 58 - II 左旋转字符串"></a>六、剑指 Offer 58 - II 左旋转字符串</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串 <code>&quot;abcdefg&quot;</code> 和数字 2，该函数将返回左旋转两位得到的结果 <code>&quot;cdefgab&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>经典题目，反转区间为前 n 的子串，反转区间为 n 到末尾的子串，最后反转整个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, n, len - <span class="number">1</span>);</span><br><span class="line">        reverseString(sb, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder <span class="title function_">reverseString</span><span class="params">(StringBuilder sb, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start++, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end--, temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第八天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第七天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%83%E5%A4%A9/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-01-03T09:52:58.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第七天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、454-四数相加-II"><a href="#一、454-四数相加-II" class="headerlink" title="一、454 四数相加 II"></a>一、454 四数相加 II</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目是四个独立的数组，只要找到 <code>A[i] + B[j] + C[k] + D[l] = 0</code> 就可以，不用考虑有重复的四个元素相加等于 0 的情况。使用哈希法的 map 可以巧妙解决的问题，提高程序执行效率，降低时间复杂度，当然使用哈希法会提高空间复杂度，但一般来说我们都是舍空间换时间。</p><p>先统计前两个数组中的元素之和，同时统计出现的次数，放入 map。再统计剩余的两个元素的和，在 map 中找是否存在相加为 0 的情况，同时记录次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2) &#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(temp)) &#123;</span><br><span class="line">                    map.put(temp, map.get(temp) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(temp, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums3) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums4) &#123;</span><br><span class="line">                temp = i + j;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(<span class="number">0</span> - temp)) &#123;</span><br><span class="line">                    result += map.get(<span class="number">0</span> - temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、383-赎金信"><a href="#二、383-赎金信" class="headerlink" title="二、383 赎金信"></a>二、383 赎金信</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。<code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目和<a href="https://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9#%E4%BA%8C%E3%80%81242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D"> 242 有效的字母异位词</a>很像，有效的字母异位词相当于求字符串 a 和 b 是否可以相互组成 ，而这道题目是求字符串 a 能否组成字符串 b，而不用管字符串 b 能不能组成字符串 a。</p><p>这里需要注意两点。第一点为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思说明杂志里面的字母不可重复使用。第二点你可以假设两个字符串均只含有小写字母，说明只有小写字母，那可以采用空间换取时间的哈希策略， 用一个长度为 26 的数组还记录 <code>magazine</code> 里字母出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : magazine.toCharArray()) &#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            record[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果数组中存在负数，说明ransomNote字符串总存在magazine中没有的字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本题的情况下，使用 map 的空间消耗要比数组大一些的，因为 map 要维护红黑树或者哈希表，而且还要做哈希函数，是更费时的。所以对于数据量大的字符串，使用数组更加简单直接有效。</p><h3 id="三、15-三数之和"><a href="#三、15-三数之和" class="headerlink" title="三、15 三数之和"></a>三、15 三数之和</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。注意：答案中不可以包含重复的三元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>找出 <code>a + b + c = 0</code>，即 <code>a = nums[i], b = nums[j], c = -(a + b)</code>，可以使用哈希法来确定 <code>0-(a+b)</code> 是否在数组里出现过，但是题目中说的不可以包含重复的三元组，需要再去重，这样很容易超时。</p><p>这道题目使用双指针法要比哈希法高效一些。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营12.gif" alt></p><p>首先将 <code>nums</code> 数组排序，然后有一层 <code>for</code> 循环，<code>i</code> 从下标 0 的地方开始，同时定一个下标 <code>left</code> 定义在 <code>i+1</code> 的位置上，定义下标 <code>right</code> 在数组结尾的位置上。数组中 <code>a = nums[i]，b = nums[left]，c = nums[right]</code>，要使得 <code>a + b + c = 0</code>。</p><p>如果 <code>nums[i] + nums[left] + nums[right] &gt; 0</code> 就说明此时三数之和大了，因为数组是经过排序后的，所以 <code>right</code> 下标就应该向左移动，这样才能让三数之和小一些。</p><p>如果 <code>nums[i] + nums[left] + nums[right] &lt; 0</code> 说明此时三数之和小了，<code>left</code> 就向右移动，才能让三数之和大一些，直到 <code>left</code>与 <code>right</code> 相遇为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;    <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;        <span class="comment">// 去重 a</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对 b 和 c 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前做过的 <a href="https://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/#%E4%BA%94%E3%80%811-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C">1 两数之和</a> 就不能用双指针法，因为要求返回的是索引下标，而双指针法一定要排序，一旦排序之后原数组的索引就被改变了。如果两数之和要求返回的是数值的话，就可以使用双指针法了。</p><h3 id="四、18-四数之和"><a href="#四、18-四数之和" class="headerlink" title="四、18 四数之和"></a>四、18 四数之和</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且不重复的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 互不相同</li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按任意顺序返回答案 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题思路整体和上一题 15 三数之和一样的，都是双指针法，但难在去重和剪枝。</p><p>四数之和的双指针解法是在三数之和的基础上再套一层 for 循环。<code>nums[k] + nums[i]</code> 为确定值，依然是循环内有 <code>left</code> 和 <code>right</code> 下标作为双指针，找出 <code>nums[k] + nums[i] + nums[left] + nums[right] == target</code> 的情况。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营13.png" alt></p><p>需要注意的细节：因为这个题目时自定义 <code>target</code>，所以不能像三数之和那样进行剪枝操作。<code>i</code> 进行剪枝操作的时候要将 <code>k</code> 和 <code>i</code> 看成是一个整体。<code>i</code> 进行去重的时候，应该是 <code>i &gt; k + 1</code>。因为数字之和比较大，所以数据类型应该选择 <code>long</code>，而且要对和进行强转，因为 Java 中字面量默认时 <code>int</code> 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// nums[i] &gt; target 直接返回, 剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123;    <span class="comment">// 对nums[i]去重</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j - <span class="number">1</span>] == nums[j]) &#123;  <span class="comment">// 对nums[j]去重</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">    <span class="comment">// nums[k] + nums[i] + nums[left] + nums[right] &gt; target int会溢出</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                        <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、哈希表总结"><a href="#五、哈希表总结" class="headerlink" title="五、哈希表总结"></a>五、哈希表总结</h3><ol><li>数组作为哈希表：数组就是简单的哈希表，但是数组的大小是受限的。如果题中要求只有小写字母，那么就可以考虑用数组。</li><li>set 作为哈希表：数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。所以此时一样的做映射的话，就可以使用 set 了。</li><li>map 作为哈希表：map 是一种<code>&lt;key, value&gt;</code>的结构，如果不仅要判断 X 是否存在而且还要记录 X 的下标位置，可以用 <code>key</code> 保存数值，用 <code>value</code> 在保存数值所在的下标，所以使用 <code>map</code> 最为合适。虽然 map 是万能的，但使用 map 的空间消耗要比数组大一些，因为 map 要维护红黑树或者符号表，而且还要做哈希函数的运算。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第七天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第六天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%85%AD%E5%A4%A9/</id>
    <published>2023-01-01T16:00:00.000Z</published>
    <updated>2023-01-02T05:35:40.390Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第六天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、哈希表理论基础"><a href="#一、哈希表理论基础" class="headerlink" title="一、哈希表理论基础"></a>一、哈希表理论基础</h3><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>哈希表（Hash table）是根据关键码的值而直接进行访问的数据结构。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营07.png" alt></p><p>哈希表一般都是用来快速判断一个元素是否出现集合里。例如要查询一个名字是否在这所学校里，要枚举的话时间复杂度是 <code>O(n)</code>，但如果使用哈希表的话， 只需要 <code>O(1)</code> 就可以做到，我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p>将学生姓名映射到哈希表上就涉及到了哈希函数（Hash function）。哈希函数通过 <code>hashCode</code> 把名字转化为数值，一般 <code>hashCode</code> 是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p>如果 <code>hashCode</code> 得到的数值大于哈希表的大小了，也就是大于 <code>tableSize</code> 了，此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营08.png" alt></p><h4 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h4><p>如果学生的数量大于哈希表的大小，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表同一个索引下标的位置，这一现象叫做哈希碰撞。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营09.png" alt></p><p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p><p>拉链法：刚刚小李和小王在索引 1 的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营10.png" alt></p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><p>使用线性探测法，一定要保证哈希表的大小 <code>tableSize</code> 大于数据规模 <code>dataSize</code>，依靠哈希表中的空位来解决碰撞问题。例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求 <code>tableSize</code> 一定要大于 <code>dataSize</code> ，要不然哈希表上就没有空置的位置来存放冲突的数据了。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营11.png" alt></p><h4 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h4><p>当我们想使用哈希法来解决问题的时候，我们一般会选择三种数据结构：数组（List）、集合（set）、映射（map）。</p><ul><li><p><code>List</code> 是有序可重复集合。</p></li><li><p><code>Set</code> 是无序不可重复集合。</p></li><li><p><code>Map</code> 是以键值对存储的集合，<code>key</code> 不能重复，<code>key</code> 底层也是以 <code>set</code> 存储的。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下，当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。</p><p>但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，<code>set</code> 或者是 <code>map</code> 来存放数据，才能实现快速的查找。</p><h3 id="二、242-有效的字母异位词"><a href="#二、242-有效的字母异位词" class="headerlink" title="二、242 有效的字母异位词"></a>二、242 有效的字母异位词</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p><p>注意：若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>暴力解法：转换成字符数组，分别排序再比较。时间复杂度：<code>O(nlogn)</code>，空间复杂度：<code>O(logn)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] ss = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] tt = t.toCharArray();</span><br><span class="line">        Arrays.sort(ss);</span><br><span class="line">        Arrays.sort(tt);</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(ss, tt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组其实就是一个简单哈希表，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串 <code>s</code> 里字符出现的次数。</p><p>定义一个数组叫做 <code>record</code> 用来上记录字符串 <code>s</code> 里字符出现的次数，大小为 26 就可以了，初始化为 0，因为字符 <code>a</code> 到字符 <code>z</code> 的 ASCII 也是 26 个连续的数值，字符 <code>a</code> 映射为下标 0，相应的字符 <code>z</code> 映射为下标 25。</p><p>再遍历字符串 <code>s</code> 的时候，只需要将 <code>s[i] - ‘a’</code> 所在的元素做 +1 操作即可，并不需要记住字符 <code>a</code> 的 ASCII，只要求出一个相对数值就可以了。这样就将字符串 <code>s</code> 中字符出现的次数，统计出来了。同样在遍历字符串 <code>t</code> 的时候，对t中出现的字符映射哈希表索引上的数值再做 <code>-1</code> 的操作。</p><p><code>record</code> 数组如果有的元素不为零 0，说明字符串 <code>s</code> 和 <code>t</code> 一定是谁多了字符或者谁少了字符，如果 <code>record</code> 数组所有元素都为零 0，说明字符串 <code>s</code> 和 <code>t</code> 是字母异位词。</p><p>时间复杂度为 <code>O(n)</code>，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为 <code>O(1)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> count : record) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、349-两个数组的交集"><a href="#三、349-两个数组的交集" class="headerlink" title="三、349 两个数组的交集"></a>三、349 两个数组的交集</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集。输出结果中的每个元素一定是唯一的。我们可以不考虑输出结果的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>使用数组来做哈希的题目，是因为题目都限制了数值的大小。而这道题目没有限制数值的大小，就无法使用数组来做哈希表了。而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import java.util.HashSet; import java.util.Set;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1 == <span class="literal">null</span> || nums1.length == <span class="number">0</span> || nums2 == <span class="literal">null</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            set1.add(i);            <span class="comment">//遍历数组1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set1.contains(i)) &#123;</span><br><span class="line">                resSet.add(i);      <span class="comment">//遍历数组2的过程中判断哈希表中是否存在该元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resSet.stream().mapToInt(x -&gt; x).toArray();    <span class="comment">//将结果几何转为数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、202-快乐数"><a href="#四、202-快乐数" class="headerlink" title="四、202 快乐数"></a>四、202 快乐数</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。如果 <code>n</code> 是快乐数就返回 <code>true</code> ；不是则返回 <code>false</code> 。</p><p>快乐数定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。</li><li>如果这个过程结果为 1，那么这个数就是快乐数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法了。所以这道题目使用哈希法，来判断这个 <code>sum</code> 是否重复出现，如果重复了就是 <code>return false</code>， 否则一直找到 <code>sum == 1</code> 为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span> &amp;&amp; !record.contains(n)) &#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;   <span class="comment">// ==1为true，!=1为false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNextNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;    <span class="comment">// 取各位置上的数字的平方和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、1-两数之和"><a href="#五、1-两数之和" class="headerlink" title="五、1 两数之和"></a>五、1 两数之和</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 <code>target</code> 的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>梦开始的地方，暴力解法，两个 <code>for</code> 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题需要一个集合来存放我们遍历过的元素，然后在遍历数组的时候去询问这个集合，某元素是否遍历过，也就是是否出现在这个集合。那么我们就应该想到使用哈希法了。</p><p>使用数组和 set 来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set 是一个集合，里面放的元素只能是一个 <code>key</code>，而两数之和这道题目，不仅要判断 <code>y</code> 是否存在而且还要记录 <code>y</code> 的下标位置，因为要返回 <code>x</code> 和 <code>y</code> 的下标。所以 set 也不能用。</li></ul><p>本题，我们不仅要知道元素有没有遍历过，还要判断这个元素是否出现过，如果出现过，返回这个元素的下标，需要使用 <code>key value</code> 结构来存放，<code>key</code> 来存元素，<code>value</code> 来存下标，使用 <code>map</code> 正合适。</p><ul><li>map 中的存储结构为 <code>&#123;key：数据元素，value：数组元素对应的下标&#125;</code>。</li><li>在遍历数组的时候，只需要向 map 去查询是否有和目前遍历元素比配的数值，如果有，就找到的匹配对，如果没有，就把目前遍历的元素放进 map 中，因为 map 存放的就是我们访问过的元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];   <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(temp))&#123;</span><br><span class="line">            res[<span class="number">1</span>] = i;</span><br><span class="line">            res[<span class="number">0</span>] = map.get(temp);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);    <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第六天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E5%9B%9B%E5%A4%A9/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2022-12-31T09:35:32.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第四天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、24-两两交换链表中的节点"><a href="#一、24-两两交换链表中的节点" class="headerlink" title="一、24 两两交换链表中的节点"></a>一、24 两两交换链表中的节点</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>用虚拟头结点的方式进行操作，这样会方便很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next.next;    </span><br><span class="line">            current.next = head.next;        </span><br><span class="line">            head.next.next = head;        </span><br><span class="line">            head.next = temp;        </span><br><span class="line">            current = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、19-删除链表的倒数第-N-个节点"><a href="#二、19-删除链表的倒数第-N-个节点" class="headerlink" title="二、19 删除链表的倒数第 N 个节点"></a>二、19 删除链表的倒数第 N 个节点</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>同样使用虚拟头结点，这样方便处理删除实际头结点的逻辑。定义 <code>fast</code> 指针和 <code>slow</code> 指针，初始值为虚拟头结点，<code>fast</code> 首先走<code>n + 1</code> 步 ，指向删除节点的下一个节点，这样同时移动的时候 <code>slow</code> 才能指向删除节点的上一个节点（方便做删除操作）。</p><p>然后，<code>fast</code> 和 <code>slow</code> 同时移动，直到 <code>fast</code> 指向末尾（Null），此时 <code>slow</code> 指向删除节点的上一个节点。删除 <code>slow</code> 指向的下一个节点（<code>slow-&gt;next = slow-&gt;next-&gt;next;</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="literal">null</span>) &#123;    <span class="comment">//注意这里是 fast.next 不是 fast</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、面试题-02-07-链表相交"><a href="#三、面试题-02-07-链表相交" class="headerlink" title="三、面试题 02.07 链表相交"></a>三、面试题 02.07 链表相交</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></a></p><p>题目数据保证整个链式结构中不存在环。注意，函数返回结果后，链表必须保持其原始结构。</p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>简单来说，就是求两个链表交点节点的指针。 这里注意，交点不是数值相等，而是指针相等。</p><p>使用双指针的方法，可以将空间复杂度降至 O(1)。</p><p>只有当链表 <code>headA</code> 和  <code>headB</code> 都不为空时，两个链表才可能相交。因此首先判断链表 <code>headA</code> 和 <code>headB</code> 是否为空，如果其中至少有一个链表为空，则两个链表一定不相交，返回 <code>null</code>。</p><p>当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，创建两个指针 <code>pA</code> 和 <code>pB</code>，初始时分别指向两个链表的头节点 <code>headA</code> 和 <code>headB</code>，然后将两个指针依次遍历两个链表的每个节点。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营05.png" alt></p><p>每步操作需要同时更新指针 <code>pA</code> 和 <code>pB</code>。如果指针 <code>pA</code> 不为空，则将指针 <code>pA</code> 移到下一个节点；如果指针 <code>pB</code> 不为空，则将指针 <code>pB</code> 移到下一个节点。如果指针 <code>pA</code> 为空，则将指针 <code>pA</code> 移到链表 <code>headB</code> 的头节点；如果指针 <code>pB</code> 为空，则将指针 <code>pB</code> 移到链表 <code>headA</code> 的头节点。当指针 <code>pA</code> 和 <code>pB</code> 指向同一个节点或者都为空时，返回它们指向的节点或者 <code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">A</span> <span class="operator">=</span> headA, B = headB;</span><br><span class="line">        <span class="keyword">while</span> (A != B) &#123;</span><br><span class="line">            A = A != <span class="literal">null</span> ? A.next : headB;</span><br><span class="line">            B = B != <span class="literal">null</span> ? B.next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、142-环形链表-II"><a href="#四、142-环形链表-II" class="headerlink" title="四、142 环形链表 II"></a>四、142 环形链表 II</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>给定一个链表的头节点 <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。不允许修改链表。</p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>可以使用快慢指针法判断链表是否环，分别定义 <code>fast</code> 和 <code>slow</code> 指针，从头结点出发，<code>fast</code> 指针每次移动两个节点，<code>slow</code> 指针每次移动一个节点，如果 <code>fast</code> 和 <code>slow</code> 指针在途中相遇 ，说明这个链表有环。这是因为 <code>fast</code> 是走两步，<code>slow</code> 是走一步，其实相对于 <code>slow</code> 来说，<code>fast</code> 是一个节点一个节点的靠近 <code>slow</code> 的，所以 <code>fast</code> 一定可以和 <code>slow</code> 重合。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营06.png" alt></p><p>设链表中环外部分的长度为 <code>a</code>。<code>slow</code> 指针进入环后，又走了 <code>b</code> 的距离与 <code>fast</code> 相遇。此时，<code>fast</code> 指针已经走完了环的 n 圈，因此它走过的总距离为 $a+n(b+c)+b=a+(n+1)b+nc$。</p><p>又因为任意时刻，<code>fast</code> 指针走过的距离都为 <code>slow</code> 指针的 2 倍。因此，可以推导出：</p><script type="math/tex; mode=display">a+(n+1)b+nc=2(a+b)⟹a=c+(n−1)(b+c)</script><p>即从相遇点到入环点的距离加上 $n-1$ 圈的环长，恰好等于从链表头部到入环点的距离。</p><p>因此，当发现 <code>slow</code> 与 <code>fast</code> 相遇时，我们再额外使用一个指针 <code>ptr</code>。起始，它指向链表头部。随后，它和 <code>slow</code> 每次向后移动一个位置。最终，它们会在入环点相遇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">ptr</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                    ptr = ptr.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第四天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%89%E5%A4%A9/</id>
    <published>2022-12-29T16:00:00.000Z</published>
    <updated>2023-01-07T03:51:06.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第三天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、链表理论基础"><a href="#一、链表理论基础" class="headerlink" title="一、链表理论基础"></a>一、链表理论基础</h3><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 <code>null</code>（空指针）。链表的入口节点称为链表的头结点也就是 <code>head</code>。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营02.png" alt></p><p>链表节点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;    </span><br><span class="line">    ListNode next;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;    <span class="comment">// 节点的构造函数</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;    </span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;    </span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表在内存中的存储方式是通过指针域的指针链接在内存中各个节点。所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p>链表和数组的区别：数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p><p>除此以外，还有双链表、循环链表和静态链表，以及它们的 C/C++ 的定义方式可以参考<a href="/线性表的链式存储">这篇文章</a>。</p><p>双链表结点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode() &#123;&#125;;</span><br><span class="line">    ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表一定要分清节点和指针的概念。 <code>new ListNode()</code> 是真实存在的一个节点，<code>head = new ListNode()</code> 相当于 <code>head</code> 指针指向了一个真实的节点，<code>node = head</code> 相当于 <code>node</code> 和 <code>head</code> 同时指向了这个真实的节点。</p><h3 id="二、203-移除链表元素"><a href="#二、203-移除链表元素" class="headerlink" title="二、203 移除链表元素"></a>二、203 移除链表元素</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回新的头节点。</p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>第一种操作：直接使用原来的链表来进行移除。移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点（<code>head = head -&gt; next</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123; </span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val)&#123;</span><br><span class="line">            head = head.next;    <span class="comment">// 删除头结点</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>)&#123;      <span class="comment">//注意这里不是 if</span></span><br><span class="line">            <span class="keyword">while</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.val == val)&#123;</span><br><span class="line">                current.next = current.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以设置一个虚拟头结点，这样原链表的所有节点就都可以按照统一的方式进行移除了。最后呢在 return 头结点的时候，<code>return dummyNode-&gt;next;</code>， 这才是新的头结点。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营03.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);    <span class="comment">// 设置一个虚拟头结点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">previous</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.val == val)&#123;</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                previous = current;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、707-设计链表"><a href="#三、707-设计链表" class="headerlink" title="三、707 设计链表"></a>三、707 设计链表</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 <code>0-index</code> 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code> 的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果<code>index</code>小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目设计链表的五个接口，覆盖了链表的常见操作：</p><ul><li>获取链表第 <code>index</code> 个节点的数值，注意 index 是从 0 开始的，第 0 个节点就是头结点。</li><li>在链表的最前面插入一个节点，等价于在第 0 个元素前添加。</li><li>在链表的最后面插入一个节点，等价于在 <code>(末尾+1)</code> 个元素前添加。</li><li>在链表第 <code>index</code> 个节点前面插入一个节点，例如 <code>index</code> 为 0，那么新插入的节点为链表的新头节点。如果 <code>index</code> 等于链表的长度，则说明是新插入的节点为链表的尾结点。如果 <code>index</code> 大于链表的长度，则返回空。</li><li>删除链表的第 <code>index</code> 个节点</li></ul><p>可以设置一个虚拟头结点再进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;    </span><br><span class="line">    ListNode head;    <span class="comment">//虚拟头结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;      <span class="comment">//初始化链表</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;    <span class="comment">//包含一个虚拟头节点，所以查找第 index+1 个节点</span></span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size, val);      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;    <span class="comment">//找到要插入节点的前驱</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充（双链表）"><a href="#补充（双链表）" class="headerlink" title="补充（双链表）"></a>补充（双链表）</h4><p>如果本题目是双链表进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;  </span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head,tail;    <span class="comment">//记录链表的虚拟头结点和尾结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化操作</span></span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//这一步非常关键，否则在加入头结点的操作中会出现null.next的错误！！！</span></span><br><span class="line">        head.next=tail;</span><br><span class="line">        tail.prev=head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= size / <span class="number">2</span>)&#123;    <span class="comment">//判断是哪一边遍历时间更短</span></span><br><span class="line">            <span class="comment">//tail开始</span></span><br><span class="line">            cur = tail;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; size-index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.head;    <span class="comment">//找到前驱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);    <span class="comment">//新建结点</span></span><br><span class="line">        newNode.next = pre.next;</span><br><span class="line">        pre.next.prev = newNode;</span><br><span class="line">        newNode.prev = pre;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;    <span class="comment">//删除操作</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next.next.prev = pre;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、206-反转链表"><a href="#四、206-反转链表" class="headerlink" title="四、206 反转链表"></a>四、206 反转链表</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>如果再定义一个新的链表，实现链表元素的反转，其实这是对内存空间的浪费。其实只需要改变链表的 <code>next</code> 指针的指向，直接将链表反转 ，而不用重新定义一个新的链表。</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营04.png" alt></p><p>首先定义一个 <code>cur</code> 指针，指向头结点，再定义一个 <code>pre</code> 指针，初始化为 <code>null</code>。然后就开始反转，首先要把 <code>cur-&gt;next</code> 节点用 <code>tmp</code> 指针保存一下，也就是保存一下这个节点。接下来要改变 <code>cur-&gt;next</code> 的指向，将 <code>cur-&gt;next</code> 指向 <code>pre</code> ，即反转第一个节点。接下来循环遍历继续移动 <code>pre</code> 和 <code>cur</code> 指针。最后，<code>cur</code> 指针已经指向了 <code>null</code>，循环结束，链表也反转完毕了。 此时，<code>pre</code> 指针就指向了新的头结点，我们 <code>return pre</code> 指针就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = curr.next;    <span class="comment">// 保存下一个节点</span></span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用递归法解此题，递归法相对抽象一些，但是其实和双指针法是一样的逻辑，同样是当 <code>cur</code> 为空的时候循环结束，不断将 <code>cur</code> 指向 <code>pre</code> 的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;<span class="comment">// 先保存下一个节点</span></span><br><span class="line">        cur.next = prev;<span class="comment">// 反转</span></span><br><span class="line">        <span class="comment">// 更新prev、cur位置</span></span><br><span class="line">        <span class="comment">// prev = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从后向前递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头节点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的 head 节点为尾节点，next 需要指向 NULL</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第三天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%BA%8C%E5%A4%A9/</id>
    <published>2022-12-28T16:00:00.000Z</published>
    <updated>2022-12-31T09:00:54.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第二天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、977-有序数组的平方"><a href="#一、977-有序数组的平方" class="headerlink" title="一、977 有序数组的平方"></a>一、977 有序数组的平方</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个按非递减顺序排序的整数数组 <code>nums</code>，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>老规矩，用暴力排序开始美好的一天。先每个数平方，再调用 <code>ArrayList.sort()</code> 快速排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            nums[i] = nums[i] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组其实是有序的， 显然，如果数组 <code>nums</code> 中的所有数都是非负数，那么将每个数平方后，数组仍然保持升序；如果数组 <code>nums</code> 中的所有数都是负数，那么将每个数平方后，数组会保持降序。那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。此时可以考虑双指针法了，<code>i</code> 指向起始位置，<code>j</code> 指向终止位置。</p><p>定义一个新数组 <code>result</code>，和 <code>nums</code> 数组一样的大小，让 <code>pos</code> 指向 <code>result</code> 数组终止位置。如果 <code>nums[i] * nums[i] &lt; nums[j] * nums[j]</code>  那么 <code>result[k--] = nums[j] * nums[j];</code> 。如果 <code>nums[i] * nums[i] &gt;= nums[j] * nums[j]</code> 那么 <code>result[k--] = nums[i] * nums[i];</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> result[] = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = n - <span class="number">1</span>, pos = n - <span class="number">1</span>; i &lt;= j;) &#123;    <span class="comment">// 注意这里要i &lt;= j，因为最后要处理两个元素</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] * nums[i] &gt; nums[j] * nums[j]) &#123;</span><br><span class="line">                result[pos] = nums[i] * nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[pos] = nums[j] * nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            pos--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、209-长度最小的子数组"><a href="#二、209-长度最小的子数组" class="headerlink" title="二、209 长度最小的子数组"></a>二、209 长度最小的子数组</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code>。找出该数组中满足其和 <code>≥ target</code> 的长度最小的连续子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>暴力法超出时间限制。需要使用数组操作中另一个重要的方法：滑动窗口。所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。窗口就是满足其和 <code>≥ s</code> 的长度最小的连续子数组。如果当前窗口的值大于 <code>s</code> 了，窗口就要向前移动了（也就是该缩小了）。窗口的结束位置就是遍历数组的指针，也就是 <code>for</code> 循环里的索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;    <span class="comment">// 取最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length ; right++)&#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s)&#123;</span><br><span class="line">                result = Math.min(result, right-left+<span class="number">1</span>);    <span class="comment">// 取二者间最小值</span></span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;    <span class="comment">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、59-螺旋矩阵-II"><a href="#三、59-螺旋矩阵-II" class="headerlink" title="三、59 螺旋矩阵 II"></a>三、59 螺旋矩阵 II</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>这道题目可以说在面试中出现频率较高的题目，本题并不涉及到什么算法，就是模拟过程，但却十分考察对代码的掌控能力。模拟顺时针画矩阵的过程：填充上行从左到右 -&gt; 填充右列从上到下 -&gt; 填充下行从右到左 -&gt; 填充左列从下到上，由外向内一圈一圈这么画下去。</p><p>同二分法相似，求解本题依然是要坚持循环不变量原则，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p><p>生成一个 <code>n×n</code> 空矩阵 <code>result</code>，随后模拟整个向内环绕的填入过程。定义每次循环的开始点 <code>(start, start)</code>，和控制循环次数 <code>loop</code>，定义填充数字 <code>count</code>。当 <code>loop++ &lt; n / 2</code> 时，始终按照从左到右、从上到下、从右到左、从下到上填入顺序循环，每次填入后执行 <code>num += 1</code>，得到下一个需要填入的数字。然后更新边界，例如从左到右填完后，上边界 <code>t += 1</code>，相当于上边界向内缩 <code>1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">while</span> (loop++ &lt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = start; j &lt; n - loop; j++) &#123;</span><br><span class="line">                result[start][j] = count;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; n - loop; i++) &#123;</span><br><span class="line">                result[i][j] = count;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= loop; j--) &#123;</span><br><span class="line">                result[i][j] = count;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &gt;= loop; i--) &#123;</span><br><span class="line">                result[i][j] = count;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            start ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;      <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">            result[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：对于正方形的二维教组只需要考虑转多少圈以及最后中间是否剩一个值， 如果剩一个一个值需要再转完圈后再单独加中间的值。另外转圈过程要保证坚持左闭右开或者左开方闭。对于矩形二维数组变成一维数组的情况，需要在较完图后单独考志最内圈剩的一行或者一列。</p><h3 id="四、数组的经典题目总结"><a href="#四、数组的经典题目总结" class="headerlink" title="四、数组的经典题目总结"></a>四、数组的经典题目总结</h3><p>在面试中，数组是必考的基础数据结构。其实数组的题目在思想上一般比较简单的，但是如果想高效，并不容易。之前一共做了五道经典数组题目，每一道题目都代表一个类型，一种思想，从二分法到双指针法，从滑动窗口到螺旋矩阵。</p><p>根据题目的数据量范围选择合适的算法，比如数据量是 <code>10^5</code>，那就只能使用 <code>O(nlogn)</code> 复杂度以下的算法了，使用 <code>O(n^2)</code> 是会超时的，而如果数据量只有 100 或者 1000，则可以果断的采用暴力方法（一般是 <code>O(n^2)</code>）进行求解。</p><p>二分法的最大优势是在于其时间复杂度是 <code>O(logn)</code>，因此看到有序数组都要第一时间反问自己是否可以使用二分法。</p><p>双指针法移除元素和二分法这两题之间是有点类似的，他们都是在不断缩小 <code>left</code> 和 <code>right</code> 之间的距离，每次需要判断的都是 <code>left</code> 和 <code>right</code> 之间的数是否满足特定条件。</p><p>滑动窗口的本质是满足了单调性，即左右指针只会往一个方向走且不会回头。滑动窗口收缩的本质就是去掉不再需要的元素，也就是我们可以先固定移动右指针，通过判断条件是否可以收缩左指针算范围。</p><p>关于螺旋矩阵，可以同时看一下<a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/">力扣上最高评的题解</a>，代码更简洁。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第二天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第一天记录</title>
    <link href="http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://blog.zhuangzhihao.top/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%AC%E4%B8%80%E5%A4%A9/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-31T09:01:40.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第一天的刷题记录和思考笔记。</p></blockquote><span id="more"></span><h3 id="一、数组理论基础"><a href="#一、数组理论基础" class="headerlink" title="一、数组理论基础"></a>一、数组理论基础</h3><p>数组是存放在连续内存空间上的相同类型数据的集合，数据可以方便地通过下标索引（从 0 开始）的方式获取到下标下对应的数据，数组内存空间的地址是连续的。</p><p>正是因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。数组的元素是不能删的，只能覆盖，例如删除下标为 3 的元素，需要对下标为 3 的元素后面的所有元素都要做向前移动 1 位的操作。</p><p>如果使用 C++ 的话，要注意 <code>vector</code> 和 <code>array</code> 的区别，<code>vector</code> 的底层实现是 <code>array</code>，严格来讲 <code>vector</code> 是容器，不是数组。</p><p>对于二维数组：</p><p><img src="https://blog.zhuangzhihao.top/img/卡哥训练营01.png" alt></p><p>不同编程语言的内存管理是不一样的，在 C++ 中二维数组在内存的空间地址是连续分布的。而像 Java 是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机，所以看不到每个元素的地址情况。</p><h3 id="二、704-二分查找"><a href="#二、704-二分查找" class="headerlink" title="二、704 二分查找"></a>二、704 二分查找</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先，遍历数组查找是可以提交成功滴。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，回到二分法，即每次取区间中点将区间一分为二，根据需要留下其中一个小区间。</p><p>这道题目的前提是数组为有序数组，同时题目还强调数组中无重复元素，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的，这些都是使用二分法的前提条件。</p><p>二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量。要在二分查找的过程中，保持不变量，就是在 while 寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是循环不变量规则。</p><p>写二分法，区间的定义一般为两种，左闭右闭即 <code>[left, right]</code>，或者左闭右开即 <code>[left, right)</code>。</p><p>左闭右闭的解法：</p><p>即 <code>[left, right]</code>，<code>while (left &lt;= right)</code> 要使用 <code>&lt;=</code> ，因为 <code>left == right</code> 是有意义的，所以使用 <code>&lt;=</code>。<code>if (nums[middle] &gt; target)</code>中，right 要赋值为 <code>middle - 1</code>，因为当前这个 <code>nums[middle]</code> 一定不是 target，那么接下来要查找的左区间结束下标位置就是 <code>middle - 1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;    </span><br><span class="line">        <span class="keyword">while</span> ( left &lt;= right ) &#123;      <span class="comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ( right - left ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;      </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;      </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;      <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，最好在算法前先判断循环的区间是合法的区间，避免当 target 小于 <code>nums[0] nums[nums.length - 1]</code>时多次循环运算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左闭右开的解法：</p><p>即 <code>[left, right)</code>，<code>while (left &lt; right)</code>，这里使用 &lt; ，因为 <code>left == right</code> 在区间 <code>[left, right)</code> 是没有意义的。<code>if (nums[middle] &gt; target) right</code> 更新为 middle，因为当前<code>nums[middle]</code>不等于 target，去左区间继续寻找，而寻找区间是左闭右开区间，所以 right 更新为 middle，即下一个查询区间不会去比较 <code>nums[middle]</code>。使用左闭右开内存消耗更低。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;    <span class="comment">// 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">        <span class="keyword">while</span> ( left &lt; right ) &#123;    <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ( right - left ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;   </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid;      </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、27-移除元素"><a href="#三、27-移除元素" class="headerlink" title="三、27 移除元素"></a>三、27 移除元素</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先，暴力破解当然可以，就是两层 for 循环，一个 for 循环遍历数组元素 ，第二个 for 循环更新数组。虽然时间复杂度是 <code>O(n^2)</code>，但是空间复杂度依然是 <code>O(1)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j+<span class="number">1</span> &lt; n; j++) &#123;</span><br><span class="line">                    nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然双指针法才是本题的精髓，由于题目要求删除数组中等于 val 的元素，因此输出数组的长度一定小于等于输入数组的长度，我们可以把输出的数组直接写在输入数组上。可以使用双指针：右指针 right 指向当前将要处理的元素，左指针 left 指向下一个将要赋值的位置。</p><p>如果右指针指向的元素不等于 val，它一定是输出数组的一个元素，我们就将右指针指向的元素复制到左指针位置，然后将左右指针同时右移；如果右指针指向的元素等于 val，它不能在输出数组里，此时左指针不动，右指针右移一位。当左右指针遍历完输入数组以后，left 的值就是输出数组的长度，时间复杂度为 O(n)，空间复杂度为 O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] != val) &#123;</span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要移除的元素恰好在数组的开头，例如序列 <code>[1,2,3,4,5]</code>，当 val 为 1 时，我们需要把每一个元素都左移一位。注意到题目中说元素的顺序可以改变。实际上我们可以直接将最后一个元素 5 移动到序列开头，取代元素 1，得到序列 <code>[5,2,3,4]</code>，同样满足题目要求。这个优化在序列中 val 元素的数量较少时非常有效。</p><p>实现方面，我们依然使用双指针，两个指针初始时分别位于数组的首尾，向中间移动遍历该序列。如果左指针 left 指向的元素等于 val，此时将右指针 right 指向的元素复制到左指针 left 的位置，然后右指针 right 左移一位。如果赋值过来的元素恰好也等于 val，可以继续把右指针 right 指向的元素的值赋值过来（左指针 left 指向的等于 val 的元素的位置继续被覆盖），直到左指针指向的元素的值不等于 val 为止。当左指针 left 和右指针 right 重合的时候，左右指针遍历完数组中所有的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == val) &#123;</span><br><span class="line">                nums[left] = nums[right - <span class="number">1</span>];</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在之前刷力扣的过程中，我每刷道题都是先看题解然后再去边写边看，很多内容根本没消化，在进度上欺骗自己，感觉之前刷的都忘了，能力没有什么提升，现在还是一道都不会做。所以这次报了卡哥的算法训练营，希望能够按计划地有效刷题。本次刷题，我用的是 Java 语言解题，有余力的话也可能会加上 C++ 的题解。以下是算法训练营第一天的刷题记录和思考笔记。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://blog.zhuangzhihao.top/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="LeetCode" scheme="http://blog.zhuangzhihao.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 视频通话等其他组件</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E7%BB%84%E4%BB%B6/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D%E7%BB%84%E4%BB%B6/</id>
    <published>2022-12-25T16:00:00.000Z</published>
    <updated>2023-01-08T07:55:46.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第十章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、视频通话组件开发"><a href="#一、视频通话组件开发" class="headerlink" title="一、视频通话组件开发"></a>一、视频通话组件开发</h3><p>使用 Hygen 创建一个 <code>VideoCall</code> 组件，并移动到 <code>src/components/Input</code> 组件目录下，作为 <code>Input</code> 的子组件导出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new VideoCall</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/VideoCall/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledVideoCall</span>, &#123;</span><br><span class="line">  <span class="title class_">Minimize</span>,</span><br><span class="line">  <span class="title class_">Actions</span>,</span><br><span class="line">  <span class="title class_">Action</span>,</span><br><span class="line">  <span class="title class_">Self</span>,</span><br><span class="line">  <span class="title class_">VideoCallAlert</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> videoCaller <span class="keyword">from</span> <span class="string">&quot;assets/images/video-caller.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/react-fontawesome&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  faCompressAlt,</span><br><span class="line">  faMicrophone,</span><br><span class="line">  faPhoneSlash,</span><br><span class="line">  faVolumeMute,</span><br><span class="line">  faVideo,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/free-solid-svg-icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VideoCall</span>(<span class="params">&#123; children, onHangOffClicked, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [fullScreen, setFullScreen] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fullScreen) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">VideoCallAlert</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Avatar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;face&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">grid-area:</span> <span class="attr">avatar</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">size</span>=<span class="string">&quot;medium&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">grid-area:</span> <span class="attr">info</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          正在跟 李铭浩 进行视频通话</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">grid-area:</span> <span class="attr">action</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cursor:</span> <span class="attr">pointer</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setFullScreen(true)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          点击切换全屏</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FontAwesomeIcon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;faVideo&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">grid-area:</span> <span class="attr">icon</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">font-size:</span> <span class="attr">20px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">justify-self:</span> <span class="attr">end</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">opacity:</span> <span class="attr">0.3</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">VideoCallAlert</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledVideoCall</span> <span class="attr">src</span>=<span class="string">&#123;videoCaller&#125;</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Minimize</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setFullScreen(false)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FontAwesomeIcon</span> <span class="attr">icon</span>=<span class="string">&#123;faCompressAlt&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Minimize</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FontAwesomeIcon</span> <span class="attr">icon</span>=<span class="string">&#123;faMicrophone&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Action</span> <span class="attr">type</span>=<span class="string">&quot;hangoff&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FontAwesomeIcon</span> <span class="attr">icon</span>=<span class="string">&#123;faPhoneSlash&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onHangOffClicked&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FontAwesomeIcon</span> <span class="attr">icon</span>=<span class="string">&#123;faVolumeMute&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Actions</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Self</span> <span class="attr">src</span>=<span class="string">&#123;face&#125;</span> <span class="attr">size</span>=<span class="string">&quot;140px&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledVideoCall</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VideoCall</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VideoCall</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/VideoCall/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; card &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Actions</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: actions / title;</span></span><br><span class="line"><span class="string">  align-self: end;</span></span><br><span class="line"><span class="string">  justify-self: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 90px 90px 90px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Action</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">size</span>: <span class="string">&quot;64px&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 32px;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  box-shadow: none;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme, type &#125;) =&gt;</span></span></span><br><span class="line"><span class="subst"><span class="string">    type === <span class="string">&quot;hangoff&quot;</span> ? theme.red2 : theme.grayDark2&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Self</span> = <span class="title function_">styled</span>(<span class="title class_">Avatar</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: self;</span></span><br><span class="line"><span class="string">  align-self: end;</span></span><br><span class="line"><span class="string">  justify-self: end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Minimize</span> = <span class="title function_">styled</span>(<span class="title class_">Button</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  justify-self: end;</span></span><br><span class="line"><span class="string">  grid-area: title;</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray3&#125;</span>;</span></span><br><span class="line"><span class="string">  padding: 0;</span></span><br><span class="line"><span class="string">  width: 62px;</span></span><br><span class="line"><span class="string">  height: 62px;</span></span><br><span class="line"><span class="string">  font-size: 46px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VideoCallAlert</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;avatar info info&quot;</span></span><br><span class="line"><span class="string">    &quot;avatar action icon&quot;;</span></span><br><span class="line"><span class="string">  row-gap: 5px;</span></span><br><span class="line"><span class="string">  column-gap: 10px;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  width: max-content;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  right: 0;</span></span><br><span class="line"><span class="string">  top: 10vh;</span></span><br><span class="line"><span class="string">  border: 1px solid <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray4&#125;</span>;</span></span><br><span class="line"><span class="string">  z-index: 200;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;card&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledVideoCall</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  height: 100%;</span></span><br><span class="line"><span class="string">  padding: 20px;</span></span><br><span class="line"><span class="string">  padding-bottom: 40px;</span></span><br><span class="line"><span class="string">  background-image: url(<span class="subst">$&#123;(&#123; src &#125;) =&gt; src&#125;</span>);</span></span><br><span class="line"><span class="string">  background-size: cover;</span></span><br><span class="line"><span class="string">  background-position: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;title title&quot;</span></span><br><span class="line"><span class="string">    &quot;actions self&quot;;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledVideoCall</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Actions</span>, <span class="title class_">Action</span>, <span class="title class_">Self</span>, <span class="title class_">Minimize</span>, <span class="title class_">StyledVideoCall</span>, <span class="title class_">VideoCallAlert</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/VideoCall/videoCall.stories.js</code>  文件中修改 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VideoCall</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/VideoCall&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">VideoCall</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">100vh</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">VideoCall</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用 <code>yarn</code> 命令启动 storybook：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run storybook</span><br></pre></td></tr></table></figure><h3 id="二、Dropdown-下拉组件开发"><a href="#二、Dropdown-下拉组件开发" class="headerlink" title="二、Dropdown 下拉组件开发"></a>二、Dropdown 下拉组件开发</h3><p>使用 Hygen 创建一个 <code>Dropdown</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new Dropdown</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Dropdown/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledDropdown</span>, &#123; <span class="title class_">DropdownContainer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dropdown</span>(<span class="params">&#123; children, content, align = <span class="string">&quot;right&quot;</span>, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledDropdown</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setVisible(!visible)&#125; &#123;...rest&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;content &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DropdownContainer</span> <span class="attr">align</span>=<span class="string">&#123;align&#125;</span> <span class="attr">visible</span>=<span class="string">&#123;visible&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DropdownContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledDropdown</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dropdown</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">  <span class="attr">align</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOf</span>([<span class="string">&quot;top&quot;</span>, <span class="string">&quot;left&quot;</span>, <span class="string">&quot;bottom&quot;</span>, <span class="string">&quot;right&quot;</span>]),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Dropdown</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Dropdown/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSeperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DropdownItem</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  margin: 12px 0;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DropdownContainer</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  white-space: nowrap;</span></span><br><span class="line"><span class="string">  padding: 4px 26px;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.background&#125;</span>;</span></span><br><span class="line"><span class="string">  box-shadow: 0px 4px 32px rgba(0, 0, 0, 0.08);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  display: <span class="subst">$&#123;(&#123; visible &#125;) =&gt; (visible ? <span class="string">&quot;block&quot;</span> : <span class="string">&quot;none&quot;</span>)&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; align &#125;) =&gt; align&#125;</span>: 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledSeperator&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    margin: -3px -26px;</span></span><br><span class="line"><span class="string">    width: calc(100% + 52px);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledDropdown</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledDropdown</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">DropdownContainer</span>, <span class="title class_">DropdownItem</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Dropdown/dropdown.stories.js</code>  文件中添加 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Dropdown</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DropdownItem</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Options</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/options.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/Dropdown&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Dropdown</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dropdownContent = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>个人资料<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>关闭会话<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Seperator</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>屏蔽此人<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &quot;<span class="attr">flex</span>&quot;, <span class="attr">justifyContent:</span> &quot;<span class="attr">space-between</span>&quot;, <span class="attr">width:</span> &quot;<span class="attr">50</span>%&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>点击右侧按钮<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Dropdown</span> <span class="attr">content</span>=<span class="string">&#123;dropdownContent&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Options&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Left</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>点击下方按钮<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Dropdown</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span> <span class="attr">content</span>=<span class="string">&#123;dropdownContent&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Options&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Dropdown</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来把 Dropdown 组件添加到标题栏中的更多选项图标中，编辑 <code>src/components/TitleBar/index.js</code>  文件，在 Options 外层套一个 Dropdown 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Actions</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Call&#125;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Camera&#125;</span> /&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Dropdown</span> <span class="attr">content</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>个人资料<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span>&gt;</span>关闭会话<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Seperator</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>屏蔽此人<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">DropdownItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">      &#125; &gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">opacity</span>=<span class="string">&#123;0.3&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;Options&#125;</span> /&gt;</span></span></span><br><span class="line">          &lt;/<span class="title class_">Dropdown</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">Actions</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="三、组装聊天首页"><a href="#三、组装聊天首页" class="headerlink" title="三、组装聊天首页"></a>三、组装聊天首页</h3><p>聊天应用程序首页采用三段式布局，从左到右依次是导航、侧边栏和内容区，另外有滑动抽屉</p><p>使用 Hygen 创建一个 <code>ChatApp</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new ChatApp</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledChatApp</span>, &#123; <span class="title class_">Nav</span>, <span class="title class_">Sidebar</span>, <span class="title class_">Drawer</span>, <span class="title class_">Content</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NavBar</span> <span class="keyword">from</span> <span class="string">&quot;components/NavBar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MessageList</span> <span class="keyword">from</span> <span class="string">&quot;components/MessageList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Conversation</span> <span class="keyword">from</span> <span class="string">&quot;components/Conversation&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChatApp</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledChatApp</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NavBar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Sidebar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MessageList</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Sidebar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Conversation</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Drawer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Profile</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Drawer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledChatApp</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ChatApp</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ChatApp</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ChatApp/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Nav</span> = styled.<span class="property">nav</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex-shrink: 0;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sidebar</span> = styled.<span class="property">aside</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 448px;</span></span><br><span class="line"><span class="string">  min-width: 344px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  flex: 1;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.grediantGray&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Content</span> = styled.<span class="property">main</span><span class="string">`</span></span><br><span class="line"><span class="string">  flex: 2;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Drawer</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  max-width: 310px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledChatApp</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  width: 100vw;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledChatApp</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Nav</span>, <span class="title class_">Sidebar</span>, <span class="title class_">Content</span>, <span class="title class_">Drawer</span> &#125;;</span><br></pre></td></tr></table></figure><p>修改项目 <code>src</code> 目录下的 <code>index.js</code>，删除不相关代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改项目 <code>src</code> 目录下的 <code>App.js</code>，返回 <code>ChatApp</code> 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChatApp</span> <span class="keyword">from</span> <span class="string">&quot;components/ChatApp&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ThemeProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">&quot;theme&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChatApp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h4 id="yarn-start-运行-React-项目！"><a href="#yarn-start-运行-React-项目！" class="headerlink" title="yarn start 运行 React 项目！"></a><code>yarn start</code> 运行 React 项目！</h4>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第十章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括视频通话等其他组件，并将所有页面和 UI 组件组装成聊天首页。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with RStudio</title>
    <link href="http://blog.zhuangzhihao.top/Getting-Started-with-Rstudio/"/>
    <id>http://blog.zhuangzhihao.top/Getting-Started-with-Rstudio/</id>
    <published>2022-12-07T16:00:00.000Z</published>
    <updated>2023-01-06T12:29:40.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Getting Started with RStudio is a project-based course provided by <a href="https://www.coursera.org/learn/getting-started-rstudio/">Coursera Project Network</a>. It aims to focus on three learning objectives: Install R and RStudio on desktop, or use the new cloud-based solution that allows anyone to learn R,  know the 10 most important things that 99% of R programmers should know about the RStudio IDE Interface and Be able to explain what R packages are, how to install and load them, from CRAN and Github, into the R session, and create interactive HTML widgets. The following are the notes I took during this course.</p></blockquote><span id="more"></span><p><img src="https://blog.zhuangzhihao.top/img/Coursera-Getting-Started-with-Rstudio.png" alt></p><h3 id="1-Install-R-and-Get-started-with-RStudio"><a href="#1-Install-R-and-Get-started-with-RStudio" class="headerlink" title="1. Install R and Get started with RStudio"></a>1. Install R and Get started with RStudio</h3><p>Download and Install R via <a href="https://cloud.r-project.org/">https://cloud.r-project.org/</a>, and Download and Install RStudio via <a href="https://posit.co/downloads/">https://posit.co/downloads/</a> .</p><p>Using RStudio with the new cloud-based solution of RStudio via <a href="https://posit.cloud/">https://posit.cloud/</a> that allows anyone to do, share, teach and learn R, directly from your browser.</p><h3 id="2-Most-Important-Features-About-RStudio"><a href="#2-Most-Important-Features-About-RStudio" class="headerlink" title="2. Most Important Features About RStudio"></a>2. Most Important Features About RStudio</h3><p>Know the 10 most important things that 99% of R programmers should know about the RStudio IDE Interface.  </p><p>Within Tools <code>&gt;</code> Global Options, you can change the theme of the code editor and the pane layout. Most developers will turn off Save <code>.RData</code> and History in the General tab of Gloabl Options as well.</p><p>A project is the fundamental unit of work in RStudio. It encapsulates your R code, packages and data files and provides isolation from other analyses.</p><h3 id="3-Install-and-load-R-packages-from-CRAN-and-Github"><a href="#3-Install-and-load-R-packages-from-CRAN-and-Github" class="headerlink" title="3. Install and load R packages, from CRAN and Github."></a>3. Install and load R packages, from CRAN and Github.</h3><p>The public clearing house for R packages is called CRAN, CRAN stands for Comprehensive R Archive Network.</p><p>Install the package <code>dplyr</code> which is used to manipulate data:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span>“dplyr”<span class="punctuation">)</span>; library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>To download packages from Github, you need to download a package first, called <code>devtools</code>and it is on CRAN.</p><p>Download a package called <code>broman</code> from Github:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install_github<span class="punctuation">(</span><span class="string">&quot;kbroman/broman&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="4-Create-and-display-interactive-graphs-and-tables-with-1-line-of-code"><a href="#4-Create-and-display-interactive-graphs-and-tables-with-1-line-of-code" class="headerlink" title="4. Create and display interactive graphs and tables with 1 line of code."></a>4. Create and display interactive graphs and tables with 1 line of code.</h3><p>Data sets in package <code>broman</code>:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>Show Violent Crime Rates by US State:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USArrests</span><br></pre></td></tr></table></figure><p>The very common library to create interactive tables, interactive charts and interactive maps in R are DT, highcharter, leaflet.</p><p>Install the package <code>DT</code> from CRAN:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;DT&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>DT<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>Create a data table:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datatable<span class="punctuation">(</span>mtcars<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>Create a Interactive map:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;highcharter&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>highcharter<span class="punctuation">)</span></span><br><span class="line">hchart<span class="punctuation">(</span>mtcars<span class="punctuation">,</span> <span class="string">&quot;scatter&quot;</span><span class="punctuation">,</span> hcaes<span class="punctuation">(</span>x<span class="operator">=</span>wt<span class="punctuation">,</span> y<span class="operator">=</span>mpg<span class="punctuation">,</span> z<span class="operator">=</span>drat<span class="punctuation">,</span> color<span class="operator">=</span>hp<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>Create another map:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;leaflet&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span>leaflet<span class="punctuation">)</span></span><br><span class="line">leaflet<span class="punctuation">(</span><span class="punctuation">)</span> <span class="operator">%&gt;%</span> addTiles<span class="punctuation">(</span><span class="punctuation">)</span> <span class="operator">%&gt;%</span> setView<span class="punctuation">(</span><span class="operator">-</span><span class="number">85.39</span><span class="punctuation">,</span> <span class="number">31.22</span><span class="punctuation">,</span> zoom<span class="operator">=</span><span class="number">12</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>The <code>%&gt;%</code> sign called is called the pipe operator.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Getting Started with RStudio is a project-based course provided by &lt;a href=&quot;https://www.coursera.org/learn/getting-started-rstudio/&quot;&gt;Coursera Project Network&lt;/a&gt;. It aims to focus on three learning objectives: Install R and RStudio on desktop, or use the new cloud-based solution that allows anyone to learn R,  know the 10 most important things that 99% of R programmers should know about the RStudio IDE Interface and Be able to explain what R packages are, how to install and load them, from CRAN and Github, into the R session, and create interactive HTML widgets. The following are the notes I took during this course.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="人工智能与数据科学" scheme="http://blog.zhuangzhihao.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="R Programming" scheme="http://blog.zhuangzhihao.top/tags/R-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Learn NumPy &amp; Pandas</title>
    <link href="http://blog.zhuangzhihao.top/NumPy&amp;Pandas/"/>
    <id>http://blog.zhuangzhihao.top/NumPy&amp;Pandas/</id>
    <published>2022-12-05T16:00:00.000Z</published>
    <updated>2023-01-06T12:35:39.753Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NumPy 是 Numerical Python 的缩写，是一个开源的 Python 科学计算库，也是 SciPy、Scikit-Learn、tenorflow、paddlepaddle 等各种数据科学类库的基础库。使用 NumPy 可以方便的使用数组、矩阵进行计算。Pandas 是基于 NumPy 数组构建的，但二者最大的不同是 Pandas 是专门为处理表格和混杂数据设计的，适用于统计分析中的表结构，而 NumPy 更适合处理统一的数值数组数据。虽然在之前已经在 <a href="/Python-for-Data-Science">Python for Data Science</a> 一课中学习并整理英文笔记，但我认为还是有必要对于数据处理中的基础内容、工作流程和注意事项进行详细补充。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、NumPy-与-原生-Python-的性能对比"><a href="#一、NumPy-与-原生-Python-的性能对比" class="headerlink" title="一、NumPy 与 原生 Python 的性能对比"></a>一、NumPy 与 原生 Python 的性能对比</h3><p>对于同样的数值计算任务，使用 NumPy 比起直接编写 Python 代码有以下优点：</p><ul><li>代码更简洁： NumPy 直接以数组、矩阵为粒度计算并且支持大量的数学函数，而 Python 需要用 for 循环从底层实现；</li><li>性能更高效： NumPy 的数组存储效率和输入输出计算性能，比 Python 使用 <code>list</code> 好很多，而且 NumPy 的大部分代码都是 C 语言实现的，这是 NumPy 比 Python 高效的原因。</li></ul><p>使用原生 Python 语法实现两个数组相加：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">python_sum</span>(<span class="params">n</span>):</span><br><span class="line">    a = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    b = [i**<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    c = [a[i]+b[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">python_sum(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p>使用 NumPy 实现上面功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">numpy_sum</span>(<span class="params">n</span>):</span><br><span class="line">    a = np.arange(n) ** <span class="number">2</span></span><br><span class="line">    b = np.arange(n) ** <span class="number">3</span></span><br><span class="line">    c = a+b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">numpy_sum(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>%timeit</code> 魔法函数检测执行 1000 次所需时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%timeit python_sum(<span class="number">1000</span>)</span><br><span class="line">%timeit numpy_sum(<span class="number">1000</span>) </span><br><span class="line"><span class="comment">#使用 NumPy 进行计算要比原生 Python 快得多，而且数据量越大，效果越明显</span></span><br></pre></td></tr></table></figure><h3 id="二、ndarray-对象"><a href="#二、ndarray-对象" class="headerlink" title="二、ndarray 对象"></a>二、<code>ndarray</code> 对象</h3><p><code>ndarray</code> 对象是  NumPy 的核心数据结构，叫做  <code>array</code>（数组），<code>array</code> 对象可以是一维数组，也可以是多维数组。Python 的 <code>list</code> 也可以实现相同的功能，但是 <code>array</code> 的优势在于性能好，包含数组元数据信息、大量的便捷函数。NumPy 的 <code>array</code> 和 Python 的 <code>list</code> 的一个区别是它的元素必须都是同一种数据类型，这也是 NumPy 高性能的一个原因。</p><p><code>ndarray</code> 属性：</p><ul><li><code>shape</code>：返回一个元组，表示 <code>array</code> 的形状；</li><li><code>ndim</code>：返回一个数字，表示 <code>array</code> 的维度的数目；</li><li><code>size</code>：返回一个数字，表示 <code>array</code> 中所有数据元素的数目；</li><li><code>dtype</code>：<code>array</code> 中元素的数据类型；</li><li><code>itemsize</code>：表示数组中每个元素的字节大小。</li></ul><h4 id="创建-array-对象的方法"><a href="#创建-array-对象的方法" class="headerlink" title="创建 array 对象的方法"></a>创建 <code>array</code> 对象的方法</h4><ol><li>使用 <code>np.array()</code> 创建 <code>array</code>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个一维数组</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维数组</span></span><br><span class="line">y = np.array(</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ,<span class="number">8</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的形状  </span></span><br><span class="line">x.shape  <span class="comment">#(5,)</span></span><br><span class="line">y.shape  <span class="comment">#(2, 4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的维度</span></span><br><span class="line">x.ndim  <span class="comment">#1</span></span><br><span class="line">y.ndim  <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组所含元素的数目</span></span><br><span class="line">x.size  <span class="comment">#5</span></span><br><span class="line">y.size  <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组中元素的数据类型</span></span><br><span class="line">x.dtype  <span class="comment">#dtype(’int32’)</span></span><br><span class="line">y.dtype  <span class="comment">#dtype(’int32’)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组中每个元素的字节大小</span></span><br><span class="line">y.itemsize  <span class="comment">#4</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>np.arange(start,stop,step,dtype)</code>生成等差数组：<ul><li><code>start</code> 表示开始的数（包含） ，默认从 0 开始；</li><li><code>stop</code> 表示结束的数（不包含）；</li><li><code>step</code> 指定步长，默认为 1；</li><li><code>dtype</code> 指定数据类型。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个从0到9的数组，不包含10，步长默认为1</span></span><br><span class="line">np.arange(<span class="number">10</span>)  <span class="comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0,10) 区间，左闭右开，指定步长为 2</span></span><br><span class="line">np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)  <span class="comment">#array([0, 2, 4, 6, 8])</span></span><br></pre></td></tr></table></figure><p><code>reshape</code> 可以改变数组的形状：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将一维数组 改成 2行5列的 2维数组</span></span><br><span class="line">np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">#array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>np.linspace(start,stop,num,endpoint)</code> 创建等差数组（指定数量）：<ul><li><code>start</code> 表示起始值，</li><li><code>stop</code> 表示结束值，</li><li><code>num</code> 表示要生成的等间隔样例数量，默认为 50，</li><li><code>endpoint</code> 序列中是否包含 <code>stop</code>值， 默认为 <code>true</code>。</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">10</span>)  <span class="comment">#array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ])</span></span><br><span class="line"></span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>)  <span class="comment">#array([ 0. , 2.5, 5. , 7.5, 10. ])</span></span><br></pre></td></tr></table></figure><ol><li>使用 <code>ones</code>、<code>ones_like</code>、<code>zeros</code>、<code>zeros_like</code>、<code>empty</code>、<code>empty_like</code>、<code>full</code>、<code>full_like</code>、<code>eye</code> 等函数创建：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ones创建全是1的数组</span></span><br><span class="line">np.ones(<span class="number">10</span>)  <span class="comment">#array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</span></span><br><span class="line">np.ones((<span class="number">2</span>, <span class="number">4</span>))  <span class="comment">#array([[1., 1., 1., 1.], [1., 1., 1., 1.]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ones_like创建形状相同的全是1的数组</span></span><br><span class="line">np.ones_like(x)  <span class="comment">#array([1, 1, 1, 1, 1])</span></span><br><span class="line">np.ones_like(y)  <span class="comment">#array([[1, 1, 1, 1], [1, 1, 1, 1]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zeros创建全是0的数组</span></span><br><span class="line">np.zeros(<span class="number">10</span>)  <span class="comment">#array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</span></span><br><span class="line">np.zeros((<span class="number">2</span>,<span class="number">4</span>))  <span class="comment">#array([[0., 0., 0., 0.], [0., 0., 0., 0.]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zeros_like创建形状相同的全0数组</span></span><br><span class="line">np.zeros_like(x)  <span class="comment">#array([0, 0, 0, 0, 0])</span></span><br><span class="line">np.zeros_like(y)  <span class="comment">#array([[0, 0, 0, 0], [0, 0, 0, 0]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用empty创建未初始化的数组</span></span><br><span class="line"><span class="comment"># 注意：数据是未初始化的，里面的值可能是随机值不要用</span></span><br><span class="line">np.empty(<span class="number">10</span>)  <span class="comment">#array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</span></span><br><span class="line">np.empty((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment">#array([[0., 0., 0.], [0., 0., 0.]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用empty_like创建形状相同的空数组</span></span><br><span class="line">np.empty_like(x)  <span class="comment">#array([1767994469, 170816364, 538976266, 1701139232, 1936474400])</span></span><br><span class="line">np.empty_like(y)  <span class="comment">#array([[ 24385651, 8127092, 60818051, 27328636], [ 6226044, 6946940, 19464275, -637261490]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用full创建全是指定值的数组</span></span><br><span class="line">np.full(<span class="number">10</span>, <span class="number">666</span>)  <span class="comment">#array([666, 666, 666, 666, 666, 666, 666, 666, 666, 666])</span></span><br><span class="line">np.full((<span class="number">2</span>, <span class="number">4</span>), <span class="number">666</span>)  <span class="comment">#array([[666, 666, 666, 666], [666, 666, 666, 666]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用full_like创建形状相同的全是指定值的数组</span></span><br><span class="line">np.full_like(x, <span class="number">666</span>)  <span class="comment">#array([666, 666, 666, 666, 666])</span></span><br><span class="line">np.full_like(y, <span class="number">666</span>)  <span class="comment">#array([[666, 666, 666, 666], [666, 666, 666, 666]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 eye 函数创建对角线的地方为1，其余的地方为0的单位矩阵</span></span><br><span class="line">np.eye(<span class="number">5</span>)  <span class="comment">#array([[1., 0., 0., 0., 0.], [0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 0., 0., 1., 0.], [0., 0., 0., 0., 1.]])</span></span><br></pre></td></tr></table></figure><ol><li><code>np.random</code> 模块创建</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子  作用是：使得每次随机的结果固定</span></span><br><span class="line">np.random.seed(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数据在[0,1)之间  包含0 不包含1</span></span><br><span class="line">np.random.rand(<span class="number">5</span>)  <span class="comment">#array([0.70043712, 0.84418664, 0.67651434, 0.72785806, 0.95145796])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成 2行5列的2维数组  数据在[0,1)之间</span></span><br><span class="line">np.random.rand(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">#array([[0.0127032 , 0.4135877 , 0.04881279, 0.09992856, 0.50806631], [0.20024754, 0.74415417, 0.192892 , 0.70084475, 0.29322811]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机整数  区间范围：[2,5) 左闭右开  包含2不包含5</span></span><br><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定shape</span></span><br><span class="line">np.random.randint(<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>)  <span class="comment">#array([2, 2, 2, 2, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#uniform() 在 [low,high) 之间 生成均匀分布的数字</span></span><br><span class="line">np.random.uniform(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)  <span class="comment">#array([4.30223703, 4.85969412, 2.87292148, 4.54334592, 3.04928571, 4.77169077, 2.88468359, 3.57314184, 4.82761689, 2.22421847])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定shape，前面的2，5表示取值的区间范围 [2,5)</span></span><br><span class="line"><span class="comment"># 后面的(2,5) 是指定的shape</span></span><br><span class="line">np.random.uniform(<span class="number">2</span>,<span class="number">5</span>,(<span class="number">2</span>,<span class="number">5</span>))  <span class="comment">#array([[2.82938752, 3.40275649, 2.94744596, 3.17048776, 2.80498943], [4.26099152, 4.0002124 , 4.61863861, 3.56329157, 4.25061275]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># randn  返回数据具有标准正态分布 </span></span><br><span class="line"><span class="comment"># 即：均值为0 方差为1</span></span><br><span class="line">np.random.randn(<span class="number">5</span>)  <span class="comment">#array([-1.21715355, -0.99494737, -1.56448586, -1.62879004, 1.23174866])</span></span><br><span class="line">np.random.randn(<span class="number">2</span>,<span class="number">5</span>)  <span class="comment">#array([[-0.91360034, -0.27084407, 1.42024914, -0.98226439, 0.80976498], [ 1.85205227, 1.67819021, -0.98076924, 0.47031082, 0.18226991]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># normal()  可以指定均值和标准差</span></span><br><span class="line">np.random.normal(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)  <span class="comment">#array([-7.43882492, 3.0996833 , 3.29586662, 3.63076422, 22.66332222])</span></span><br><span class="line">np.random.normal(<span class="number">1</span>,<span class="number">10</span>,(<span class="number">2</span>,<span class="number">5</span>))  <span class="comment">#array([[ -9.48875925, -17.47684423, 6.34015028, -10.95748024, -1.89157372], [ -1.43327034, -6.42666527, 13.07905106, 11.27877114, 1.57388197]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># choice 从给定的数组里 生成随机结果</span></span><br><span class="line">np.random.choice(<span class="number">5</span>, <span class="number">3</span>)  <span class="comment">#array([0, 1, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于 np.random.choice(0, 5, 3)  在[0,5)的区间范围内 生成3个数据</span></span><br><span class="line">np.random.choice(<span class="number">5</span>, (<span class="number">2</span>, <span class="number">3</span>))  <span class="comment">#array([[0, 1, 0], [0, 1, 2]])</span></span><br><span class="line">np.random.choice([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">3</span>)  <span class="comment">#array([3, 3, 5])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shuffle 把一个数组进行随机排列</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">np.random.shuffle(a) </span><br><span class="line">a  <span class="comment">#array([6, 3, 5, 1, 0, 8, 4, 9, 2, 7])</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">a  <span class="comment">#array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果数组是多维的  则只会在第一维度打散数据</span></span><br><span class="line">np.random.shuffle(a)</span><br><span class="line">a  <span class="comment">#array([[10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [ 5, 6, 7, 8, 9], [ 0, 1, 2, 3, 4]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permutation 把一个数组进行随机排列  或者数字的全排列</span></span><br><span class="line">np.random.permutation(<span class="number">10</span>)  <span class="comment">#array([4, 9, 8, 7, 3, 5, 6, 1, 0, 2])</span></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">arr  <span class="comment">#array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permutation 与 shuffle 函数功能相同  区别在于：</span></span><br><span class="line"><span class="comment"># 注意 permutation不会更改原来的arr 会返回一个新的copy</span></span><br><span class="line">np.random.permutation(arr)  <span class="comment">#array([[3, 4, 5], [6, 7, 8], [0, 1, 2]])</span></span><br><span class="line">arr  <span class="comment">#array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])</span></span><br></pre></td></tr></table></figure><h4 id="NumPy-的数组索引"><a href="#NumPy-的数组索引" class="headerlink" title="NumPy 的数组索引"></a>NumPy 的数组索引</h4><ol><li>基础索引：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一维向量</span></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x  <span class="comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维向量 一般用大写字母</span></span><br><span class="line">Y = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">Y  <span class="comment">#array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取索引从2到 倒数第一个（不包含倒数第一个）</span></span><br><span class="line">x[<span class="number">2</span>:-<span class="number">1</span>]  <span class="comment">#array([2, 3, 4, 5, 6, 7, 8])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取第1行第1列的数 </span></span><br><span class="line"><span class="comment"># 注意：索引是从0开始的，我们日常所说的第1行，它的索引值是0</span></span><br><span class="line">Y[<span class="number">0</span>, <span class="number">0</span>]  <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取索引为第2行的数据</span></span><br><span class="line">Y[<span class="number">2</span>]  <span class="comment">#array([10, 11, 12, 13, 14])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取索引为第2列的数据</span></span><br><span class="line">Y[:,<span class="number">2</span>]  <span class="comment">#array([ 2, 7, 12, 17])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：切片的修改会修改原来的数组</span></span><br><span class="line"><span class="comment">#原因：numpy经常要处理大数组，避免每次都复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改x的第0-2（不包含2）数据</span></span><br><span class="line">x[:<span class="number">2</span>] = <span class="number">666</span></span><br><span class="line">x  <span class="comment">#array([666, 666, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure><ol><li>神奇索引（即用整数数组进行的索引）：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x  <span class="comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line">x[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]  <span class="comment">#array([2, 3, 4])</span></span><br><span class="line">indexs = np.array([[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>]])</span><br><span class="line">x[indexs]  <span class="comment">#array([[0, 2], [1, 3]])</span></span><br></pre></td></tr></table></figure><p>获取数组中最大的前 n 个数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机生成1-100之间的10个数字</span></span><br><span class="line">arr = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">arr  <span class="comment">#array([37, 30, 76, 20, 63, 80, 42, 83, 91, 67])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arr.argsort() 会返回排序后的索引index</span></span><br><span class="line"><span class="comment"># 取最大值对应的3个下标</span></span><br><span class="line">arr.argsort()[-<span class="number">3</span>:]  <span class="comment">#array([5, 7, 8], dtype=int64)</span></span><br><span class="line">arr[arr.argsort()[-<span class="number">3</span>:]]  <span class="comment">#array([80, 83, 91])</span></span><br></pre></td></tr></table></figure><p>对于二维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Y = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">Y  <span class="comment">#array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span></span><br><span class="line"><span class="comment"># 筛选多行，列可以省略</span></span><br><span class="line">Y[[<span class="number">0</span>,<span class="number">2</span>]]  <span class="comment">#array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span></span><br><span class="line">Y[[<span class="number">0</span>,<span class="number">2</span>],:]  <span class="comment">#array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选多列 行不能省略</span></span><br><span class="line">Y[:,[<span class="number">0</span>, <span class="number">2</span>]]  <span class="comment">#array([[ 0, 2], [ 5, 7], [10, 12], [15, 17]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时指定行列</span></span><br><span class="line">Y[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]  <span class="comment">#array([ 1, 12, 18])</span></span><br></pre></td></tr></table></figure><ol><li>布尔索引：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x  <span class="comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回bool值的数组</span></span><br><span class="line">x&gt;<span class="number">5</span>  <span class="comment">#array([False, False, False, False, False, False, True, True, True, True])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回通过条件判断的数组</span></span><br><span class="line">x[x&gt;<span class="number">5</span>]  <span class="comment">#array([6, 7, 8, 9])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过条件进行赋值</span></span><br><span class="line">x[x&lt;=<span class="number">5</span>] = <span class="number">0</span></span><br><span class="line">x[x&gt;<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">x  <span class="comment">#array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1])</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x[x&lt;<span class="number">5</span>] += <span class="number">20</span></span><br><span class="line">x  <span class="comment">#array([20, 21, 22, 23, 24, 5, 6, 7, 8, 9])</span></span><br></pre></td></tr></table></figure><p>对于二维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Y = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">Y  <span class="comment">#array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]])</span></span><br><span class="line"></span><br><span class="line">Y &gt; <span class="number">5</span>  <span class="comment">#array([[False, False, False, False, False], [False, True, True, True, True], [ True, True, True, True, True], [ True, True, True, True, True]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Y&gt;5 的boolean数组 既有行又有列 因此返回的是 行列一维数组</span></span><br><span class="line">Y[Y&gt;<span class="number">5</span>]  <span class="comment">#array([ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])</span></span><br><span class="line"></span><br><span class="line">Y[:, <span class="number">3</span>]  <span class="comment">#array([ 3, 8, 13, 18])</span></span><br><span class="line"></span><br><span class="line">Y[:, <span class="number">3</span>]&gt;<span class="number">5</span>  <span class="comment">#array([False, True, True, True])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把第3列大于5的行数据筛选出来</span></span><br><span class="line">Y[:, <span class="number">3</span>][Y[:, <span class="number">3</span>]&gt;<span class="number">5</span>]  <span class="comment">#array([ 8, 13, 18])</span></span><br></pre></td></tr></table></figure><p>条件的组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x  <span class="comment">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span></span><br><span class="line"></span><br><span class="line">condition = (x%<span class="number">2</span>==<span class="number">0</span>)| (x&gt;<span class="number">7</span>)</span><br><span class="line">condition  <span class="comment">#array([ True, False, True, False, True, False, True, False, True, True])</span></span><br><span class="line"></span><br><span class="line">x[condition]  <span class="comment">#array([0, 2, 4, 6, 8, 9])</span></span><br></pre></td></tr></table></figure><h3 id="三、NumPy-的操作与函数"><a href="#三、NumPy-的操作与函数" class="headerlink" title="三、NumPy 的操作与函数"></a>三、NumPy 的操作与函数</h3><h4 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">A  = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">A  <span class="comment">#array([[0, 1, 2], [3, 4, 5]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于 A中的每个数据都+1</span></span><br><span class="line">A+<span class="number">1</span>  <span class="comment">#array([[1, 2, 3], [4, 5, 6]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于 A中的每个数据都*3</span></span><br><span class="line">A*<span class="number">3</span>  <span class="comment">#array([[ 0, 3, 6], [ 9, 12, 15]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三角函数</span></span><br><span class="line">np.sin(A)  <span class="comment">#array([[ 0. , 0.84147098, 0.90929743], [ 0.14112001, -0.7568025 , -0.95892427]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指数函数</span></span><br><span class="line">np.exp(A)  <span class="comment">#array([[ 1. , 2.71828183, 7.3890561 ], [ 20.08553692, 54.59815003, 148.4131591 ]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵运算</span></span><br><span class="line">B  = np.arange(<span class="number">6</span>,<span class="number">12</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">B  <span class="comment">#array([[ 6, 7, 8], [ 9, 10, 11]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应位置元素相加</span></span><br><span class="line">A + B  <span class="comment">#array([[ 6, 8, 10], [12, 14, 16]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应位置元素相减</span></span><br><span class="line">A - B   <span class="comment">#array([[-6, -6, -6], [-6, -6, -6]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应位置元素相乘</span></span><br><span class="line">A*B  <span class="comment">#array([[ 0, 7, 16], [27, 40, 55]])</span></span><br></pre></td></tr></table></figure><h4 id="NumPy-的数学统计函数"><a href="#NumPy-的数学统计函数" class="headerlink" title="NumPy 的数学统计函数"></a>NumPy 的数学统计函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr  <span class="comment">#array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">np.<span class="built_in">sum</span>(arr)  <span class="comment">#66</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘积</span></span><br><span class="line">np.prod(arr)  <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 累加</span></span><br><span class="line">np.cumsum(arr)  <span class="comment">#array([ 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66], dtype=int32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 累乘</span></span><br><span class="line">np.cumprod(arr)  <span class="comment">#array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小值</span></span><br><span class="line">np.<span class="built_in">min</span>(arr)  <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大值</span></span><br><span class="line">np.<span class="built_in">max</span>(arr)  <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求取数列第?分位的数值</span></span><br><span class="line">np.percentile(arr,[<span class="number">25</span>,<span class="number">50</span>,<span class="number">75</span>])  <span class="comment">#array([2.75, 5.5 , 8.25])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能同上面  只不过范围为0-1直接</span></span><br><span class="line">np.quantile(arr,[<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.75</span>])  <span class="comment">#array([2.75, 5.5 , 8.25])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中位数</span></span><br><span class="line">np.median(arr)  <span class="comment">#5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">np.mean(arr)  <span class="comment">#5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差</span></span><br><span class="line">np.std(arr)  <span class="comment">#3.452052529534663</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方差</span></span><br><span class="line">np.var(arr)  <span class="comment">#11.916666666666666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加权平均</span></span><br><span class="line"><span class="comment"># weights 的 shape 需要和 arr 一样</span></span><br><span class="line">weights = np.random.rand(*arr.shape)</span><br><span class="line">np.average(arr, weights=weights)  <span class="comment">#5.355698948848374</span></span><br></pre></td></tr></table></figure><h4 id="NumPy-的-axis参数"><a href="#NumPy-的-axis参数" class="headerlink" title="NumPy 的 axis参数"></a>NumPy 的 <code>axis</code>参数</h4><p><code>axis=0</code> 代表行，<code>axis=1</code> 代表列，对于 <code>sum/mean/media</code> 等聚合函数：</p><ul><li><code>axis=0</code> 代表把行消解掉，<code>axis=1</code> 代表把列消解掉；</li><li><code>axis=0</code>代表跨行计算，<code>axis=1</code> 代表跨列计算。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">arr  <span class="comment">#array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当axis=0的时候，我们可以将数据和轴组成的整体看作是一串竖着摆放的糖葫芦</span></span><br><span class="line"><span class="comment">#此时[ 0, 1, 2, 3]、[ 4, 5, 6, 7]、[ 8, 9, 10, 11]可以分别看作是糖葫芦的三个果子，互相做运算</span></span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">0</span>)  <span class="comment">#array([12, 15, 18, 21])</span></span><br><span class="line"></span><br><span class="line">arr.<span class="built_in">sum</span>(axis=<span class="number">1</span>)  <span class="comment">#array([ 6, 22, 38])</span></span><br><span class="line"></span><br><span class="line">arr.cumsum(axis=<span class="number">0</span>)  <span class="comment">#array([[ 0, 1, 2, 3], [ 4, 6, 8, 10], [12, 15, 18, 21]], dtype=int32)</span></span><br><span class="line"></span><br><span class="line">arr.cumsum(axis=<span class="number">1</span>)  <span class="comment">#array([[ 0, 1, 3, 6], [ 4, 9, 15, 22], [ 8, 17, 27, 38]], dtype=int32)</span></span><br><span class="line"></span><br><span class="line">mean = np.mean(arr, axis=<span class="number">0</span>)</span><br><span class="line">mean  <span class="comment">#array([4., 5., 6., 7.])</span></span><br><span class="line"></span><br><span class="line">std = np.std(arr,axis=<span class="number">0</span>)</span><br><span class="line">std  <span class="comment">#array([3.26598632, 3.26598632, 3.26598632, 3.26598632])</span></span><br><span class="line"></span><br><span class="line">result = arr-mean</span><br><span class="line">result  <span class="comment">#array([[-4., -4., -4., -4.], [ 0., 0., 0., 0.], [ 4., 4., 4., 4.]])</span></span><br></pre></td></tr></table></figure><h4 id="给数组添加维度"><a href="#给数组添加维度" class="headerlink" title="给数组添加维度"></a>给数组添加维度</h4><p>建立一个一维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">5</span>)</span><br><span class="line">arr  <span class="comment">#array([0, 1, 2, 3, 4])</span></span><br><span class="line">arr.shape  <span class="comment">#(5,)</span></span><br></pre></td></tr></table></figure><ol><li><code>np.newaxis</code> 关键字：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#np.newaxis 就是None的别名</span></span><br><span class="line">np.newaxis <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment">#True</span></span><br><span class="line">np.newaxis == <span class="literal">None</span>  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给一维向量添加一个行维度</span></span><br><span class="line">arr[np.newaxis, :]  <span class="comment">#array([[0, 1, 2, 3, 4]])</span></span><br><span class="line">arr[np.newaxis, :].shape  <span class="comment">#(1, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给一维向量添加一个列维度</span></span><br><span class="line">arr[:, np.newaxis]  <span class="comment">#array([[0], [1], [2], [3], [4]])</span></span><br><span class="line">arr[:,np.newaxis].shape  <span class="comment">#(5, 1)</span></span><br></pre></td></tr></table></figure><ol><li><code>np.expand_dims</code> 方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给一维向量添加一个行维度</span></span><br><span class="line">np.expand_dims(arr, axis=<span class="number">0</span>)  <span class="comment">#array([[0, 1, 2, 3, 4]])</span></span><br><span class="line">np.expand_dims(arr,axis=<span class="number">0</span>).shape  <span class="comment">#(1, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给一维向量添加一个列维度</span></span><br><span class="line">np.expand_dims(arr,axis=<span class="number">1</span>)  <span class="comment">#array([[0], [1], [2], [3], [4]])</span></span><br><span class="line">np.expand_dims(arr,axis=<span class="number">1</span>).shape  <span class="comment">#(5, 1)</span></span><br></pre></td></tr></table></figure><ol><li><code>np.reshape</code> 方法：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">np.reshape(arr, (<span class="number">1</span>,<span class="number">5</span>))  <span class="comment">#array([[0, 1, 2, 3, 4]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -1表示 自动计算出结果  </span></span><br><span class="line">np.reshape(arr,(<span class="number">1</span>,-<span class="number">1</span>))  <span class="comment">#array([[0, 1, 2, 3, 4]])</span></span><br><span class="line"></span><br><span class="line">np.reshape(arr,(<span class="number">1</span>,-<span class="number">1</span>)).shape  <span class="comment">#(1, 5)</span></span><br><span class="line"></span><br><span class="line">np.reshape(arr,(-<span class="number">1</span>,<span class="number">1</span>))  <span class="comment">#array([[0], [1], [2], [3], [4]])</span></span><br><span class="line"></span><br><span class="line">np.reshape(arr,(-<span class="number">1</span>,<span class="number">1</span>)).shape  <span class="comment">#(5, 1)</span></span><br></pre></td></tr></table></figure><h4 id="数组合并、插入操作"><a href="#数组合并、插入操作" class="headerlink" title="数组合并、插入操作"></a>数组合并、插入操作</h4><p>合并行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b = np.arange(<span class="number">6</span>,<span class="number">18</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">a  <span class="comment">#array([[0, 1, 2], [3, 4, 5]])</span></span><br><span class="line">b  <span class="comment">#array([[ 6, 7, 8], [ 9, 10, 11], [12, 13, 14], [15, 16, 17]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首尾合并</span></span><br><span class="line">np.concatenate([a,b])  <span class="comment">#array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11], [12, 13, 14], [15, 16, 17]])</span></span><br><span class="line">np.vstack([a,b])  <span class="comment">#array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11], [12, 13, 14], [15, 16, 17]])</span></span><br><span class="line">np.row_stack([a,b])  <span class="comment">#array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11], [12, 13, 14], [15, 16, 17]])</span></span><br></pre></td></tr></table></figure><p>合并列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a  <span class="comment">#array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]])</span></span><br><span class="line">b = np.arange(<span class="number">12</span>,<span class="number">18</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">b  <span class="comment">#array([[12, 13], [14, 15], [16, 17]])</span></span><br><span class="line"></span><br><span class="line">np.concatenate([a,b],axis=<span class="number">1</span>)  <span class="comment">#array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], [ 8, 9, 10, 11, 16, 17]])</span></span><br><span class="line">np.hstack([a,b])  <span class="comment">#array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], [ 8, 9, 10, 11, 16, 17]])</span></span><br><span class="line">np.column_stack([a,b])  <span class="comment">#array([[ 0, 1, 2, 3, 12, 13], [ 4, 5, 6, 7, 14, 15], [ 8, 9, 10, 11, 16, 17]])</span></span><br></pre></td></tr></table></figure><p>插入数组到指定位置（<code>np.insert(arr, obj, values, axis)</code> ）： </p><ul><li><code>arr</code> 是原始数组，可一可多，<code>obj</code> 是插入元素位置，<code>values</code> 是是插入内容，<code>axis</code> 是按行按列插入。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入的数组是一维的</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line">np.insert(a, <span class="number">0</span>, <span class="number">9</span>)  <span class="comment">#array([9, 1, 4, 6, 5, 6, 8])</span></span><br><span class="line"><span class="comment">#插入元素都是在所给位置之前</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多维：如果axis没有给出，相当于是做降维操作，与一维数组一致</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.insert(a,<span class="number">1</span>,<span class="number">11</span>,axis = <span class="number">1</span>)  <span class="comment">#array([[ 1, 11,  2], [ 3, 11,  4], [ 5, 11,  6]])</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.insert(a,<span class="number">1</span>,[<span class="number">2</span>,<span class="number">6</span>],axis = <span class="number">0</span>)  <span class="comment">#array([[1, 2], [2, 6], [3, 4], [5, 6]])</span></span><br></pre></td></tr></table></figure><h4 id="数组的拷贝、去重操作"><a href="#数组的拷贝、去重操作" class="headerlink" title="数组的拷贝、去重操作"></a>数组的拷贝、去重操作</h4><p>数组的拷贝：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先创建一个从 0 到 50，并且平分元素为 10 个的数组</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">50</span>, <span class="number">10</span>)  </span><br><span class="line">x  <span class="comment">#array([ 0.        ,  5.55555556, 11.11111111, 16.66666667, 22.22222222,27.77777778, 33.33333333, 38.88888889, 44.44444444, 50.        ])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用view方法拷贝</span></span><br><span class="line">y = x.view()  </span><br><span class="line">y  <span class="comment">#array([ 0.        ,  5.55555556, 11.11111111, 16.66666667, 22.22222222, 27.77777778, 33.33333333, 38.88888889, 44.44444444, 50.        ])</span></span><br><span class="line"><span class="comment">#view方法如果对拷贝后的元素进行修改，会影响到原来的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用copy方法拷贝</span></span><br><span class="line">z = x.copy() </span><br><span class="line">z  <span class="comment">#array([ 0.        ,  5.55555556, 11.11111111, 16.66666667, 22.22222222, 27.77777778, 33.33333333, 38.88888889, 44.44444444, 50.        ])</span></span><br></pre></td></tr></table></figure><p>去除重复的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="string">&#x27;鸡蛋&#x27;</span>, <span class="string">&#x27;鸭蛋&#x27;</span>, <span class="string">&#x27;龟蛋&#x27;</span>, <span class="string">&#x27;鸵鸟蛋&#x27;</span>, <span class="string">&#x27;鸭蛋&#x27;</span>, <span class="string">&#x27;龟蛋&#x27;</span>, <span class="string">&#x27;鸵鸟蛋&#x27;</span>])</span><br><span class="line">arr2 = np.unique(arr)</span><br><span class="line"><span class="built_in">print</span>( arr2 )  <span class="comment">#[&#x27;鸡蛋&#x27; &#x27;鸭蛋&#x27; &#x27;鸵鸟蛋&#x27; &#x27;龟蛋&#x27;]</span></span><br></pre></td></tr></table></figure><p>删除数组指定位置的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([<span class="string">&#x27;鸡蛋&#x27;</span>, <span class="string">&#x27;鸭蛋&#x27;</span>, <span class="string">&#x27;鸵鸟蛋&#x27;</span>, <span class="string">&#x27;龟蛋&#x27;</span>])</span><br><span class="line">np.delete(arr, <span class="number">3</span>)  <span class="comment">#array([&#x27;鸡蛋&#x27;, &#x27;鸭蛋&#x27;, &#x27;鸵鸟蛋&#x27;], dtype=&#x27;&lt;U3&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="四、Pandas-的基础操作"><a href="#四、Pandas-的基础操作" class="headerlink" title="四、Pandas 的基础操作"></a>四、Pandas 的基础操作</h3><h4 id="选择表格（DataFrame）中的行或者列"><a href="#选择表格（DataFrame）中的行或者列" class="headerlink" title="选择表格（DataFrame）中的行或者列"></a>选择表格（DataFrame）中的行或者列</h4><p>从 Python 字典生成 <code>DataFrame</code> 表格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建表格</span></span><br><span class="line">workout_dict = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">45</span>],</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: [<span class="string">&#x27;run&#x27;</span>, <span class="string">&#x27;walk&#x27;</span>, <span class="string">&#x27;walk&#x27;</span>, <span class="string">&#x27;run&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">workout = pd.DataFrame(workout_dict)</span><br><span class="line">display(workout)</span><br></pre></td></tr></table></figure><p>查看列名/索引（column index）和行索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workout.columns  <span class="comment">#Index([&#x27;calories&#x27;, &#x27;duration&#x27;, &#x27;type&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line">workout.index  <span class="comment">#RangeIndex(start=0, stop=4, step=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转换成其他数据类型</span></span><br><span class="line">workout.columns.tolist()  <span class="comment">#[&#x27;calories&#x27;, &#x27;duration&#x27;, &#x27;type&#x27;]</span></span><br><span class="line">workout.index.to_numpy()  <span class="comment">#array([0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><p>当然我们也可以单独指定/改变索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接重新赋值行索引</span></span><br><span class="line">workout.index=[<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>, <span class="string">&quot;day4&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接重新赋值列列名/索引</span></span><br><span class="line">workout.columns=[<span class="string">&quot;Calories&quot;</span>, <span class="string">&quot;Duration&quot;</span>, <span class="string">&quot;Type&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独改变某一列列名/索引</span></span><br><span class="line">workout = workout.rename(columns=&#123;<span class="string">&quot;Calories&quot;</span>: <span class="string">&quot;Cal&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换回dict字典</span></span><br><span class="line">workout_dict = workout.to_dict()</span><br><span class="line"></span><br><span class="line"><span class="comment">#在构建pandas时单独指定索引</span></span><br><span class="line">workout = pd.DataFrame(workout_dict, index=[<span class="string">&#x27;day1&#x27;</span>, <span class="string">&#x27;day2&#x27;</span>, <span class="string">&#x27;day3&#x27;</span>, <span class="string">&#x27;day4&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用reset_index()重新建立索引，把成为索引的列恢复成正常列</span></span><br><span class="line">survive_by_class = survive_by_class.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># set_index与reset_index互为逆运算</span></span><br><span class="line">survive_by_class.set_index([<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>])</span><br></pre></td></tr></table></figure><p>访问表格中的列与行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择一列</span></span><br><span class="line">workout[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择一列（保留列表形式）</span></span><br><span class="line">workout[[<span class="string">&#x27;Calories&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#loc: 根据索引选取数据</span></span><br><span class="line">workout.loc[<span class="string">&#x27;day1&#x27;</span>, :]</span><br><span class="line"></span><br><span class="line"><span class="comment">#保留DataFrame格式</span></span><br><span class="line">workout.loc[[<span class="string">&#x27;day1&#x27;</span>], :]</span><br><span class="line"></span><br><span class="line"><span class="comment">#iloc: 根据位置选取数据，从0开始编号（类比: 访问list中的数据）</span></span><br><span class="line">workout.iloc[<span class="number">0</span>, :]</span><br><span class="line">workout.iloc[[<span class="number">0</span>], :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问表格左上角前两行前两列的数据</span></span><br><span class="line">workout.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># workout.iloc[[0,1], [0,1]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#.at[]: 访问单独数据</span></span><br><span class="line">workout.at[<span class="string">&#x27;day1&#x27;</span>, <span class="string">&#x27;calories&#x27;</span>]  <span class="comment">#420</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变单个数据的值</span></span><br><span class="line">workout.at[<span class="string">&#x27;day1&#x27;</span>, <span class="string">&#x27;calories&#x27;</span>] = <span class="number">800</span></span><br></pre></td></tr></table></figure><h4 id="数据的输出-输入"><a href="#数据的输出-输入" class="headerlink" title="数据的输出/输入"></a>数据的输出/输入</h4><p>读取外部文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如若txt文件是用Tab分隔的，指定分隔符为&quot;\t&quot;</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;imdb_top_10000.txt&#x27;</span>, sep=<span class="string">&quot;\t&quot;</span>)</span><br></pre></td></tr></table></figure><p>导出到文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">&#x27;test.csv&#x27;</span>, header=<span class="literal">True</span>, index=<span class="literal">True</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>names</code> 设置列标题行，使用<code>index_col=0</code>，直接将第一列作为索引，不额外添加列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;rating&#x27;</span>,<span class="string">&#x27;votes&#x27;</span>,<span class="string">&#x27;length&#x27;</span>,<span class="string">&#x27;genres&#x27;</span>]</span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;imdb_top_10000.txt&#x27;</span>, sep=<span class="string">&quot;\t&quot;</span>, names=names, index_col=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>使用 Pandas 方法查看表格信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印表格的行数</span></span><br><span class="line"><span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印表格的形状(行数与列数)</span></span><br><span class="line">data.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认返回前5行，也可以在在方法中指定行数</span></span><br><span class="line">data.head()</span><br><span class="line">data.head(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认返回倒数5行，也可以在方法中指定行数</span></span><br><span class="line">data.tail()</span><br><span class="line">data.tail(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机返回5行数据</span></span><br><span class="line">data.sample(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回统计性信息（索引、每一列的信息、表格占用电脑内存的大小）等。</span></span><br><span class="line">data.info()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回表格中所有数字类型列的分布信息（平均值、标准偏差）等。</span></span><br><span class="line">data.describe()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回每一列的数据类型信息</span></span><br><span class="line">data.dtypes</span><br></pre></td></tr></table></figure><p>表格列搜索排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按rating从高到低排序</span></span><br><span class="line">data.sort_values(by=<span class="string">&#x27;rating&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印所有的不重复的元素</span></span><br><span class="line">data[<span class="string">&#x27;year&#x27;</span>].unique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 使用for loop 查看每一列的独特值</span></span><br><span class="line"><span class="comment"># for col in titanic.columns:</span></span><br><span class="line"><span class="comment">#     print(&#x27;列名：&#x27;, col, titanic[col].unique())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组title、year两列</span></span><br><span class="line">data[[<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;year&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回特定数值</span></span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].mean()</span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].<span class="built_in">max</span>()</span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].<span class="built_in">min</span>()</span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].value_counts()</span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].value_counts().sort_index()</span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].value_counts().sort_index(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>删除一些列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除一列</span></span><br><span class="line"><span class="keyword">del</span> titanic[<span class="string">&#x27;SibSp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多个列</span></span><br><span class="line">titanic = titanic.drop(columns=[<span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Ticket&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>])</span><br><span class="line"><span class="comment"># titanic.drop(columns=[&#x27;Parch&#x27;, &#x27;Ticket&#x27;, &#x27;Fare&#x27;], inplace=True)</span></span><br></pre></td></tr></table></figure><p>高级选择：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看看特定年份之后的所有数据</span></span><br><span class="line">data[data[<span class="string">&#x27;year&#x27;</span>] &gt; <span class="number">1995</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找特定年份的电影</span></span><br><span class="line">data[data[<span class="string">&#x27;year&#x27;</span>] == <span class="number">1966</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找一个范围</span></span><br><span class="line">data[(data[<span class="string">&#x27;year&#x27;</span>] &gt; <span class="number">1995</span>) &amp; (data[<span class="string">&#x27;year&#x27;</span>] &lt; <span class="number">2000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找1996年至1999年收视率最高的电影</span></span><br><span class="line">data[(data[<span class="string">&#x27;year&#x27;</span>] &gt; <span class="number">1995</span>) &amp; (data[<span class="string">&#x27;year&#x27;</span>] &lt; <span class="number">2000</span>)].sort_values(by=<span class="string">&#x27;rating&#x27;</span>, ascending=<span class="literal">False</span>).head(<span class="number">10</span>) </span><br></pre></td></tr></table></figure><p>根据列的值分类，对每个类型集计信息（groupby）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印表格中的男女数量分布</span></span><br><span class="line">titanic[[<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;PassengerId&#x27;</span>]].groupby([<span class="string">&#x27;Sex&#x27;</span>]).count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对多列进行信息集计</span></span><br><span class="line"><span class="comment"># 每个船舱等级乘客生存和死亡的概率</span></span><br><span class="line">survive_by_class = titanic[[<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>, <span class="string">&#x27;PassengerId&#x27;</span>]].groupby([<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>]).count()</span><br><span class="line"></span><br><span class="line">survive_by_class = survive_by_class.reset_index()</span><br><span class="line">survive_by_class = survive_by_class.rename(columns=&#123;<span class="string">&quot;PassengerId&quot;</span>: <span class="string">&quot;count&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每年电影的平均评分</span></span><br><span class="line">data.groupby(data[<span class="string">&#x27;year&#x27;</span>])[<span class="string">&#x27;rating&#x27;</span>].mean()</span><br></pre></td></tr></table></figure><p>根据列的值，动态选择记录（filter）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#isnull 返回是否缺失的值，缺失返回True</span></span><br><span class="line"><span class="comment">#～表示按位取反</span></span><br><span class="line">filt = (~titanic[<span class="string">&#x27;Age&#x27;</span>].isnull())  <span class="comment"># &amp; | ~</span></span><br><span class="line">titanic = titanic.loc[filt, :]</span><br><span class="line">titanic.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年龄中位数</span></span><br><span class="line">titanic[[<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]].groupby([<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>]).median()</span><br></pre></td></tr></table></figure><p><img src="https://blog.zhuangzhihao.top/img/pandas.png" alt></p><p>使用 <code>agg</code> 可以完成很多统计量的计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">percentile_25</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x.quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">percentile_75</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x.quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">age_agg = titanic[[<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]].groupby([<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Survived&#x27;</span>]).agg(</span><br><span class="line">    [<span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;median&#x27;</span>, <span class="string">&#x27;mean&#x27;</span>, <span class="built_in">len</span>, np.std, percentile_25, percentile_75])</span><br><span class="line"></span><br><span class="line">age_agg</span><br></pre></td></tr></table></figure><h3 id="五、可视化表格"><a href="#五、可视化表格" class="headerlink" title="五、可视化表格"></a>五、可视化表格</h3><p>一旦我们评估了数据，可以以更直观的形式绘制数据可能会有用。我们使用 Matplotlib 库来做到这一点。Matplotlib是一个 Python 2D 绘图库，以各种格式生成数字。使用 Matplotlib 可以轻松生成绘图、直方图、框图、功率谱、条形图、饼图、误差图、散点图等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认Plot</span></span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片参数</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>),dpi=<span class="number">600</span>,facecolor=<span class="string">&#x27;white&#x27;</span>,edgecolor=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#做一个散点图：</span></span><br><span class="line">data.plot(kind=<span class="string">&#x27;scatter&#x27;</span>, x=<span class="string">&#x27;rating&#x27;</span>, y=<span class="string">&#x27;votes&#x27;</span>, alpha=<span class="string">&#x27;0.3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#做一个矩形图</span></span><br><span class="line">data[<span class="string">&#x27;rating&#x27;</span>].plot(kind=<span class="string">&#x27;hist&#x27;</span>)</span><br></pre></td></tr></table></figure><p>查看 DataFrame.plot <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html">文档</a>，您会发现创建所有不同的变体的方法。</p><p>另一个绘图库是 Seaborn。Seaborn 是一个基于 matplotlib 的 Python 数据可视化库。它提供了一个高级界面，用于绘制有吸引力且信息丰富的统计图形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">plt.figure(facecolor=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">&#x27;rating&#x27;</span>, y=<span class="string">&#x27;votes&#x27;</span>, data=data)</span><br><span class="line"><span class="comment">#这是一个与使用Matplotlib非常相似的绘图，但有一个自动线性回归来解释数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Seaborn能做的另一件很酷的事情是pairplot，它会自动绘制所有数字列相互比较的图像</span></span><br><span class="line">sns.pairplot(data)</span><br></pre></td></tr></table></figure><p>现在我们已经可视化了数据，我们挖掘出了一个普通的最小二乘（或OLS）回归。如果对计算统计数据感兴趣，有一个名为 <a href="http://www.statsmodels.org/stable/index.html">StatsModels</a> 的库可以帮助您做到这一点。StatsModels为估计许多不同的统计模型以及进行统计测试和统计数据探索提供了类和功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 研究一个普通的最小二乘（或OLS）回归</span></span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line">results = sm.OLS(data[<span class="string">&quot;votes&quot;</span>], data[<span class="string">&quot;rating&quot;</span>]).fit()</span><br><span class="line">results.summary()</span><br></pre></td></tr></table></figure><h3 id="六、数据清洗"><a href="#六、数据清洗" class="headerlink" title="六、数据清洗"></a>六、数据清洗</h3><p>数据清理是数据分析的重要组成部分。为了进行适当的分析，您必须确保您的数据干净且没有错误。</p><p>例如，如果想去除电影标题后的年份，可以字符串切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The Dark Knight(2008)</span></span><br><span class="line">data[<span class="string">&#x27;formatted title&#x27;</span>] = data[<span class="string">&#x27;title&#x27;</span>].<span class="built_in">str</span>[:-<span class="number">7</span>]  <span class="comment">#The Dark Knight</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#另一种方法，寻找括号并拆分它们（将一些东西分成一个列表）</span></span><br><span class="line">data[<span class="string">&#x27;title&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;\(&#x27;</span>).<span class="built_in">str</span>[<span class="number">0</span>] </span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">data[<span class="string">&#x27;title&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;\(&#x27;</span>).<span class="built_in">str</span>.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>又如，如果想去除时长后的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#142 mins.</span></span><br><span class="line">data[<span class="string">&#x27;length&#x27;</span>].<span class="built_in">str</span>(-<span class="number">6</span>)  <span class="comment">#142</span></span><br><span class="line">data[<span class="string">&#x27;length&#x27;</span>].<span class="built_in">str</span>.split().<span class="built_in">str</span>.get(<span class="number">0</span>)  <span class="comment">#142</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#问题是Jupyter仍然认为这是一根字符串，但我们可以快速将其转换为整数</span></span><br><span class="line">data[<span class="string">&#x27;length&#x27;</span>].<span class="built_in">str</span>.split().<span class="built_in">str</span>.get(<span class="number">0</span>).astype(<span class="string">&#x27;int&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">data[<span class="string">&#x27;length&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27; min &#x27;</span>, <span class="string">&#x27; &#x27;</span> ).astype(<span class="string">&#x27;int)</span></span><br></pre></td></tr></table></figure><p>当我们将其转换为格式化的长度列时，就像我们创建格式化的标题列一样，我们就可以在与所有其他数字列的配对绘图中正确地看到它。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;NumPy 是 Numerical Python 的缩写，是一个开源的 Python 科学计算库，也是 SciPy、Scikit-Learn、tenorflow、paddlepaddle 等各种数据科学类库的基础库。使用 NumPy 可以方便的使用数组、矩阵进行计算。Pandas 是基于 NumPy 数组构建的，但二者最大的不同是 Pandas 是专门为处理表格和混杂数据设计的，适用于统计分析中的表结构，而 NumPy 更适合处理统一的数值数组数据。虽然在之前已经在 &lt;a href=&quot;/Python-for-Data-Science&quot;&gt;Python for Data Science&lt;/a&gt; 一课中学习并整理英文笔记，但我认为还是有必要对于数据处理中的基础内容、工作流程和注意事项进行详细补充。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="人工智能与数据科学" scheme="http://blog.zhuangzhihao.top/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Pandas" scheme="http://blog.zhuangzhihao.top/tags/Pandas/"/>
    
    <category term="NumPy" scheme="http://blog.zhuangzhihao.top/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>Selenium for Python</title>
    <link href="http://blog.zhuangzhihao.top/Selenium%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.zhuangzhihao.top/Selenium%E7%88%AC%E8%99%AB/</id>
    <published>2022-11-30T16:00:00.000Z</published>
    <updated>2023-01-06T12:36:55.480Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.seleniumhq.org/">Selenium</a> 是一个 Web 的自动化测试工具，最初是为网站自动化测试而开发的，Selenium 可以直接运行在浏览器上，它支持所有主流的浏览器。因为 Selenium 可以控制浏览器发送请求，并获取网页数据，因此可以应用于爬虫领域。Selenium 可以根据我们的指令，让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。Selenium Python bindings 提供了一个简单的 API，让你使用 Python 和 Selenium WebDriver 来编写功能/校验测试。 以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、Selenium-概述"><a href="#一、Selenium-概述" class="headerlink" title="一、Selenium 概述"></a>一、Selenium 概述</h3><p>Selenium 支持多平台、多浏览器、多语言去实现自动化测试，是一个开源和可移植的 Web 测试框架，支持并行测试执行，从而减少了时间并提高了测试效率。利用它，我们可以编写相关的自动化程序，让程序完全像人一样在浏览器里面操作 Web 界面，比如模拟鼠标点击、模拟键盘输入等等。不但能够操作 Web 界面，还能从 Web 中获取信息，并且相对来说，使用 Selenium 来获取信息更加简单，它的基本原理是我们编写自动化程序之后利用浏览器驱动直接对浏览器进行操作，只要我们用户能在浏览器上获得的信息使用 Selenium 都可以获得。</p><p>安装 Selenium：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium==3.3.1 4</span><br></pre></td></tr></table></figure><h3 id="二、浏览器驱动"><a href="#二、浏览器驱动" class="headerlink" title="二、浏览器驱动"></a>二、浏览器驱动</h3><p>Selenium 自己不带浏览器，不支持浏览器的功能，它需要与第三方浏览器结合在一起才能使用。浏览器驱动用于使用 selenium 操控本地浏览器执行自动化操作。根据本地电脑 Chrome 的版本需要下载对应的﻿﻿<a href="https://npmmirror.com/mirrors/chromedriver"> ChromeDriver</a>，否则无法操控 Chrome 浏览器使用 Selenium 启动。其他浏览器也可以下载对应的驱动包，例如：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads">新版 Edge 驱动</a>，<a href="https://github.com/mozilla/geckodriver/releases">Firefox 驱动</a>。</p><p>驱动包不需要安装，只需要解压到 <code>/usr/local/bin</code> 目录，后续会在代码中调用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> ~/Downloads/msedgedriver  /usr/local/bin</span><br></pre></td></tr></table></figure><p>由于 Safari 浏览器本身已经集成了 <code>safaridriver</code>，只要勾选 Safari - 开发 - 允许远程自动化并在终端输入开启即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">safaridriver --<span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h3 id="三、控制浏览器自动网页"><a href="#三、控制浏览器自动网页" class="headerlink" title="三、控制浏览器自动网页"></a>三、控制浏览器自动网页</h3><p>控制 Safari 浏览器打开网页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 webdriver</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># 调用环境变量指定的浏览器创建浏览器对象</span></span><br><span class="line">driver = webdriver.Safari()</span><br><span class="line"><span class="comment"># 隐性等待设置了一个时间，在一段时间内网页是否加载完成，如果完成了，就进行下一步；在设置的时间内没有加载完成，则会报超时加载。</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># get方法会一直等到页面被完全加载，然后才会继续程序</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># id=&quot;kw&quot;是百度搜索输入框，输入字符串&quot;长城&quot;</span></span><br><span class="line">driver.find_element(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;长城&#x27;</span>)</span><br><span class="line"><span class="comment"># id=&quot;su&quot;是百度搜索按钮，click() 是模拟点击</span></span><br><span class="line">driver.find_element(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 等待一定时间</span></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>当然也可以调用 Chrome 驱动，控制 Chrome 浏览器打开网页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 webdriver</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 调用键盘按键操作时需要引入的Keys包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># 调用环境变量指定的PhantomJS浏览器创建浏览器对象</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;/usr/local/bin/chromedriver&quot;</span>)</span><br><span class="line"><span class="comment"># get方法会一直等到页面被完全加载，然后才会继续程序，通常测试会在这里选择 time.sleep(2)</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class="line"><span class="comment"># id=&quot;kw&quot;是百度搜索输入框，输入字符串&quot;长城&quot;</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;#kw&quot;</span>).send_keys(<span class="string">&quot;长城&quot;</span>)</span><br><span class="line"><span class="comment"># id=&quot;su&quot;是百度搜索按钮，click() 是模拟点击</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;#su&quot;</span>).click()</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="四、常用操作"><a href="#四、常用操作" class="headerlink" title="四、常用操作"></a>四、常用操作</h3><h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4><p>获取单个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.ID,<span class="string">&quot;inputOriginal&quot;</span>)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;#inputOriginal&quot;</span>)</span><br><span class="line">driver.find_element(By.TAG_NAME,<span class="string">&quot;div&quot;</span>)</span><br><span class="line">driver.find_element(By.NAME,<span class="string">&quot;username&quot;</span>)</span><br><span class="line">driver.find_element(By.LINK_TEXT,<span class="string">&quot;下一页&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>如果找不到相应的元素会报错：<code>selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: xx</code>。</li></ul><p>获取多个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver.find_elements(By.ID,<span class="string">&quot;inputOriginal&quot;</span>)</span><br><span class="line">driver.find_elements(By.CSS_SELECTOR,<span class="string">&quot;#inputOriginal&quot;</span>)</span><br><span class="line">driver.find_elements(By.TAG_NAME,<span class="string">&quot;div&quot;</span>)</span><br><span class="line">driver.find_elements(By.NAME,<span class="string">&quot;username&quot;</span>)</span><br><span class="line">driver.find_elements(By.LINK_TEXT,<span class="string">&quot;下一页&quot;</span>)</span><br></pre></td></tr></table></figure><p>访问有道翻译网站，输入单词，并获取翻译后的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver = webdriver.Safari()</span><br><span class="line"><span class="comment"># 加载有道翻译页面</span></span><br><span class="line">driver.get(<span class="string">&quot;https://fanyi.youdao.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 获取输入框</span></span><br><span class="line"><span class="built_in">input</span> = driver.find_element(By.ID,<span class="string">&quot;inputOriginal&quot;</span>)</span><br><span class="line"><span class="comment"># 输入内容</span></span><br><span class="line"><span class="built_in">input</span>.send_keys(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment"># 获取翻译按钮</span></span><br><span class="line">tbtn = driver.find_element(By.ID,<span class="string">&quot;transMachine&quot;</span>)</span><br><span class="line"><span class="comment"># 发现页面被遮挡，此时无法点击</span></span><br><span class="line"><span class="comment"># 先获取遮挡的广告条，点击关闭按钮</span></span><br><span class="line">close_btn = driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;.guide-con .guide-close&quot;</span>)</span><br><span class="line">close_btn.click()</span><br><span class="line"><span class="comment">#点击翻译</span></span><br><span class="line">tbtn.click()</span><br><span class="line"><span class="comment">#获取翻译后的内容</span></span><br><span class="line">transTarget = driver.find_element(By.ID,<span class="string">&quot;transTarget&quot;</span>)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(transTarget.text)</span><br></pre></td></tr></table></figure><h4 id="内容获取"><a href="#内容获取" class="headerlink" title="内容获取"></a>内容获取</h4><ul><li><code>size</code>：返回元素大小；</li><li><code>text</code>：获取元素的文本（<code>&lt;div&gt;hello&lt;/div&gt;</code>）；</li><li><code>title</code>：获取页面 <code>title</code>；</li><li><code>current_url</code>：获取当前页面 <code>URL</code>；</li><li><code>get_attribute()</code>：获取属性值（<code>&lt;a href=&quot;xxxx&quot;&gt;百度&lt;/a&gt;</code>）；</li><li><code>is_display()</code>：判断元素是否可见；</li><li><code>is_enabled()</code>：判断元素是否可用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(<span class="string">&quot;./chromedriver.exe&quot;</span>)</span><br><span class="line"><span class="comment"># 加载有道翻译页面</span></span><br><span class="line">driver.get(<span class="string">&quot;https://fanyi.youdao.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入框</span></span><br><span class="line">transMachine = driver.find_element(By.ID,<span class="string">&quot;transMachine&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(transMachine.size)</span><br><span class="line"><span class="built_in">print</span>(transMachine.text)</span><br><span class="line"><span class="built_in">print</span>(transMachine.get_attribute(<span class="string">&quot;href&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(transMachine.is_displayed())</span><br><span class="line"><span class="built_in">print</span>(transMachine.is_enabled())</span><br></pre></td></tr></table></figure><h4 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h4><ul><li><code>maximize_window()</code>：模拟浏览器最大化按钮；</li><li><code>set_window_size(100,100)</code>：设置浏览器大小（宽、高像素点）；</li><li><code>set_window_position(300,200)</code>：设置浏览器位置；</li><li><code>back()</code>：模拟浏览器后退按钮；</li><li><code>forward()</code>：模拟浏览器前进按钮；</li><li><code>refresh()</code>：模拟浏览器 F5 刷新；</li><li><code>close()</code> ：模拟浏览器关闭按钮（关闭单个窗口）；</li><li><code>quit()</code>：关闭所有 WebDriver 启动的窗口。</li></ul><h3 id="五、元素等待"><a href="#五、元素等待" class="headerlink" title="五、元素等待"></a>五、元素等待</h3><p>例如对于程序翻页获取每页元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;./chromedriver.exe&quot;</span>)</span><br><span class="line"><span class="comment"># 加载当当网</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.dangdang.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入框</span></span><br><span class="line">key = driver.find_element(By.ID,<span class="string">&quot;key_S&quot;</span>)</span><br><span class="line">key.send_keys(<span class="string">&quot;科幻&quot;</span>)</span><br><span class="line"><span class="comment"># 获取搜索框，点击搜索</span></span><br><span class="line">search = driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;.search .button&quot;</span>)</span><br><span class="line">search.click()</span><br><span class="line"><span class="comment"># 获取商品标题及价格</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    shoplist = driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;.shoplist li&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> shoplist:</span><br><span class="line">        <span class="built_in">print</span>(li.find_element(By.CSS_SELECTOR, <span class="string">&quot;a&quot;</span>).get_attribute(<span class="string">&quot;title&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取下一页按钮</span></span><br><span class="line">    <span class="built_in">next</span> = driver.find_element(By.LINK_TEXT, <span class="string">&quot;下一页&quot;</span>)</span><br><span class="line">    <span class="built_in">next</span>.click()</span><br></pre></td></tr></table></figure><p>现在的网页越来越多采用了 <code>Ajax</code> 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个 <code>dom</code> 元素还没出来，但是你的代码直接使用了这个 <code>WebElement</code>，那么就会抛出 <code>NullPointer</code> 的异常。</p><p>为了避免这种元素定位困难而且会提高产生 <code>ElementNotVisibleException</code> 的概率。所以 <code>Selenium</code> 提供了两种等待方式，一种是隐式等待，一种是显式等待。隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。</p><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><p>显式等待使用 <code>WebDriverWait</code> 完成，指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait(driver, timeout, poll_frequency=POLL_FREQUENCY, ignored_exceptions=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>driver</code>：所创建的浏览器 driver；</li><li><code>timeout</code>：最长时间长度（默认单位：秒）；</li><li><code>poll_frequency</code>：间隔检测时长（每）默认 0.5 秒；</li><li><code>ignored_exceptions</code>：方法调用中忽略的异常，默认只抛出找不到元素的异常。</li></ul><p>显式等待基础格式：<code>webDriverWait</code> + <code>until</code> +（判断条件）。</p><ul><li><p><code>until</code>：直到调用的方法返回值为 True：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until(method, message=’’)</span><br><span class="line"><span class="comment"># method：expected_conditions 库中定义的方法</span></span><br><span class="line"><span class="comment"># message：自定义报错信息</span></span><br></pre></td></tr></table></figure></li><li><p>判断条件：</p><ul><li>判断当前页面标题是否为 <code>title</code>：<code>title_is(title)</code></li><li>判断当前页面标题是否包含 <code>title</code>：<code>title_contains(title)</code></li><li>判断此定位的元素是否存在：<code>presence_of_element_located(locator)</code></li><li>判断页面网址中是否包含 <code>url</code>：<code>url_contains(url)</code></li><li>判断此定位的元素是否可见：<code>visibility_of_element_located(locator)</code></li><li>判断此元素是否可见：<code>visibility_of(element)</code></li><li>判断此定位的一组元素是否至少存在一个：<code>presence_of_all_elements_located(locator)</code></li><li>判断此定位的一组元素至少有一个可见：<code>visibility_of_any_elements_located(locator)</code></li><li>判断此定位的一组元素全部可见：<code>visibility_of_all_elements_located(locator)</code></li><li>判断此定位中是否包含 <code>text_</code>的内容：<code>text_to_be_present_in_element(locator, text_)</code>_</li><li>判断此定位中的 <code>value</code> 属性中是否包含 <code>text_</code> 的内容：<code>text_to_be_present_in_element_value(locator, text_)</code></li><li>判断定位的元素是否为 <code>frame</code>，并直接切换到这个 <code>frame</code> 中：<code>frame_to_be_available_and_switch_to_it(locator)</code></li><li>判断定位的元素是否不可见：<code>invisibility_of_element_located(locator)</code></li><li>判断此元素是否不可见：<code>invisibility_of_element(element)</code></li><li>判断所定位的元素是否可见且可点击：<code>element_to_be_clickable(locator)</code></li><li>判断此元素是否不可用：<code>staleness_of(element)</code></li><li>判断该元素是否被选中：<code>element_to_be_selected(element)</code></li><li>判断定位的元素是否被选中：<code>element_located_to_be_selected(locator)</code></li><li><code>element</code>：所获得的元素</li><li><code>locator</code>：元素的定位信息</li><li><code>text_</code>：期望的文本信息</li></ul></li></ul><p>示例程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="comment"># 程序每0.5秒检查，是否满足：标题包含“百度一下”这个条件，检查是否满足条件的最长时间为：15秒，超过15秒仍未满足条件则抛出异常</span></span><br><span class="line">WebDriverWait(driver, <span class="number">15</span>, <span class="number">0.5</span>).until(EC.title_contains(<span class="string">&quot;百度一下&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序每0.5秒检查，是否满足：某定位的元素出现，检查是否满足条件的最长时间为：15秒，超过15秒仍未满足条件则抛出异常</span></span><br><span class="line">WebDriverWait(driver, <span class="number">15</span>, <span class="number">0.5</span>).until(EC.visibility_of_element_located(By.CSS_SELECTOR,<span class="string">&quot;XX&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>隐式等待比较简单，就是设置全局元素查找的超时时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implicitly_wait(time_to_wait)</span><br></pre></td></tr></table></figure><p>设置的时间单位为秒，例如 <code>implicitly_wait(30)</code>，意思是超过 30 秒没有定位到一个元素，程序就会报错抛出异常，期间会一直轮询查找定位元素。</p><h3 id="六、页面操作和动作链"><a href="#六、页面操作和动作链" class="headerlink" title="六、页面操作和动作链"></a>六、页面操作和动作链</h3><h4 id="鼠标及键盘操作"><a href="#鼠标及键盘操作" class="headerlink" title="鼠标及键盘操作"></a>鼠标及键盘操作</h4><p>鼠标操作：</p><ul><li><code>context_click()</code>：此方法模拟鼠标右键点击效果；</li><li><code>double_click()</code>：此方法模拟双标双击效果；</li><li><code>drag_and_drop()</code>：此方法模拟双标拖动效果；</li><li><code>move_to_element()</code>：此方法模拟鼠标悬停效果；</li><li><code>perform()</code>：此方法用来触发执行以上的鼠标方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入动作链</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">more = driver.find_element(By.LINK_TEXT,<span class="string">&quot;更多&quot;</span>)</span><br><span class="line"><span class="comment">#将鼠标移动到更多按钮</span></span><br><span class="line">ActionChains(driver).move_to_element(more).context_click().perform()</span><br></pre></td></tr></table></figure><p>键盘操作：</p><ul><li><code>send_keys(Keys.BACK_SPACE)</code>：删除键（BackSpace） ;</li><li><code>send_keys(Keys.SPACE)</code>：空格键（Space）;</li><li><code>send_keys(Keys.TAB)</code>：制表键（Tab）； </li><li><code>send_keys(Keys.ESCAPE)</code>：回退键（Esc）； </li><li><code>send_keys(Keys.ENTER)</code>：回车键（Enter） ；</li><li><code>send_keys(Keys.CONTROL,&#39;a&#39;)</code>：全选（Ctrl+A）； </li><li><code>send_keys(Keys.CONTROL,&#39;c&#39;)</code>：复制（Ctrl+C）；</li><li><code>driver.forward()</code>：前进；</li><li><code>driver.back()</code>：后退。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = driver.find_element(By.ID,<span class="string">&quot;kw&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入用户名</span></span><br><span class="line">element.send_keys(<span class="string">&quot;admin1&quot;</span>)</span><br><span class="line"><span class="comment"># 删除1</span></span><br><span class="line">element.send_keys(Keys.BACK_SPACE)</span><br><span class="line"><span class="comment"># 全选</span></span><br><span class="line">element.send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">element.send_keys(Keys.CONTROL,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment"># 粘贴</span></span><br><span class="line"><span class="comment"># element.send_keys(Keys.CONTROL,&#x27;v&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="滚动条操作"><a href="#滚动条操作" class="headerlink" title="滚动条操作"></a>滚动条操作</h4><p>在 HTML 页面中，由于前端技术框架的原因，页面元素为动态显示，元素根据滚动条的下拉而被加载：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 设置 JavaScritp 脚本控制滚动条（左边距：0；上边距：1000）</span></span><br><span class="line"><span class="comment"># 单位像素</span></span><br><span class="line">js=<span class="string">&quot;window.scrollTo(0,1000)&quot;</span> </span><br><span class="line"><span class="comment">#2. WebDriver 调用 JS 脚本方法</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><h4 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h4><p>自动化脚本是由程序去执行的，因此有时候打印的错误信息并不是十分明确。如果在执行出错的时候对当前窗口截图保存，那么通过图片就可以非常直观地看到出错的原因：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 截取当前窗口</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;./demo.png&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="七、存储数据"><a href="#七、存储数据" class="headerlink" title="七、存储数据"></a>七、存储数据</h3><p>将数据写入 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读写CSV文件</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># 以写入方式打开文件，如果文件不存在则自动创建</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;/Users/zhihaozhuang/Downloads/test.csv&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取csv writer，用于写入csv格式数据</span></span><br><span class="line">writer = csv.writer(f)</span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">writer.writerow([<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;1.7&quot;</span>])</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>使用 <a href="https://zhuanlan.zhihu.com/p/60003892">pymysql</a> 将数据写入至 MySQL：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建连接</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;&#x27;</span>, db=<span class="string">&#x27;tkq1&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建游标</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行SQL，并返回收影响行数</span></span><br><span class="line">effect_row = cursor.execute(<span class="string">&quot;select * from tb7&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行SQL，并返回受影响行数</span></span><br><span class="line"><span class="comment">#effect_row = cursor.execute(&quot;update tb7 set pass = &#x27;123&#x27; where nid = %s&quot;, (11,))</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行SQL，并返回受影响行数,执行多次</span></span><br><span class="line"><span class="comment">#effect_row = cursor.executemany(&quot;insert into tb7(user,pass,licnese)values(%s,%s,%s)&quot;, [(&quot;u1&quot;,&quot;u1pass&quot;,&quot;11111&quot;),(&quot;u2&quot;,&quot;u2pass&quot;,&quot;22222&quot;)])</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提交，不然无法保存新建或者修改的数据</span></span><br><span class="line">conn.commit()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="八、下载页面上的图片"><a href="#八、下载页面上的图片" class="headerlink" title="八、下载页面上的图片"></a>八、下载页面上的图片</h3><p>可以借助 <code>requests</code> 库来完成图片的保存，通过 <code>selenium</code> 获取图片的地址，再通过 <code>requests</code> 来将图片保存到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">driver = webdriver.Safari()</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;http://baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  使用get_attribute()方法获取对应属性的属性值，src属性值就是图片地址。</span></span><br><span class="line">url = driver.find_element_by_css_selector(<span class="string">&#x27;#lg&gt;img&#x27;</span>).get_attribute(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过requests发送一个get请求到图片地址，返回的响应就是图片内容</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将获取到的图片二进制流写入本地文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;baidu.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 对于图片类型的通过r.content方式访问响应内容，将响应内容写入baidu.png中</span></span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; 是一个 Web 的自动化测试工具，最初是为网站自动化测试而开发的，Selenium 可以直接运行在浏览器上，它支持所有主流的浏览器。因为 Selenium 可以控制浏览器发送请求，并获取网页数据，因此可以应用于爬虫领域。Selenium 可以根据我们的指令，让浏览器自动加载页面，获取需要的数据，甚至页面截屏，或者判断网站上某些动作是否发生。Selenium Python bindings 提供了一个简单的 API，让你使用 Python 和 Selenium WebDriver 来编写功能/校验测试。 以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Python" scheme="http://blog.zhuangzhihao.top/categories/Python/"/>
    
    
    <category term="Automation" scheme="http://blog.zhuangzhihao.top/tags/Automation/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 其他列表组件</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E5%85%B6%E4%BB%96%E5%88%97%E8%A1%A8/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E5%85%B6%E4%BB%96%E5%88%97%E8%A1%A8/</id>
    <published>2022-11-24T16:00:00.000Z</published>
    <updated>2023-01-08T07:55:30.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第九章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括其他列表组件，包括联系人列表、笔记列表和文件列表组件。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、抽离过滤列表组件"><a href="#一、抽离过滤列表组件" class="headerlink" title="一、抽离过滤列表组件"></a>一、抽离过滤列表组件</h3><p>使用 Hygen 创建一个 <code>FilterList</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new FilterList</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FilterList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledFilterList</span> <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;components/Input&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Filter</span> <span class="keyword">from</span> <span class="string">&quot;components/Filter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Select</span> <span class="keyword">from</span> <span class="string">&quot;components/Select&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Option</span> <span class="keyword">from</span> <span class="string">&quot;components/Option&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Plus</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/plus.svg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FilterList</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  options,</span></span><br><span class="line"><span class="params">  filterLabel = <span class="string">&quot;列表排序&quot;</span>,</span></span><br><span class="line"><span class="params">  actionLabel,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledFilterList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Input.Search</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Filter</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> &quot;<span class="attr">20px</span> <span class="attr">0</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;options &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Filter.Filters</span> <span class="attr">label</span>=<span class="string">&#123;filterLabel&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;options.map((option, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Option</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;option&#125;<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              ))&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Filter.Filters</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;actionLabel &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Filter.Action</span> <span class="attr">label</span>=<span class="string">&#123;actionLabel&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;Plus&#125;</span> <span class="attr">width</span>=<span class="string">&#123;12&#125;</span> <span class="attr">height</span>=<span class="string">&#123;12&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Filter.Action</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Filter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledFilterList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">FilterList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">  <span class="attr">filterLabel</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">actionLabel</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">FilterList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FilterList/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledFilterList</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 30px;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  overflow-y: auto;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledFilterList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FilterList/filterList.stories.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/FilterList&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">FilterList</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">FilterList</span>&gt;</span>此处添加 children list<span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>再让 <code>MessageList</code> 使用新抽离出的 <code>FilterList</code> 组件，编辑 <code>src/components/MessageList/index.js</code>  文件：：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledMessageList</span>, &#123; <span class="title class_">ChatList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">Plus</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/plus.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Filter</span> <span class="keyword">from</span> <span class="string">&quot;components/Filter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Select</span> <span class="keyword">from</span> <span class="string">&quot;components/Select&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Option</span> <span class="keyword">from</span> <span class="string">&quot;components/Option&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Input</span> <span class="keyword">from</span> <span class="string">&quot;components/Input&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MessageCard</span> <span class="keyword">from</span> <span class="string">&quot;components/MessageCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> face1 <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FilterList</span> <span class="keyword">from</span> <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MessageList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledMessageList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FilterList</span> <span class="attr">options</span>=<span class="string">&#123;[</span>&quot;<span class="attr">最新消息优先</span>&quot;, &quot;<span class="attr">在线好友优先</span>&quot;]&#125; <span class="attr">actionLabel</span>=<span class="string">&quot;创建会话&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ChatList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;[1, 2, 3, 4, 5, 6].map((_, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MessageCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">active</span>=<span class="string">&#123;index</span> === <span class="string">3&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">replied</span>=<span class="string">&#123;index</span> % <span class="attr">3</span> === <span class="string">0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">avatarSrc</span>=<span class="string">&#123;face1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">name</span>=<span class="string">&quot;李铭浩&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">avatarStatus</span>=<span class="string">&quot;online&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">statusText</span>=<span class="string">&quot;在线&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">time</span>=<span class="string">&quot;3 小时之前&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">message</span>=<span class="string">&quot;即使爬到最高的山上，一次也只能脚踏实地地&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">unreadCount</span>=<span class="string">&#123;2&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ChatList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FilterList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledMessageList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MessageList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MessageList</span>;</span><br></pre></td></tr></table></figure><h3 id="二、联系人列表组件开发"><a href="#二、联系人列表组件开发" class="headerlink" title="二、联系人列表组件开发"></a>二、联系人列表组件开发</h3><p>使用 Hygen 创建一个 <code>ContactCard</code> 组件，用于展示联系人卡片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new ContactCard</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ContactCard/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledContactCard, &#123; Intro, Name &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import face from <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line">import Avatar from <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ContactCard(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledContactCard &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;Avatar src=&#123;face&#125; status=<span class="string">&quot;online&quot;</span> /&gt;</span><br><span class="line">      &lt;Name&gt;李浩&lt;/Name&gt;</span><br><span class="line">      &lt;Intro&gt;我是前端工程师&lt;/Intro&gt;</span><br><span class="line">    &lt;/StyledContactCard&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ContactCard.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ContactCard;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; card &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledAvatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar/style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Name</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">size</span>: <span class="string">&quot;large&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: name;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Intro</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;secondary&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: intro;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledContactCard</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;card()&#125;</span></span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;avatar name&quot;</span></span><br><span class="line"><span class="string">    &quot;avatar intro&quot;;</span></span><br><span class="line"><span class="string">  grid-template-columns: 62px auto;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledAvatar&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    grid-area: avatar;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledContactCard</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Name</span>, <span class="title class_">Intro</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>contactCard.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContactCard</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/ContactCard&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">ContactCard</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ContactCard</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>使用 Hygen 创建一个 <code>ContactList</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new ContactList</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/ContactList/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledContactList, &#123; Contacts &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import FilterList from <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line">import ContactCard from <span class="string">&quot;components/ContactCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ContactList(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledContactList &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;FilterList options=&#123;[<span class="string">&quot;新添加优先&quot;</span>, <span class="string">&quot;按姓名排序&quot;</span>]&#125; actionLabel=<span class="string">&quot;添加好友&quot;</span>&gt;</span><br><span class="line">        &lt;Contacts&gt;</span><br><span class="line">          &#123;new Array(10).fill(0).map((_, i) =&gt; (</span><br><span class="line">            &lt;ContactCard key=&#123;i&#125; /&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/Contacts&gt;</span><br><span class="line">      &lt;/FilterList&gt;</span><br><span class="line">    &lt;/StyledContactList&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ContactList.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default ContactList;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Contacts</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  margin-top: -8px;</span></span><br><span class="line"><span class="string">  &amp; &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin: 8px 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledContactList</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledContactList</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Contacts</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>contactList.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContactList</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/ContactList&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">ContactList</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">ContactList</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="三、文件列表组件开发"><a href="#三、文件列表组件开发" class="headerlink" title="三、文件列表组件开发"></a>三、文件列表组件开发</h3><p>使用 Hygen 创建一个 <code>FileCard</code> 组件，用于展示联系人卡片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new FileCard</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FileCard/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledFileCard, &#123;</span><br><span class="line">  FileName,</span><br><span class="line">  FileSize,</span><br><span class="line">  Options,</span><br><span class="line">  Time,</span><br><span class="line">  FileIcon,</span><br><span class="line">&#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line">import &#123; ReactComponent as FileZip &#125; from <span class="string">&quot;assets/icon/fileZip.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as FileExcel &#125; from <span class="string">&quot;assets/icon/fileExcel.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as FileWord &#125; from <span class="string">&quot;assets/icon/fileWord.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as FilePpt &#125; from <span class="string">&quot;assets/icon/filePpt.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as FileImage &#125; from <span class="string">&quot;assets/icon/fileImage.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as FilePdf &#125; from <span class="string">&quot;assets/icon/filePdf.svg&quot;</span>;</span><br><span class="line">import &#123; ReactComponent as OptionsIcon &#125; from <span class="string">&quot;assets/icon/options.svg&quot;</span>;</span><br><span class="line">import Icon from <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"></span><br><span class="line">const fileIcons = &#123;</span><br><span class="line">  zip: FileZip,</span><br><span class="line">  image: FileImage,</span><br><span class="line">  pdf: FilePdf,</span><br><span class="line">  word: FileWord,</span><br><span class="line">  excel: FileExcel,</span><br><span class="line">  ppt: FilePpt,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FileCard(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledFileCard &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;FileIcon icon=&#123;fileIcons.zip&#125; /&gt;</span><br><span class="line">      &lt;FileName&gt;Source Code.zip&lt;/FileName&gt;</span><br><span class="line">      &lt;FileSize&gt;1.5M&lt;/FileSize&gt;</span><br><span class="line">      &lt;Options&gt;</span><br><span class="line">        &lt;Icon icon=&#123;OptionsIcon&#125; opacity=&#123;0.3&#125; /&gt;</span><br><span class="line">      &lt;/Options&gt;</span><br><span class="line">      &lt;Time&gt;2019年02月03日&lt;/Time&gt;</span><br><span class="line">    &lt;/StyledFileCard&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileCard.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default FileCard;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Heading</span> <span class="keyword">from</span> <span class="string">&quot;components/Heading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Popover</span> <span class="keyword">from</span> <span class="string">&quot;components/Popover&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; card &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FileIcon</span> = <span class="title function_">styled</span>(<span class="title class_">Icon</span>).<span class="title function_">attrs</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">60</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: icon;</span></span><br><span class="line"><span class="string">  justify-self: start;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FileName</span> = <span class="title function_">styled</span>(<span class="title class_">Heading</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">level</span>: <span class="number">2</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: name;</span></span><br><span class="line"><span class="string">  align-self: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FileSize</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;secondary&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: size;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Options</span> = <span class="title function_">styled</span>(<span class="title class_">Popover</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: options;</span></span><br><span class="line"><span class="string">  justify-self: end;</span></span><br><span class="line"><span class="string">  align-self: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Time</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;secondary&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: time;</span></span><br><span class="line"><span class="string">  justify-self: end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledFileCard</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;card()&#125;</span></span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;icon name options&quot;</span></span><br><span class="line"><span class="string">    &quot;icon size time&quot;;</span></span><br><span class="line"><span class="string">  grid-template-columns: 74px 1fr 1fr;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledFileCard</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">FileIcon</span>, <span class="title class_">FileName</span>, <span class="title class_">FileSize</span>, <span class="title class_">Options</span>, <span class="title class_">Time</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>fileCard.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileCard</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/FileCard&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">FileCard</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">FileCard</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>使用 Hygen 创建一个 <code>FileList</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new FileList</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/FileList/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledFileList, &#123; Files &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import FilterList from <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line">import FileCard from <span class="string">&quot;components/FileCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FileList(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledFileList &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;FilterList options=&#123;[<span class="string">&quot;最新文件优先&quot;</span>, <span class="string">&quot;按文件名排序&quot;</span>]&#125;&gt;</span><br><span class="line">        &lt;Files&gt;</span><br><span class="line">          &#123;new Array(10).fill(0).map((_, i) =&gt; (</span><br><span class="line">            &lt;FileCard key=&#123;i&#125; /&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/Files&gt;</span><br><span class="line">      &lt;/FilterList&gt;</span><br><span class="line">    &lt;/StyledFileList&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileList.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default FileList;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Files</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  margin-top: -8px;</span></span><br><span class="line"><span class="string">  &amp; &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin: 8px 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledFileList</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledFileList</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Files</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>fileList.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FileList</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/FileList&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">FileList</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">FileList</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="四、笔记列表组件开发"><a href="#四、笔记列表组件开发" class="headerlink" title="四、笔记列表组件开发"></a>四、笔记列表组件开发</h3><p>使用 Hygen 创建一个 <code>NoteCard</code> 组件，用于展示联系人卡片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new NoteCard</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NoteCard/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import note1 from <span class="string">&quot;assets/images/note-1.jpg&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import StyledNoteCard, &#123;</span><br><span class="line">  NoteImage,</span><br><span class="line">  NoteTitle,</span><br><span class="line">  NoteExcerpt,</span><br><span class="line">  NotePublishTime,</span><br><span class="line">&#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> NoteCard(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledNoteCard &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;NoteImage src=&#123;note1&#125; /&gt;</span><br><span class="line">      &lt;NoteTitle&gt;这是笔记标题&lt;/NoteTitle&gt;</span><br><span class="line">      &lt;NoteExcerpt&gt;这是笔记内容摘要&lt;/NoteExcerpt&gt;</span><br><span class="line">      &lt;NotePublishTime&gt;2020-02-08&lt;/NotePublishTime&gt;</span><br><span class="line">    &lt;/StyledNoteCard&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NoteCard.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default NoteCard;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Heading</span> <span class="keyword">from</span> <span class="string">&quot;components/Heading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; card &#125; <span class="keyword">from</span> <span class="string">&quot;utils/mixins&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NoteImage</span> = styled.<span class="property">img</span><span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: image;</span></span><br><span class="line"><span class="string">  width: 60px;</span></span><br><span class="line"><span class="string">  height: 60px;</span></span><br><span class="line"><span class="string">  object-fit: cover;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NoteTitle</span> = <span class="title function_">styled</span>(<span class="title class_">Heading</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">level</span>: <span class="number">2</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: title;</span></span><br><span class="line"><span class="string">  align-self: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NoteExcerpt</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: excerpt;</span></span><br><span class="line"><span class="string">  align-self: center;</span></span><br><span class="line"><span class="string">  white-space: nowrap;</span></span><br><span class="line"><span class="string">  text-overflow: ellipsis;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NotePublishTime</span> = <span class="title function_">styled</span>(<span class="title class_">Paragraph</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;secondary&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: time;</span></span><br><span class="line"><span class="string">  justify-self: end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledNoteCard</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;card()&#125;</span></span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;image title time&quot;</span></span><br><span class="line"><span class="string">    &quot;image excerpt excerpt&quot;;</span></span><br><span class="line"><span class="string">  grid-template-columns: 72px 2fr 1fr;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledNoteCard</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">NoteImage</span>, <span class="title class_">NoteTitle</span>, <span class="title class_">NoteExcerpt</span>, <span class="title class_">NotePublishTime</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>noteCard.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NoteCard</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/NoteCard&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">NoteCard</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">NoteCard</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>使用 Hygen 创建一个 <code>NoteList</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new NoteList</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/NoteList/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledNoteList, &#123; Notes &#125; from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import FilterList from <span class="string">&quot;components/FilterList&quot;</span>;</span><br><span class="line">import NoteCard from <span class="string">&quot;components/NoteCard&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> NoteList(&#123; children, ...rest &#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> (</span><br><span class="line">    &lt;StyledNoteList &#123;...rest&#125;&gt;</span><br><span class="line">      &lt;FilterList</span><br><span class="line">        options=&#123;[<span class="string">&quot;最新笔记优先&quot;</span>, <span class="string">&quot;有改动的优先&quot;</span>]&#125;</span><br><span class="line">        actionLabel=<span class="string">&quot;添加笔记&quot;</span></span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Notes&gt;</span><br><span class="line">          &#123;new Array(10).fill(0).map((_, i) =&gt; (</span><br><span class="line">            &lt;NoteCard key=&#123;i&#125; /&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/Notes&gt;</span><br><span class="line">      &lt;/FilterList&gt;</span><br><span class="line">    &lt;/StyledNoteList&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NoteList.propTypes = &#123;</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default NoteList;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Notes</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  &amp; &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin: 8px 0;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  margin-top: -8px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledNoteList</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledNoteList</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Notes</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后修改 <code>noteList.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NoteList</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/NoteList&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">NoteList</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">NoteList</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第九章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括其他列表组件，包括联系人列表、笔记列表和文件列表组件。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Learn Bitcoin &amp; Ethereum</title>
    <link href="http://blog.zhuangzhihao.top/Bitcoin&amp;Ethereum/"/>
    <id>http://blog.zhuangzhihao.top/Bitcoin&amp;Ethereum/</id>
    <published>2022-11-18T16:00:00.000Z</published>
    <updated>2023-01-06T12:44:57.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This course provided by <a href="https://onemonth.com">One Month</a> is intended to be an introduction for us to understand how to get started with Bitcoin, Blockchain, Altcoins, Ethereum, and much more. Giving us the ability to speak confidently with friends and co-workers, and be able to answer that most frequently asked question: “Should I buy Bitcoin?” The following are the notes I took during this course.</p></blockquote><span id="more"></span><h3 id="1-What-is-Bitcoin"><a href="#1-What-is-Bitcoin" class="headerlink" title="1. What is Bitcoin?"></a>1. What is Bitcoin?</h3><p>Bitcoin is two things: it’s a digital currency, and a technology.</p><p>Digital Currency: Most of us don’t actually have money physically in a bank. Most of the ‘money’ we make and spend is moved and managed digitally. If you use direct deposit, money is moving between you and you’re company digitally. The US dollar and most other national currencies are just as digital as Bitcoin. </p><p>Bitcoin (BTC): It is not a coin! But it is a digital currency. you can send someone bitcoins much faster, more safely, and without the middlemen or fees associated with traditional banking - because it is controlled by a network of people, not one single authority. </p><p>Coinbase: A site where you can buy and sell bitcoins. </p><h3 id="2-How-does-the-Bitcoin-technology-work"><a href="#2-How-does-the-Bitcoin-technology-work" class="headerlink" title="2. How does the Bitcoin technology work?"></a>2. How does the Bitcoin technology work?</h3><p>The Bitcoin technology (known as the blockchain) revolutionizes how we share data, and identity across the Internet.</p><p>Decentralization: No permission is needed from a central authority to post anything on the web, there is no central controlling node, and so no single point of failure.</p><p>Blockchain is a combination of proven technologies applied together to allow folks to share decentralized information without compromising their identity, including:</p><ul><li>Private Key Cryptography: Kind of like a username and password for you’re identity. You have a public key, which anyone can access, and is a big hashed number. The private key is you’re password and allows you to access it. We get the term Cryptocurrency from this.</li><li>P2P Networks: It means peer to peer network, and basically means that everyone holds a little bit of information so that everyone can see what everyone else has. BitTorrent works this way. </li><li>The Blockchain Protocol : This puts the blocks of identity together so that they build on top of each other and are tied together. </li></ul><p>Bitcoin’s innovation is that it allows many entities who do not know one another to reliably reach consensus about the state of the bitcoin blockchain.</p><h3 id="3-Where-did-Bitcoin-come-from"><a href="#3-Where-did-Bitcoin-come-from" class="headerlink" title="3. Where did Bitcoin come from?"></a>3. Where did Bitcoin come from?</h3><p>Digital Currencies Before Bitcoin: Digicash (1990), Hashcash (1997), B-Money (1998), BitGold (1998).</p><p><a href="https://bitcoin.org/bitcoin.pdf">Bitcoin White Paper</a>: Satoshi Nakamoto released a Bitcoin white paper in 2008. The 8 page paper announced the vision for a decentralized digital currency.</p><p>In January 2009, the bitcoin network came into existence with the release of the first open source bitcoin client and the issuance of the first bitcoins, with Satoshi Nakamoto mining the first block of bitcoins ever (known as the genesis block), which had a reward of 50 bitcoins.</p><p>The First Bitcoin Transaction: On May 22nd 2010, Laszlo Hanyecz paid 10,000 BTC for two Papa John’s pizzas.</p><p>In June 2011 Wikileaks began to accept bitcoins for donations.</p><p>By December 2013, Mt. Gox, a bitcoin exchange based in Tokyo, Japan, was handling over 70% of all bitcoin transactions worldwide, as the world’s leading bitcoin exchange. However in March 2014, Mt. Gox announced that approximately 850,000 bitcoins belonging to customers and the company were missing and likely stolen, an amount valued at more than $450 million at the time.</p><p>As of August 2015 it was estimated that 160,000 merchants accept bitcoin payments.</p><p>In August 2016, a major bitcoin exchange, Bitfinex, was hacked and nearly 120,000 BTC (around $60m) was stolen.</p><p>On August 1st, 2017 bitcoin split into two derivative digital currencies, the classic bitcoin (BTC) and the Bitcoin Cash (BCH).</p><h3 id="4-How-to-buy-your-first-bitcoin-BTC"><a href="#4-How-to-buy-your-first-bitcoin-BTC" class="headerlink" title="4. How to buy your first bitcoin (BTC)"></a>4. How to buy your first bitcoin (BTC)</h3><p><a href="https://www.coinbase.com/join/5341c04e2e00c46d2100006c">Set up a Coinbase account</a> and follow the <a href="https://support.coinbase.com/customer/portal/articles/1148716-payment-methods-for-us-customers">Coinbase Payment Methods </a>, With $5 USD you can purchase a percentage of one bitcoin.</p><p>There will also be a miners fee. Miners are essentially the bookkeepers that verify bitcoin transactions, and the miner that verifies you’re transaction will be paid a small fee. </p><p>In Coinbase, you can set up your bitcoin wallet to only receive bitcoins, and well as to send bitcoins to other people. Your wallet address is almost like an email address, so when people send you money, they use your wallet’s QC code or hash. </p><p>When you want to send money from your wallet, you’ll put in the person in question’s address. The fees involved should be pretty low, and the transfer should happen pretty quickly.</p><h3 id="5-Public-keys-and-Private-keys"><a href="#5-Public-keys-and-Private-keys" class="headerlink" title="5. Public keys and Private keys"></a>5. Public keys and Private keys</h3><p>Your bitcoin address is a Public Key. And it is publicly viewable on the blockchain. So Bitcoin isn’t anonymous, not really. There is a record of everything you do with your public key. </p><p>But don’t panic. The level of public access only stretches as far as the address your sending/receiving with. If you use a new address for every transaction, there won’t be a consistent purchase history. </p><ul><li><a href="https://www.blockchain.com/explorer">https://www.blockchain.com/explorer</a></li></ul><p>The truth is, you never own bitcoin. All you own is a private key.</p><p>A private key in the context of Bitcoin is a secret number that allows bitcoins to be spent. It is, more or less, your password. If you’re on Coinbase, the site holds onto your private key for you, and you get access to it by logging in. Which makes Coinbase kind of like a bank. </p><h3 id="6-Never-leave-your-money-at-the-exchange"><a href="#6-Never-leave-your-money-at-the-exchange" class="headerlink" title="6. Never leave your money at the exchange"></a>6. Never leave your money at the exchange</h3><p>Three reasons why you should never leave your money in Coinbase, Kraken, Poloniex or ANY online exchange.</p><p>Private keys are vulnerable if you leave them in centralized places (like Coinbase) with a lot of valuable data. For hackers, banks are like <a href="https://medium.com/@CodyBrown/how-to-lose-8k-worth-of-bitcoin-in-15-minutes-with-verizon-and-coinbase-com-ba75fb8d0bac">honey pots</a>. They will try much harder to break into a honeypot because there’s so much honey inside! </p><p>They’re’s also government regulation to consider. Because Bitcoin is decentralized, no one government can put a stop to it. But the government could come in and freeze all you’re assets in coinbase, or certain state regulations may hamper your ability to send and receive bitcoins. </p><p>And finally, there are the exchanges themselves, which can have human-error issues of they’re own. </p><p>How not to lose your coins: Move money into your cold wallet storage; Have a backup of you’re password &amp; check on you’re backups; Use a password manager like <a href="http://www.1password.com/">1password.com</a>; Use 2-Factor Authentication.</p><h3 id="7-Hot-wallet-vs-cold-wallet"><a href="#7-Hot-wallet-vs-cold-wallet" class="headerlink" title="7. Hot wallet vs. cold wallet"></a>7. Hot wallet vs. cold wallet</h3><p>Hot wallet refers to any cryptocurrency wallet that is connected to the internet. Generally hot wallets are easier to set up, access, and accept more tokens. But, hot wallets are also more susceptible to hackers, possible regulation, and other technical vulnerabilities. </p><p>Cold storage refers to any cryptocurrency wallet that IS NOT connected to the internet. Generally cold storage is more secure, but they don’t accept as many cryptocurrencies as do many of the hot wallets. Cold storage devices (aka. Trezor, Ledger) also cost close to $80 USD, whereas hot wallets are free. </p><ul><li>Cold Wallets: <a href="https://shop.trezor.io/?a=e6b70aee88bf">Trezor</a> or <a href="https://www.ledgerwallet.com/r/a616">LedgerWallet</a></li><li>Hot Wallets: <a href="http://www.coinbase.com/">coinbase</a> or Any exchange would be considered a hot wallet.</li></ul><h3 id="8-Bitcoin-vs-Ethereum"><a href="#8-Bitcoin-vs-Ethereum" class="headerlink" title="8. Bitcoin vs. Ethereum"></a>8. Bitcoin vs. Ethereum</h3><p>Altcoins are an “alternative to Bitcoin.” <a href="https://github.com/bitcoin/bitcoin">Bitcoin is open source,</a> so anyone can go to Github and download it and make their own coin.</p><p>It’s important to understand that there are two categories of digital coins: Cryptocurrencies (e.g. Bitcoin, Litecoin, ZCash, Monero, etc) and Tokens (e.g. Ethereum, Filecoin, Storj, Blockstack, etc.).</p><p>Bitcoin is a “Cryptocurrency”. Bitcoin and other cryptocurrencies are competing against existing money (and gold) to replace them with a truly global currency.</p><p>Tokens are another type of altcoin. One of the most popular tokens is Ether, which is on the Ethereum blockchain. </p><p>Ethereum is a “Token”. What Bitcoin does for money, Ethereum does for contracts. Ethereum’s innovation is that it allows you to write Smart Contracts: basically, any digital agreement where you can say “if this” happens, “then something else happens.” Up until now, we’ve carried out these agreements with a signature at the bottom of a paper document. Ethereum dramatically improves this model because it is digital, and proof of the transaction can never be deleted.</p><div class="table-container"><table><thead><tr><th></th><th>Bitcoin (BTC)</th><th>Ether (ETH)</th></tr></thead><tbody><tr><td>What is it?</td><td>A currency</td><td>A token</td></tr><tr><td>Inventor</td><td>Satoshi Nakamoto</td><td>Vitalik Buterin, Joseph Lubin, Gavin Wood, etc.</td></tr><tr><td>Went alive</td><td>January 2009</td><td>July 2015</td></tr><tr><td>Supply Style</td><td>Deflationary (a finite # of bitcoin will be made)</td><td>Inflationary (much like fiat currency, where more tokens can be made over time)</td></tr><tr><td>Supply Cap</td><td>21 million in total</td><td>18 million every year</td></tr><tr><td>Smallest Unit</td><td>1 Satoshi = 0.00000001 BTC</td><td>1 Wei = 0.000000000000000001 ETH</td></tr><tr><td>New token issuance time</td><td>Every 10 minutes approximately</td><td>Every 10 to 20 seconds</td></tr><tr><td>Amount of new token at issuance</td><td>12.5 at the moment. Half at every 210,000 blocks</td><td>5 per every new block</td></tr><tr><td>Utility</td><td>Used for purchasing goods and services, as well as storing value (much like how we currently use gold).</td><td>Used for making dApps (decentralized apps) on the Ethereum blockchain.</td></tr><tr><td>Price</td><td>Around $18,000 (in 2020)</td><td>Around $610 (in 2020)</td></tr><tr><td>Purpose</td><td>Bitcoin is a new currency created to compete against the gold standard and fiat currencies</td><td>Ethereum is a token capable of facilitating <a href="https://en.wikipedia.org/wiki/Smart_contract">Smart Contracts</a> (For example a lawyer’s contract, an exchange of ownership of property, and voting)</td></tr></tbody></table></div><p>Ether is not as popular as BTC for purchasing goods. At the moment ether is mainly being used by developers <a href="https://www.coindesk.com/7-cool-decentralized-apps-built-ethereum/">building applications</a> on top of it. Over time, and as more apps are developed, the value of ether will likely move from being speculative (as it is now), to more useful in everyday life. </p><p>Ethereum is a token that allows other tokens to be created on top of it using the Ethereum standard (officially called the ERC-20 Standard). So you’ll see tokens like OMG come out, which are new tokens created on the Ethereum Network.</p><p>Buying or having ETH isn’t what makes a smart contract. Smart Contracts in Ethereum are written using a coding language called Solidity. It’s very similar to JavaScript. With Solidity you can write contractual logic.</p><p>In order to confirm that transaction as valid, you pay the miners in ETH, the ETH miners works similarly to BTC. You’ll see the word “gas” used for the payment. Gas is the name of the execution fee, and it’s paid in ETH.</p><p>Is it possible to trade bitcoin into Ethereum? Yes. You can use <a href="https://shapeshift.io/">ShapeShift</a> so that you can exchange your bitcoin for almost any altcoin.</p><h3 id="9-The-5-Investors-in-Bitcoin"><a href="#9-The-5-Investors-in-Bitcoin" class="headerlink" title="9. The 5 Investors in Bitcoin"></a>9. The 5 Investors in Bitcoin</h3><p>There are 5 types of people that invest they’re energy into bitcoin. The user, miner, developer, investor, and business owner.</p><ul><li>The User: Anyone who has a Bitcoin account, and has a general education about it. </li><li>The Miner: An entirely different stakeholder in Bitcoin, and involves a lot of hardware setup and use. </li><li>The Developer: People who contribute code to the project, build things that use Bitcoin, write in Solidity (<a href="https://solidity.readthedocs.io/en/develop/">Ethereum’s language</a>), or otherwise work on the Blockchain.  </li><li>The Investor: Speculators of the 21st century, folks investing with a focus through making money on Bitcoin, or other initial offerings (ICOs) for Altcoins. <a href="https://pro.coinbase.com/">Coinbase Pro</a> (formerly GDAX) is a great tool for investors. </li><li>The Business Owner: Someone who owns a business and wants to accept Bitcoin. If you use <a href="https://stripe.com/">Stripe</a>, it’s really easy to turn it out. And <a href="https://www.coinbase.com/merchants?locale=en-US">Coinbase</a> has a payment processing system as well. Fees will tend to be less than credit cards, and the more payment options you have, the more people who might be able to buy your products.</li></ul><h3 id="10-Resources-for-going-deeper"><a href="#10-Resources-for-going-deeper" class="headerlink" title="10. Resources for going deeper"></a>10. Resources for going deeper</h3><p>Books:</p><ul><li><a href="http://amzn.to/2y2nrCi">The Internet of Money</a>, by Andreas Antonopoulos</li><li><a href="http://amzn.to/2fLlfoa">The Age of Cryptocurrency</a>, by Paul Vigna</li></ul><p>More ways to keep learning:</p><ul><li>The Quiet Master of Cryptocurrency — Nick Szabo <a href="https://tim.blog/2017/06/04/nick-szabo/">Tim Ferris Podcast</a></li><li>The Rise and Rise of Bitcoin <a href="http://amzn.to/2wQB4zp">Documentary</a></li><li><a href="https://www.coindesk.com/">Coindesk.com</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;This course provided by &lt;a href=&quot;https://onemonth.com&quot;&gt;One Month&lt;/a&gt; is intended to be an introduction for us to understand how to get started with Bitcoin, Blockchain, Altcoins, Ethereum, and much more. Giving us the ability to speak confidently with friends and co-workers, and be able to answer that most frequently asked question: “Should I buy Bitcoin?” The following are the notes I took during this course.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="随笔与随记" scheme="http://blog.zhuangzhihao.top/categories/%E9%9A%8F%E7%AC%94%E4%B8%8E%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="BTC" scheme="http://blog.zhuangzhihao.top/tags/BTC/"/>
    
    <category term="ETH" scheme="http://blog.zhuangzhihao.top/tags/ETH/"/>
    
  </entry>
  
  <entry>
    <title>ChatUI-React 设置页面</title>
    <link href="http://blog.zhuangzhihao.top/ChatUI%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/"/>
    <id>http://blog.zhuangzhihao.top/ChatUI%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2023-01-08T07:55:35.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React 即时通信 UI 实战第八章。React 即时通信 UI 实战为<a href="https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0965c74096f788f105780e5d5d0e9ebf">峰华前端工程师</a>推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括设置页面中的 InputText、Select（表单）、Radio、Switch 开关等组件。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h3 id="一、文本输入框组件开发"><a href="#一、文本输入框组件开发" class="headerlink" title="一、文本输入框组件开发"></a>一、文本输入框组件开发</h3><p>使用 Hygen 创建一个 <code>InputText</code> 组件，并移动到 <code>src/components/Input</code> 组件目录下，作为 <code>Input</code> 的子组件导出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new InputText</span><br></pre></td></tr></table></figure><p>再使用 Hygen 创建一个 <code>LabelContainer</code> 组件，对 Label 和控件进行布局：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new LabelContainer</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/LabelContainer/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledLabelContainer</span> <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LabelContainer</span>(<span class="params">&#123; children, label, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledLabelContainer</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label &amp;&amp; <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginBottom:</span> &quot;<span class="attr">8px</span>&quot; &#125;&#125;&gt;</span>&#123;label&#125;: <span class="tag">&lt;/<span class="name">Text</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledLabelContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">LabelContainer</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LabelContainer</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/LabelContainer/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledLabelContainer</span> = styled.<span class="property">label</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  font-size: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.normal&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledLabelContainer</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Input/InputText/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">InputUnderline</span> = styled.<span class="property">input</span><span class="string">`</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  border-bottom: 1px solid <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray4&#125;</span>;</span></span><br><span class="line"><span class="string">  font-size: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.normal&#125;</span>;</span></span><br><span class="line"><span class="string">  width: 100%;</span></span><br><span class="line"><span class="string">  background: none;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;::placeholder &#123;</span></span><br><span class="line"><span class="string">    color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray5&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :focus,</span></span><br><span class="line"><span class="string">  :hover &#123;</span></span><br><span class="line"><span class="string">    border-bottom-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.primaryColor&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledInputText</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledInputText</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">InputUnderline</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Input/InputText/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledInputText</span>, &#123; <span class="title class_">InputUnderline</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LabelContainer</span> <span class="keyword">from</span> <span class="string">&quot;components/LabelContainer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">InputText</span>(<span class="params">&#123; label, placeholder = <span class="string">&quot;请输入内容&quot;</span>, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="language-xml"><span class="tag">&lt;<span class="name">InputUnderline</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledInputText</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label ? <span class="tag">&lt;<span class="name">LabelContainer</span> <span class="attr">label</span>=<span class="string">&#123;label&#125;</span>&gt;</span>&#123;input&#125;<span class="tag">&lt;/<span class="name">LabelContainer</span>&gt;</span> : input&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledInputText</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">InputText</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">placeholder</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">InputText</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Input/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledInput</span>, &#123; <span class="title class_">InputContainer</span>, <span class="title class_">Prefix</span>, <span class="title class_">Suffix</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">SearchIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/search.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTheme &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">InputText</span> <span class="keyword">from</span> <span class="string">&quot;./InputText&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Input</span>(<span class="params">&#123; placeholder = <span class="string">&quot;请输入内容...&quot;</span>, prefix, suffix, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">InputContainer</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;prefix &amp;&amp; <span class="tag">&lt;<span class="name">Prefix</span>&gt;</span>&#123;prefix&#125;<span class="tag">&lt;/<span class="name">Prefix</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StyledInput</span> <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;suffix &amp;&amp; <span class="tag">&lt;<span class="name">Suffix</span>&gt;</span>&#123;suffix&#125;<span class="tag">&lt;/<span class="name">Suffix</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">InputContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Search</span>(<span class="params">&#123; placeholder = <span class="string">&quot;请输入搜索内容...&quot;</span>, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useTheme</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&#123;placeholder&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">prefix</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &lt;<span class="attr">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;SearchIcon&#125;</span> <span class="attr">color</span>=<span class="string">&#123;theme.gray3&#125;</span> <span class="attr">width</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&#123;18&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">      &#123;...rest&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Input</span>.<span class="property">Search</span> = <span class="title class_">Search</span>;</span><br><span class="line"><span class="title class_">Input</span>.<span class="property">Text</span> = <span class="title class_">InputText</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Input</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">placeholder</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">prefix</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">  <span class="attr">suffix</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Input</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Input/input.stories.js</code>  文件中添加两行 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">InputTextWithLabel</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Input.Text</span> <span class="attr">label</span>=<span class="string">&quot;昵称&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">InputTextWithoutLabel</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Input.Text</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>使用 <code>yarn</code> 命令启动 storybook：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run storybook</span><br></pre></td></tr></table></figure><h3 id="二、重构-Select-组件"><a href="#二、重构-Select-组件" class="headerlink" title="二、重构 Select 组件"></a>二、重构 Select 组件</h3><p>编辑 <code>src/components/Select/index.js</code>  文件：：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">import PropTypes from <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line">import StyledSelect from <span class="string">&quot;./style&quot;</span>;</span><br><span class="line">import LabelContainer from <span class="string">&quot;components/LabelContainer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Select(&#123; label, <span class="built_in">type</span>, children, ...rest &#125;) &#123;</span><br><span class="line">  const selectWithoutLabel = (</span><br><span class="line">    &lt;StyledSelect <span class="built_in">type</span>=&#123;<span class="built_in">type</span>&#125; &#123;...rest&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;/StyledSelect&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">return</span> label ? (</span><br><span class="line">    &lt;LabelContainer label=&#123;label&#125;&gt;selectWithoutLabel&lt;/LabelContainer&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    selectWithoutLabel</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Select.propTypes = &#123;</span><br><span class="line">  <span class="built_in">type</span>: PropTypes.oneOf([<span class="string">&quot;form&quot;</span>]),</span><br><span class="line">  children: PropTypes.any,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default Select;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled, &#123; css &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CaretDown</span> <span class="keyword">from</span> <span class="string">&quot;assets/icon/caret_down.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CaretDown2</span> <span class="keyword">from</span> <span class="string">&quot;assets/icon/caretDown2.svg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typeVariants = &#123;</span><br><span class="line">  <span class="attr">form</span>: css`<span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(</span><span class="subst">$&#123;CaretDown2&#125;</span><span class="language-css">);</span></span><br><span class="line"><span class="language-css">  `</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSelect</span> = styled.<span class="property">select</span><span class="string">`</span></span><br><span class="line"><span class="string">  appearance: none;</span></span><br><span class="line"><span class="string">  background-image: url(<span class="subst">$&#123;CaretDown&#125;</span>);</span></span><br><span class="line"><span class="string">  background-repeat: no-repeat;</span></span><br><span class="line"><span class="string">  background-position: right center;</span></span><br><span class="line"><span class="string">  background-color: transparent;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  padding-right: 14px;</span></span><br><span class="line"><span class="string">  font-size: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.normal&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.grayDark&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; type &#125;) =&gt; type &amp;&amp; typeVariants[type]&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ::-ms-expand &#123;</span></span><br><span class="line"><span class="string">    display: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSelect</span>;</span><br></pre></td></tr></table></figure><p>最后在 <code>select.stories.js</code> 文件中添加一个 story：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">FormSelect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Select</span> <span class="attr">type</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Option</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Option</span>&gt;</span>河北省<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、Radio-单选按钮组件开发"><a href="#三、Radio-单选按钮组件开发" class="headerlink" title="三、Radio 单选按钮组件开发"></a>三、Radio 单选按钮组件开发</h3><p>使用 Hygen 创建一个 <code>Radio</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new Radio</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Radio/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledRadio</span>, &#123; <span class="title class_">RadioButton</span>, <span class="title class_">Circle</span>, <span class="title class_">StyledRadioGroup</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LabelContainer</span> <span class="keyword">from</span> <span class="string">&quot;components/LabelContainer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Radio</span>(<span class="params">&#123; name, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledRadio</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RadioButton</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Circle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledRadio</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RadioGroup</span>(<span class="params">&#123; label, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">LabelContainer</span> <span class="attr">label</span>=<span class="string">&#123;label&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StyledRadioGroup</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">StyledRadioGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">LabelContainer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Radio</span>.<span class="property">Group</span> = <span class="title class_">RadioGroup</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Radio</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">RadioGroup</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Radio</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Radio/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Circle</span> = styled.<span class="property">span</span><span class="string">`</span></span><br><span class="line"><span class="string">  line-height: 16px;</span></span><br><span class="line"><span class="string">  width: 16px;</span></span><br><span class="line"><span class="string">  height: 16px;</span></span><br><span class="line"><span class="string">  border: 1px solid <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.primaryColor&#125;</span>;</span></span><br><span class="line"><span class="string">  border-radius: 50%;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  left: 0;</span></span><br><span class="line"><span class="string">  top: 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  ::after &#123;</span></span><br><span class="line"><span class="string">    content: &quot;&quot;;</span></span><br><span class="line"><span class="string">    width: 10px;</span></span><br><span class="line"><span class="string">    height: 10px;</span></span><br><span class="line"><span class="string">    background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.primaryColor&#125;</span>;</span></span><br><span class="line"><span class="string">    border-radius: 50%;</span></span><br><span class="line"><span class="string">    position: absolute;</span></span><br><span class="line"><span class="string">    left: 2px;</span></span><br><span class="line"><span class="string">    top: 2px;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    opacity: 0;</span></span><br><span class="line"><span class="string">    transform: scale(0);</span></span><br><span class="line"><span class="string">    transition: 0.2s ease;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RadioButton</span> = styled.<span class="property">input</span>.<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;radio&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  width: 0;</span></span><br><span class="line"><span class="string">  height: 0;</span></span><br><span class="line"><span class="string">  opacity: 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :checked + <span class="subst">$&#123;Circle&#125;</span>::after &#123;</span></span><br><span class="line"><span class="string">    opacity: 1;</span></span><br><span class="line"><span class="string">    transform: scale(1);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :not(:checked) + <span class="subst">$&#123;Circle&#125;</span>::after &#123;</span></span><br><span class="line"><span class="string">    opacity: 0;</span></span><br><span class="line"><span class="string">    transform: scale(0);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledRadioGroup</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  &amp; &gt; *:not(:first-child) &#123;</span></span><br><span class="line"><span class="string">    margin-left: 24px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledRadio</span> = styled.<span class="property">label</span><span class="string">`</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  padding-left: 22px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">  line-height: 16px;</span></span><br><span class="line"><span class="string">  font-size: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.normal&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledRadio</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">RadioButton</span>, <span class="title class_">Circle</span>, <span class="title class_">StyledRadioGroup</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Radio/radio.stories.js</code>  文件中添加 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Radio</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/Input/Radio&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Radio</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Radio</span>&gt;</span>选项<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">RadioGroup</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Radio.Group</span> <span class="attr">label</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="四、Switch-开关组件开发"><a href="#四、Switch-开关组件开发" class="headerlink" title="四、Switch 开关组件开发"></a>四、Switch 开关组件开发</h3><p>使用 Hygen 创建一个 <code>Switch</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new Switch</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/LabelContainer/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSwitch</span>, &#123; <span class="title class_">Checkbox</span>, <span class="title class_">Slider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Switch</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSwitch</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Checkbox</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Slider</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSwitch</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Switch</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Switch</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/LabelContainer/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Slider</span> = styled.<span class="property">span</span><span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.gray4&#125;</span>;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  left: 0;</span></span><br><span class="line"><span class="string">  right: 0;</span></span><br><span class="line"><span class="string">  top: 0;</span></span><br><span class="line"><span class="string">  bottom: 0;</span></span><br><span class="line"><span class="string">  border-radius: 16px;</span></span><br><span class="line"><span class="string">  transition: 0.4s;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;::before &#123;</span></span><br><span class="line"><span class="string">    display: block;</span></span><br><span class="line"><span class="string">    content: &quot;&quot;;</span></span><br><span class="line"><span class="string">    position: absolute;</span></span><br><span class="line"><span class="string">    width: 28px;</span></span><br><span class="line"><span class="string">    height: 28px;</span></span><br><span class="line"><span class="string">    top: 1px;</span></span><br><span class="line"><span class="string">    left: 1px;</span></span><br><span class="line"><span class="string">    background-color: white;</span></span><br><span class="line"><span class="string">    box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.05), 0px 2px 2px rgba(0, 0, 0, 0.1),</span></span><br><span class="line"><span class="string">      0px 3px 1px rgba(0, 0, 0, 0.0510643);</span></span><br><span class="line"><span class="string">    border-radius: 50%;</span></span><br><span class="line"><span class="string">    transition: 0.4s;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Checkbox</span> = styled.<span class="property">input</span>.<span class="title function_">attrs</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;checkbox&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  width: 0;</span></span><br><span class="line"><span class="string">  height: 0;</span></span><br><span class="line"><span class="string">  opacity: 0;</span></span><br><span class="line"><span class="string">  :checked + <span class="subst">$&#123;Slider&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    background-color: <span class="subst">$&#123;(&#123; theme &#125;) =&gt; theme.primaryColor&#125;</span>;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ::before &#123;</span></span><br><span class="line"><span class="string">      transform: translateX(20px);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSwitch</span> = styled.<span class="property">label</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 51px;</span></span><br><span class="line"><span class="string">  height: 31px;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">  display: inline-block;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSwitch</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Checkbox</span>, <span class="title class_">Slider</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Input/input.stories.js</code>  文件中添加 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Switch</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;UI 组件/Input/Switch&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Switch</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> &quot;<span class="attr">1vw</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="五、组装设置页编辑个人资料页面"><a href="#五、组装设置页编辑个人资料页面" class="headerlink" title="五、组装设置页编辑个人资料页面"></a>五、组装设置页编辑个人资料页面</h3><p>使用 Hygen 创建一个 EditProfile 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new EditProfile</span><br></pre></td></tr></table></figure><p>在 <code>index.js</code> 文件中编辑组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledEditProfile</span>, &#123;</span><br><span class="line">  <span class="title class_">GroupTitle</span>,</span><br><span class="line">  <span class="title class_">GenderAndRegion</span>,</span><br><span class="line">  <span class="title class_">SelectGroup</span>,</span><br><span class="line">  <span class="title class_">StyledIconInput</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;components/Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/react-fontawesome&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faCheck &#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/free-solid-svg-icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;components/Button&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">InputText</span> <span class="keyword">from</span> <span class="string">&quot;components/Input/InputText&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Radio</span> <span class="keyword">from</span> <span class="string">&quot;components/Radio&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LabelContainer</span> <span class="keyword">from</span> <span class="string">&quot;components/LabelContainer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Select</span> <span class="keyword">from</span> <span class="string">&quot;components/Select&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Option</span> <span class="keyword">from</span> <span class="string">&quot;components/Option&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  faWeibo,</span><br><span class="line">  faGithub,</span><br><span class="line">  faLinkedin,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@fortawesome/free-brands-svg-icons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EditProfile</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showEdit, setShowEdit] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (!showEdit) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Profile</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onEdit</span>=<span class="string">&#123;()</span> =&gt;</span> setShowEdit(true)&#125;</span></span><br><span class="line"><span class="language-xml">        showEditBtn</span></span><br><span class="line"><span class="language-xml">        showCloseIcon=&#123;false&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledEditProfile</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">src</span>=<span class="string">&#123;face&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&quot;160px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">grid-area:</span> <span class="attr">1</span> / <span class="attr">1</span> / <span class="attr">2</span> / <span class="attr">2</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">justify-self:</span> <span class="attr">center</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">margin-bottom:</span> <span class="attr">12px</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&quot;52px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">grid-area:</span> <span class="attr">1</span> / <span class="attr">1</span> / <span class="attr">3</span> / <span class="attr">2</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">z-index:</span> <span class="attr">10</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">align-self:</span> <span class="attr">end</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">justify-self:</span> <span class="attr">end</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FontAwesomeIcon</span> <span class="attr">icon</span>=<span class="string">&#123;faCheck&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShowEdit(false)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GroupTitle</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">GroupTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> <span class="attr">label</span>=<span class="string">&quot;昵称&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GenderAndRegion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Radio.Group</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LabelContainer</span> <span class="attr">label</span>=<span class="string">&quot;地区&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">SelectGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span> <span class="attr">type</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Option</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span> <span class="attr">type</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Option</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select</span> <span class="attr">type</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Option</span>&gt;</span>区县<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">SelectGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">LabelContainer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">GenderAndRegion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> <span class="attr">label</span>=<span class="string">&quot;个性签名&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GroupTitle</span>&gt;</span>联系信息<span class="tag">&lt;/<span class="name">GroupTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> <span class="attr">label</span>=<span class="string">&quot;联系电话&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> <span class="attr">label</span>=<span class="string">&quot;电子邮箱&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> <span class="attr">label</span>=<span class="string">&quot;个人网站&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">GroupTitle</span>&gt;</span>社交信息<span class="tag">&lt;/<span class="name">GroupTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">IconInput</span> <span class="attr">icon</span>=<span class="string">&#123;faWeibo&#125;</span> <span class="attr">bgColor</span>=<span class="string">&quot;#F06767&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">IconInput</span> <span class="attr">icon</span>=<span class="string">&#123;faGithub&#125;</span> <span class="attr">bgColor</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">IconInput</span> <span class="attr">icon</span>=<span class="string">&#123;faLinkedin&#125;</span> <span class="attr">bgColor</span>=<span class="string">&quot;#2483C0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledEditProfile</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IconInput</span>(<span class="params">&#123; icon, bgColor, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledIconInput</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Icon.Social</span> <span class="attr">icon</span>=<span class="string">&#123;icon&#125;</span> <span class="attr">bgColor</span>=<span class="string">&#123;bgColor&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">InputText</span> &#123;<span class="attr">...rest</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledIconInput</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">EditProfile</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">EditProfile</span>;</span><br></pre></td></tr></table></figure><p>再在 <code>style.js</code> 中修改样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GroupTitle</span> = <span class="title function_">styled</span>(<span class="title class_">Text</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">size</span>: <span class="string">&quot;large&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  align-self: end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GenderAndRegion</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 1fr 1fr;</span></span><br><span class="line"><span class="string">  justify-items: space-between;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SelectGroup</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin: 0 4px;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  margin: 0 -4px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledIconInput</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 38px 1fr;</span></span><br><span class="line"><span class="string">  align-items: end;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledEditProfile</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 1fr;</span></span><br><span class="line"><span class="string">  row-gap: 20px;</span></span><br><span class="line"><span class="string">  padding: 30px;</span></span><br><span class="line"><span class="string">  max-height: 100vh;</span></span><br><span class="line"><span class="string">  overflow-y: auto;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledEditProfile</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">GroupTitle</span>, <span class="title class_">GenderAndRegion</span>, <span class="title class_">SelectGroup</span>, <span class="title class_">StyledIconInput</span> &#125;;</span><br></pre></td></tr></table></figure><p>最后编辑 <code>editProfile.stories.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">EditProfile</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/EditProfile&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">EditProfile</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">EditProfile</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="六、设置项组件开发"><a href="#六、设置项组件开发" class="headerlink" title="六、设置项组件开发"></a>六、设置项组件开发</h3><p>使用 Hygen 创建一个 <code>Settings</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new Settings</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Settings/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSettings</span>, &#123;</span><br><span class="line">  <span class="title class_">StyledSettingsItem</span>,</span><br><span class="line">  <span class="title class_">SettingsItemControl</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuRight</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuRight.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Switch</span> <span class="keyword">from</span> <span class="string">&quot;components/Switch&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Settings</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettings</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">StyledSettings</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SettingsItem</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  type = <span class="string">&quot;switch&quot;</span>,</span></span><br><span class="line"><span class="params">  label,</span></span><br><span class="line"><span class="params">  description,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsItem</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;switch&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;menu&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuRight&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;description &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">4px</span> <span class="attr">0</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;description&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Seperator</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> &quot;<span class="attr">8px</span>&quot;, <span class="attr">marginBottom:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Settings</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Settings</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Settings/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSettingsItem</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SettingsItemControl</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSettings</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSettings</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">StyledSettingsItem</span>, <span class="title class_">SettingsItemControl</span> &#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Settings/settings.stories.js</code>  文件中添加两行 stories：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Settings</span>, &#123; <span class="title class_">SettingsItem</span> &#125; <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/Settings&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Settings</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Settings</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">Settings</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">WithoutDescription</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;这是一个没有描述的设置项&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">WithDescription</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;这是一个有描述的设置项&quot;</span> <span class="attr">description</span>=<span class="string">&quot;这是设置项描述&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">WithMenu</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;有子菜单的设置项&quot;</span> <span class="attr">type</span>=<span class="string">&quot;menu&quot;</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="七、组装设置页面"><a href="#七、组装设置页面" class="headerlink" title="七、组装设置页面"></a>七、组装设置页面</h3><p>编辑 <code>src/components/Settings/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSettingsItem</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SettingsItemControl</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSettingsGroup</span> = styled.<span class="property">div</span><span class="string">``</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledSettings</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 72px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledSettings</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">StyledSettingsItem</span>, <span class="title class_">SettingsItemControl</span>, <span class="title class_">StyledSettingsGroup</span> &#125;;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/Settings/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledSettings</span>, &#123;</span><br><span class="line">  <span class="title class_">StyledSettingsItem</span>,</span><br><span class="line">  <span class="title class_">SettingsItemControl</span>,</span><br><span class="line">  <span class="title class_">StyledSettingsGroup</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuRight</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuRight.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Paragraph</span> <span class="keyword">from</span> <span class="string">&quot;components/Paragraph&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Switch</span> <span class="keyword">from</span> <span class="string">&quot;components/Switch&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Seperator</span> <span class="keyword">from</span> <span class="string">&quot;components/Seperator&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Settings</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettings</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;隐私设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;添加好友时需要验证&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;推荐通讯录好友&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">description</span>=<span class="string">&quot;上传的通讯录只用来匹配好友列表，本应用不会记录和发送任何信息给其它机构或&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;只能通过手机号找到我&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsGroup</span> <span class="attr">groupName</span>=<span class="string">&quot;通知设置&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;新消息通知&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;语音和视频通话提醒&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;显示通知详情&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;声音&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">SettingsItem</span> <span class="attr">label</span>=<span class="string">&quot;查看已静音的好友列表&quot;</span> <span class="attr">type</span>=<span class="string">&quot;menu&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettings</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SettingsGroup</span>(<span class="params">&#123; groupName, children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">paddingBottom:</span> &quot;<span class="attr">24px</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;groupName&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsGroup</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">SettingsItem</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  type = <span class="string">&quot;switch&quot;</span>,</span></span><br><span class="line"><span class="params">  label,</span></span><br><span class="line"><span class="params">  description,</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  ...rest</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledSettingsItem</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span>&gt;</span>&#123;label&#125;<span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;switch&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;type === &quot;menu&quot; &amp;&amp; <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuRight&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsItemControl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;description &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Paragraph</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &quot;<span class="attr">4px</span> <span class="attr">0</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;description&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Paragraph</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Seperator</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> &quot;<span class="attr">8px</span>&quot;, <span class="attr">marginBottom:</span> &quot;<span class="attr">20px</span>&quot; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledSettingsItem</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Settings</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Settings</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/components/Settings/settings.stories.js</code>  文件中更改 Default Story：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Settings</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="八、屏蔽列表组件开发"><a href="#八、屏蔽列表组件开发" class="headerlink" title="八、屏蔽列表组件开发"></a>八、屏蔽列表组件开发</h3><p>使用 Hygen 创建一个 <code>BlockedList</code> 组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hygen component new BlockedList</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/BlockedList/index.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledBlockedList</span>, &#123;</span><br><span class="line">  <span class="title class_">SettingsMenu</span>,</span><br><span class="line">  <span class="title class_">ClosableAvatar</span>,</span><br><span class="line">  <span class="title class_">BlockedAvatar</span>,</span><br><span class="line">  <span class="title class_">CloseIcon</span>,</span><br><span class="line">  <span class="title class_">BlockedName</span>,</span><br><span class="line">  <span class="title class_">FriendList</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> <span class="title class_">ArrowMenuLeft</span> &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/arrowMenuLeft.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactComponent</span> <span class="keyword">as</span> closeCircle &#125; <span class="keyword">from</span> <span class="string">&quot;assets/icon/closeCircle.svg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> face <span class="keyword">from</span> <span class="string">&quot;assets/images/face-male-1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;styled-components/macro&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BlockedList</span>(<span class="params">&#123; children, ...rest &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StyledBlockedList</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Icon</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;ArrowMenuLeft&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">css</span>=<span class="string">&#123;</span>`</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">cursor:</span> <span class="attr">pointer</span>;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          `&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">size</span>=<span class="string">&quot;xxlarge&quot;</span>&gt;</span>已屏蔽的好友<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">SettingsMenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;new Array(8).fill(0).map((_, i) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ClosableAvatar</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedAvatar</span> <span class="attr">size</span>=<span class="string">&quot;105px&quot;</span> <span class="attr">src</span>=<span class="string">&#123;face&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">CloseIcon</span> <span class="attr">width</span>=<span class="string">&#123;46&#125;</span> <span class="attr">height</span>=<span class="string">&#123;51&#125;</span> <span class="attr">icon</span>=<span class="string">&#123;closeCircle&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">BlockedName</span>&gt;</span>李浩<span class="tag">&lt;/<span class="name">BlockedName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ClosableAvatar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">FriendList</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StyledBlockedList</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">BlockedList</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">any</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BlockedList</span>;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/components/BlockedList/style.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">StyledText</span> <span class="keyword">from</span> <span class="string">&quot;components/Text/style&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;components/Avatar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Text</span> <span class="keyword">from</span> <span class="string">&quot;components/Text&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icon</span> <span class="keyword">from</span> <span class="string">&quot;components/Icon&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BlockedAvatar</span> = <span class="title function_">styled</span>(<span class="title class_">Avatar</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: avatar;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BlockedName</span> = <span class="title function_">styled</span>(<span class="title class_">Text</span>).<span class="title function_">attrs</span>(&#123; <span class="attr">size</span>: <span class="string">&quot;xlarge&quot;</span> &#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: name;</span></span><br><span class="line"><span class="string">  margin-top: 20px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CloseIcon</span> = <span class="title function_">styled</span>(<span class="title class_">Icon</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  grid-area: 2 / 3 / 5 / 4;</span></span><br><span class="line"><span class="string">  z-index: 10;</span></span><br><span class="line"><span class="string">  margin-top: 10px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ClosableAvatar</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-areas:</span></span><br><span class="line"><span class="string">    &quot;avatar avatar avatar&quot;</span></span><br><span class="line"><span class="string">    &quot;avatar avatar avatar&quot;</span></span><br><span class="line"><span class="string">    &quot;avatar avatar avatar&quot;</span></span><br><span class="line"><span class="string">    &quot;name name name&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  justify-items: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SettingsMenu</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  height: 148px;</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: 10px 1fr;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;StyledText&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    grid-column: span 1/-1;</span></span><br><span class="line"><span class="string">    justify-self: center;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FriendList</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  display: grid;</span></span><br><span class="line"><span class="string">  grid-template-columns: repeat(5, 1fr);</span></span><br><span class="line"><span class="string">  row-gap: 24px;</span></span><br><span class="line"><span class="string">  justify-items: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StyledBlockedList</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 2vh 4vw;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">StyledBlockedList</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="title class_">SettingsMenu</span>,</span><br><span class="line">  <span class="title class_">ClosableAvatar</span>,</span><br><span class="line">  <span class="title class_">BlockedAvatar</span>,</span><br><span class="line">  <span class="title class_">BlockedName</span>,</span><br><span class="line">  <span class="title class_">CloseIcon</span>,</span><br><span class="line">  <span class="title class_">FriendList</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改 <code>src/components/BlockedList/blockedList.stories.js</code>  文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">BlockedList</span> <span class="keyword">from</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;页面组件/BlockedList&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">BlockedList</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Default</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">BlockedList</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React 即时通信 UI 实战第八章。React 即时通信 UI 实战为&lt;a href=&quot;https://www.bilibili.com/video/BV1PK4y1b7bY?p=2&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=0965c74096f788f105780e5d5d0e9ebf&quot;&gt;峰华前端工程师&lt;/a&gt;推出的 React 实战课程，以聊天（即时通信）为原型，构建了一整套的 UI 组件库，课程重点在于 UI 组件的分析和实现，力求打造自用组件库。本章包括设置页面中的 InputText、Select（表单）、Radio、Switch 开关等组件。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Web前端" scheme="http://blog.zhuangzhihao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="http://blog.zhuangzhihao.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Java 语言程序设计实践性环节</title>
    <link href="http://blog.zhuangzhihao.top/Java%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E7%8E%AF%E8%8A%82/"/>
    <id>http://blog.zhuangzhihao.top/Java%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E7%8E%AF%E8%8A%82/</id>
    <published>2022-10-29T16:00:00.000Z</published>
    <updated>2022-12-29T08:46:43.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java 语言程序设计实践环节（04748）是 Java 语言程序设计（一）专业课的上级测试部分，考核目标是掌握调试、完善和简单设计 Java 程序的能力、掌握 MyEclipse 开发工具的使用（新建项目，新建类，修改与运行程序）、掌握 Java 的基本语句，基本输入输出流、掌握使用类及方法进行 Java 面向对象程序开发的方法。运行环境是 Windows 10 系统下的 MyEclipse 软件。以下为我在学习和实战练习过程中所做的笔记，可供参考。</p></blockquote><span id="more"></span><h4 id="一、输入、输出语句"><a href="#一、输入、输出语句" class="headerlink" title="一、输入、输出语句"></a>一、输入、输出语句</h4><p>使用 Scanner 语句输入时需要引入包 <code>import java.util.Scanner;</code> ，并定义 Scanner 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">      <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> sc.next();</span><br><span class="line">      System.out.println(<span class="string">&quot;temp：&quot;</span>+ n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BufferedReader</code> 由 <code>Reader</code> 类扩展而来，提供通用的缓冲方式文本读取，而且提供了很实用的 <code>readLine</code>，读取一个文本行，从字符输入流中读取文本，缓冲各个字符，从而提供字符、数组和行的高效读取。使用 BufferedReader 流前需要引入 <code>import java.io.Reader;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      String st;</span><br><span class="line">      <span class="type">int</span> num;</span><br><span class="line">      <span class="type">float</span> fnum;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">          <span class="comment">// 读取一个文本行</span></span><br><span class="line">          st = br.readLine(); <span class="comment">// 阻塞式，当没有数据读取时，就一直会阻塞，而不是返回null</span></span><br><span class="line">            num = Integer.parseInt(br.readLine());  <span class="comment">//需要整型数据 Integer 转换为基本数据类型 int</span></span><br><span class="line">          fnum = Float.parseFloat(br.readLine());  <span class="comment">//Java 把从键盘输入的数据一律看作是字符串，因此若要从键盘输入并让系统认可是数值型数据，必须经过转换。</span></span><br><span class="line">          System.out.println(st + num + snum);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、实现常见的基本算法"><a href="#二、实现常见的基本算法" class="headerlink" title="二、实现常见的基本算法"></a>二、实现常见的基本算法</h3><p>字符统计程序。编写输入字符行，统计输入字符行中数字符、英文字母个数的 Java 应用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in) ;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一串字符串&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine() ;</span><br><span class="line">    <span class="type">char</span>[] sr = s.toCharArray() ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i&lt;sr.length ; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;A&#x27;</span>&lt;=sr[i] &amp;&amp; <span class="string">&#x27;Z&#x27;</span>&gt;=sr[i] || <span class="string">&#x27;a&#x27;</span>&lt;=sr[i] &amp;&amp; <span class="string">&#x27;z&#x27;</span>&gt;=sr[i] ) &#123;</span><br><span class="line">          a++ ;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span>&lt;=sr[i] &amp;&amp; <span class="string">&#x27;9&#x27;</span>&gt;=sr[i]) &#123;</span><br><span class="line">          b++ ;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sr[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">          c++ ;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          d++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;字母的个数为：&quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;数字的个数为：&quot;</span> + b);</span><br><span class="line">    System.out.println(<span class="string">&quot;空格的个数为：&quot;</span> + c);</span><br><span class="line">    System.out.println(<span class="string">&quot;其他字符的个数为：&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特殊性质数的判断。例如水仙花数、完数、素数的判断程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 水仙花数，即：三位数的每一位的立方和等于这个三位数本身</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Daffodil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>, number;</span><br><span class="line">        <span class="keyword">for</span>(number=<span class="number">100</span>;number&lt;=<span class="number">999</span>;number++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> number%<span class="number">10</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num10</span> <span class="operator">=</span> number/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num100</span> <span class="operator">=</span> number/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">           sum = num1*num1*num1 + num10*num10*num10 + num100*num100*num100;</span><br><span class="line">            <span class="keyword">if</span>(sum==number) &#123;</span><br><span class="line">                System.out.println(number+<span class="string">&quot;是水仙花数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完数，即：所有因子和（除了他本身）== 他本身</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WanNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num=<span class="number">1</span>;num&lt;=<span class="number">1000</span>;num++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;num;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(num%i==<span class="number">0</span>) &#123;</span><br><span class="line">                    sum+=i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num==sum) &#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//素数：只能被1和他本身整除的数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">paime</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">boolean</span> t=<span class="literal">true</span>;</span><br><span class="line">         <span class="type">int</span> i;</span><br><span class="line">         <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;paime;i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(paime%i==<span class="number">0</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 t=<span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(t)</span><br><span class="line">         &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类的继承定义。声明几何形状类，类中定义几何形状的成员变量和方法，然后继承声明几何形状类，创建对象，并显示对象的相关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeometricObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String col;    <span class="comment">//String类型的私有数据域color，用于保存几何对象的颜色，默认值为white。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> fil;   <span class="comment">//boolean类型的私有数据域filled，用于表明几何对象是否填充颜色，默认值为false。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeometricObject</span><span class="params">()</span> &#123;  <span class="comment">//有参构造方法，将颜色、是否填充颜色设置为给定的参数。</span></span><br><span class="line">      col = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">      fil = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeometricObject</span><span class="params">(String col, <span class="type">boolean</span> fil)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.col = col;</span><br><span class="line">      <span class="built_in">this</span>.fil = fil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCol</span><span class="params">()</span> &#123;    <span class="comment">//访问器方法getColor、isFilled，分别用于访问颜色、是否填充颜色。</span></span><br><span class="line">      <span class="keyword">return</span> col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCol</span><span class="params">(String col)</span> &#123;   <span class="comment">//更改器方法setColor、setFilled，分别用于更改颜色、是否填充颜色。</span></span><br><span class="line">      <span class="built_in">this</span>.col = col;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFil</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFil</span><span class="params">(<span class="type">boolean</span> fil)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fil = fil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">GeometricObject</span> &#123;   <span class="comment">//定义一个名为Triangle的类来继承GeometricObject类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> s1;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> s2;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> s3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">()</span> &#123;</span><br><span class="line">      s1 = <span class="number">1</span>;</span><br><span class="line">      s2 = <span class="number">1</span>;</span><br><span class="line">      s3 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">(String col, <span class="type">boolean</span> fil, <span class="type">double</span> s1, <span class="type">double</span> s2, <span class="type">double</span> s3)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(col, fil);</span><br><span class="line">      <span class="built_in">this</span>.s1 = s1;</span><br><span class="line">      <span class="built_in">this</span>.s2 = s2;</span><br><span class="line">      <span class="built_in">this</span>.s3 = s3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">gets</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">double</span> <span class="variable">p</span> <span class="operator">=</span> (s1 + s2 + s3) / <span class="number">2.0</span>;</span><br><span class="line">      <span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> p * (p - s1) * (p - s2) * (p - s3);</span><br><span class="line">      s = Math.sqrt(s);</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getc</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tos</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">      String s=<span class="string">&quot;Triangle:\n&quot;</span>+<span class="string">&quot;side1 = &quot;</span>+s1+<span class="string">&quot; side2 = &quot;</span>+s2+<span class="string">&quot; side3 = &quot;</span>+s3+<span class="string">&quot;\n&quot;</span></span><br><span class="line">        +<span class="string">&quot;Color: &quot;</span>+getCol()+<span class="string">&quot; and filled: &quot;</span>+isFil()+<span class="string">&quot;\n&quot;</span></span><br><span class="line">        +<span class="string">&quot;The area is &quot;</span>+gets()+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;The perimeter is &quot;</span>+getc()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> a=sc.nextDouble();</span><br><span class="line">        <span class="type">double</span> b=sc.nextDouble();</span><br><span class="line">        <span class="type">double</span> c=sc.nextDouble();</span><br><span class="line">        String s=sc.next();</span><br><span class="line">        <span class="type">boolean</span> f=sc.nextBoolean();</span><br><span class="line">        sc.close();</span><br><span class="line">        Triangle t=<span class="keyword">new</span> <span class="title class_">Triangle</span>(s,f,a,b,c);</span><br><span class="line">        t.tos();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组排序程序。编写输入整数序列、对输入的整数进行排序后输出的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序算法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] Arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">14</span>,<span class="number">52</span>,<span class="number">56</span>,<span class="number">32</span>,<span class="number">17</span>&#125;;</span><br><span class="line">        printArray(Arr);</span><br><span class="line">        bubbleSort(Arr);</span><br><span class="line">        printArray(Arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x!=arr.length-<span class="number">1</span>)</span><br><span class="line">              System.out.print(arr[x]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              System.out.println(arr[x]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;arr.length-<span class="number">1</span>; x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>; y&lt;arr.length-<span class="number">1</span>-x;y++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[y]&gt;arr[y+<span class="number">1</span>])</span><br><span class="line">                  swap(arr,y+<span class="number">1</span>,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取整数中每个数字的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">      <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">          System.out.print(num%<span class="number">10</span>+<span class="string">&quot;，&quot;</span>);</span><br><span class="line">          num/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line">      <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">      t.print(<span class="number">12345</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、基于-Swing-和-AWT-的界面程序设计"><a href="#三、基于-Swing-和-AWT-的界面程序设计" class="headerlink" title="三、基于 Swing 和 AWT 的界面程序设计"></a>三、基于 Swing 和 AWT 的界面程序设计</h3><p>两个顶级容器的应用：Frame(窗口)、Dialog(弹窗)  ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Dialog;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Label;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Myframe</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myframe</span>();</span><br><span class="line">        frame.init();</span><br><span class="line">        frame.compen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个桌面窗口，并在窗口中添加一个按钮组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myframe</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3005332394925719672L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Myframe</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过设置初始化函数来对此窗口进行初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">super</span>.setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">//为窗口添加事件，进行关闭操作</span></span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为此窗口添加一个组件---按钮组件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span>);</span><br><span class="line">        button.setSize(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//设置组件的布局方式</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);;</span><br><span class="line">        <span class="built_in">this</span>.add(button);</span><br><span class="line">        <span class="comment">//为按钮主键添加侦听器---侦听器通过内部类实现---接口、继承</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">//当侦听到事件后，响应此继承的方法，并执行方法中的语句</span></span><br><span class="line">                <span class="comment">//事件产生后，重新创建一个弹窗对象进行显示</span></span><br><span class="line">                end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Mydialog</span>(<span class="built_in">this</span>,<span class="string">&quot;测试弹窗&quot;</span>).increase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建一个弹窗通过监听弹出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mydialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加构造函数，直接通过构造函数对弹窗进行初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mydialog</span><span class="params">(Frame owner,String title)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(owner,title);</span><br><span class="line">        setVisible(<span class="literal">true</span>);<span class="comment">//方法继承自window类，往往用于顶级窗口，设置窗口是否可见</span></span><br><span class="line">        setSize(<span class="number">100</span>, <span class="number">200</span>);<span class="comment">//继承自window类，用于设置组件的大小</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 继承自window类，用于设置窗口的背景颜色，</span></span><br><span class="line"><span class="comment">         * 其需要传入color类对象可以使用color类中的类变量。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        setBackground(Color.BLUE);</span><br><span class="line">        setLocation(<span class="number">200</span>, <span class="number">300</span>);<span class="comment">//继承自window类，移动组件到指定位置，也就是将组件放到指定位置。以物理机左上角作为原点。</span></span><br><span class="line">        <span class="comment">/*setBounds(x, y, width, height);</span></span><br><span class="line"><span class="comment">         * 继承自window类，用于移动组件到指定位置，并设定组件的大小。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//为窗口添加事件，进行关闭操作,</span></span><br><span class="line">        <span class="comment">//这种内部类不去实现一个接口而是去继承一个类，而这个类实现类所有方法，但是方法体为空，便于以后</span></span><br><span class="line">        <span class="comment">//进行使用，这种模式方法叫做适配器模式，大大降低了无效代码的使用。</span></span><br><span class="line">        <span class="built_in">this</span>.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">//当事件产生后，系统构造出内部类对象，通过此对象调用，复写的方法</span></span><br><span class="line">            <span class="comment">//其中复写中方法中的参数，通过系统产生传入，</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">              System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向此容器中添加组件---文本框</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;这是一个文本框&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.add(label);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、JavaApplet-下的图形处理"><a href="#四、JavaApplet-下的图形处理" class="headerlink" title="四、JavaApplet 下的图形处理"></a>四、JavaApplet 下的图形处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.* ;</span><br><span class="line"><span class="keyword">import</span> java.applet.Applet ;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppletImage</span> <span class="keyword">extends</span> <span class="title class_">Applet</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Image img[] ;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">img=<span class="keyword">new</span> <span class="title class_">Image</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> num ;</span><br><span class="line"><span class="keyword">for</span>(num=<span class="number">0</span>;num&lt;<span class="number">10</span>;num++)&#123;</span><br><span class="line">img[num]=getImage(getDocumentBase(),<span class="string">&quot;T&quot;</span>+(num+<span class="number">1</span>)+<span class="string">&quot;.gif&quot;</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        g.drawImage(img[index],<span class="number">0</span>,<span class="number">0</span>,<span class="built_in">this</span>) ;  <span class="comment">//绘制图像</span></span><br><span class="line">        index=++index%<span class="number">10</span> ;</span><br><span class="line">        repaint() ;  <span class="comment">//重画applet 界面</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">          Thread.sleep(<span class="number">500</span>) ;  <span class="comment">//线程暂停</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、Java-下的多线程程序设计"><a href="#五、Java-下的多线程程序设计" class="headerlink" title="五、Java 下的多线程程序设计"></a>五、Java 下的多线程程序设计</h3><p>编写一个有两个线程的程序，第一个线程用来计算 1~100 之间的偶数及个数，第二个线程用来计算 1-100 之间的偶数及个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> experiment4;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> first;</span><br><span class="line">    NumberRunnable(<span class="type">int</span> first)&#123;</span><br><span class="line">        <span class="built_in">this</span>.first=first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=first;i&lt;=<span class="number">100</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(i+ <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp4_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">NumberRunnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberRunnable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">NumberRunnable</span> <span class="variable">runnable2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberRunnable</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread_odd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable1,<span class="string">&quot;奇数线程&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread_even</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable2,<span class="string">&quot;偶数线程&quot;</span>);</span><br><span class="line">        thread_odd.start();</span><br><span class="line">        thread_even.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Java 语言程序设计实践环节（04748）是 Java 语言程序设计（一）专业课的上级测试部分，考核目标是掌握调试、完善和简单设计 Java 程序的能力、掌握 MyEclipse 开发工具的使用（新建项目，新建类，修改与运行程序）、掌握 Java 的基本语句，基本输入输出流、掌握使用类及方法进行 Java 面向对象程序开发的方法。运行环境是 Windows 10 系统下的 MyEclipse 软件。以下为我在学习和实战练习过程中所做的笔记，可供参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="计算机科学与技术" scheme="http://blog.zhuangzhihao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
